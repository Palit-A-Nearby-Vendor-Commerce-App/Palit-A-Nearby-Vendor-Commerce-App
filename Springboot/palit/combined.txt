AccountController.java
```
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.AccountEntity;
import com.nearbyvendor.palit.service.AccountService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class AccountController {

    @Autowired
    private AccountService accountService;

    @GetMapping("/getAllAccounts")
    public ResponseEntity<List<AccountEntity>> getAllAccounts() {
        List<AccountEntity> accounts = accountService.getAllAccounts();
        return new ResponseEntity<>(accounts, HttpStatus.OK);
    }

    @GetMapping("/getAccountById/{id}")
    public ResponseEntity<AccountEntity> getAccountById(@PathVariable int id) {
        AccountEntity account = accountService.getAccountById(id);
        if (account != null) {
            return new ResponseEntity<>(account, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @PostMapping("/createAccount")
    public ResponseEntity<AccountEntity> createAccount(@RequestBody AccountEntity account) {
        AccountEntity createdAccount = accountService.createAccount(account);
        return new ResponseEntity<>(createdAccount, HttpStatus.CREATED);
    }

    @PutMapping("/editAccountById/{id}")
    public ResponseEntity<AccountEntity> editAccountById(@PathVariable int id, @RequestBody AccountEntity account) {
        AccountEntity updatedAccount = accountService.editAccountById(id, account);
        if (updatedAccount != null) {
            return new ResponseEntity<>(updatedAccount, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @DeleteMapping("/deleteAccountById/{id}")
    public ResponseEntity<Void> deleteAccountById(@PathVariable int id) {
        boolean deleted = accountService.deleteAccountById(id);
        if (deleted) {
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
}
```
ChatController.java
```
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.ChatEntity;
import com.nearbyvendor.palit.service.ChatService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class ChatController {

    @Autowired
    private ChatService chatService;

    // Get all chats by conversation id
    @GetMapping("getChatsByConversationId/{conversationId}")
    public ResponseEntity<List<ChatEntity>> getChatsByConversationId(@PathVariable int conversationId) {
        List<ChatEntity> chats = chatService.getChatsByConversationId(conversationId);
        return new ResponseEntity<>(chats, HttpStatus.OK);
    }

    // Create a new chat
    @PostMapping("/createChat")
    public ResponseEntity<ChatEntity> createChat(@RequestBody ChatEntity chat) {
        ChatEntity createdChat = chatService.createChat(chat);
        return new ResponseEntity<>(createdChat, HttpStatus.CREATED);
    }

    // Update an existing chat
    @PutMapping("updateChatById/{chatId}")
    public ResponseEntity<ChatEntity> updateChatById(@PathVariable int chatId, @RequestBody ChatEntity chat) {
        ChatEntity updatedChat = chatService.updateChatById(chatId, chat);
        if (updatedChat != null) {
            return new ResponseEntity<>(updatedChat, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Delete an existing chat
    @DeleteMapping("deleteChatById/{chatId}")
    public ResponseEntity<Void> deleteChatById(@PathVariable int chatId) {
        boolean deleted = chatService.deleteChatById(chatId);
        if (deleted) {
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
}
```
ConversationController.java
```
package com.nearbyvendor.palit.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.nearbyvendor.palit.entity.ConversationEntity;
import com.nearbyvendor.palit.service.ConversationService;

@RestController
@RequestMapping("/api")
public class ConversationController {

    @Autowired
    private ConversationService conversationService;

    // Get all conversations
    @GetMapping("/getAllConversations")
    public ResponseEntity<List<ConversationEntity>> getAllConversations() {
        List<ConversationEntity> conversations = conversationService.getAllConversations();
        return new ResponseEntity<>(conversations, HttpStatus.OK);
    }

    // Get a conversation by id
    @GetMapping("/getConversationById/{id}")
    public ResponseEntity<ConversationEntity> getConversationById(@PathVariable("id") int id) {
        ConversationEntity conversation = conversationService.getConversationById(id);
        if (conversation != null) {
            return new ResponseEntity<>(conversation, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Create a new conversation
    @PostMapping("/createConversation")
    public ResponseEntity<ConversationEntity> createConversation(@RequestBody ConversationEntity conversation) {
        ConversationEntity newConversation = conversationService.createConversation(conversation);
        return new ResponseEntity<>(newConversation, HttpStatus.CREATED);
    }

    // Update an existing conversation
    @PutMapping("/updateConversationById/{id}")
    public ResponseEntity<ConversationEntity> updateConversationById(@PathVariable("id") int id, @RequestBody ConversationEntity conversation) {
        ConversationEntity updatedConversation = conversationService.updateConversationById(id, conversation);
        if (updatedConversation != null) {
            return new ResponseEntity<>(updatedConversation, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Delete a conversation by id
    @DeleteMapping("/deleteConversationById/{id}")
    public ResponseEntity<Void> deleteConversationById(@PathVariable("id") int id) {
        boolean deleted = conversationService.deleteConversationById(id);
        if (deleted) {
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
}
```
LocationController.java
```
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.LocationEntity;
import com.nearbyvendor.palit.service.LocationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class LocationController {

    @Autowired
    private LocationService locationService;

    // Get all locations
    @GetMapping("/getAllLocations")
    public ResponseEntity<List<LocationEntity>> getAllLocations() {
        List<LocationEntity> locations = locationService.getAllLocations();
        return new ResponseEntity<>(locations, HttpStatus.OK);
    }

    // Get location by id
    @GetMapping("/getLocationById/{id}")
    public ResponseEntity<LocationEntity> getLocationById(@PathVariable("id") int id) {
        LocationEntity location = locationService.getLocationById(id);
        if (location != null) {
            return new ResponseEntity<>(location, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Create location
    @PostMapping("/createLocation")
    public ResponseEntity<LocationEntity> createLocation(@RequestBody LocationEntity location) {
        LocationEntity newLocation = locationService.createLocation(location);
        return new ResponseEntity<>(newLocation, HttpStatus.CREATED);
    }

    // Update location
    @PutMapping("/updateLocationById/{id}")
    public ResponseEntity<LocationEntity> updateLocationById(@PathVariable("id") int id, @RequestBody LocationEntity location) {
        LocationEntity updatedLocation = locationService.updateLocationById(id, location);
        if (updatedLocation != null) {
            return new ResponseEntity<>(updatedLocation, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Delete location
    @DeleteMapping("/deleteLocationById/{id}")
    public ResponseEntity<Void> deleteLocationById(@PathVariable("id") int id) {
        boolean deleted = locationService.deleteLocationById(id);
        if (deleted) {
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
}
```
ProductServiceController.java
```
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.ProductServiceEntity;
import com.nearbyvendor.palit.service.ProductServiceService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class ProductServiceController {

    @Autowired
    private ProductServiceService productServiceService;

    // Get all product services
    @GetMapping("/getAllProductServices")
    public ResponseEntity<List<ProductServiceEntity>> getAllProductServices() {
        List<ProductServiceEntity> productServices = productServiceService.getAllProductServices();
        return new ResponseEntity<>(productServices, HttpStatus.OK);
    }

    // Get product service by id
    @GetMapping("/getProductServiceById/{id}")
    public ResponseEntity<ProductServiceEntity> getProductServiceById(@PathVariable int id) {
        ProductServiceEntity productService = productServiceService.getProductServiceById(id);
        if (productService != null) {
            return new ResponseEntity<>(productService, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Get product services by store id
    @GetMapping("/getProductServicesByStoreId/store/{storeId}")
    public ResponseEntity<List<ProductServiceEntity>> getProductServicesByStoreId(@PathVariable int storeId) {
        List<ProductServiceEntity> productServices = productServiceService.getProductServicesByStoreId(storeId);
        return new ResponseEntity<>(productServices, HttpStatus.OK);
    }

    // Create product service
    @PostMapping("/createProductService")
    public ResponseEntity<ProductServiceEntity> createProductService(@RequestBody ProductServiceEntity productService) {
        ProductServiceEntity newProductService = productServiceService.createProductService(productService);
        return new ResponseEntity<>(newProductService, HttpStatus.CREATED);
    }

    // Update product service
    @PutMapping("/updateProductServiceById/{id}")
    public ResponseEntity<ProductServiceEntity> updateProductService(@PathVariable int id, @RequestBody ProductServiceEntity productService) {
        ProductServiceEntity updatedProductService = productServiceService.updateProductServiceById(id, productService);
        if (updatedProductService != null) {
            return new ResponseEntity<>(updatedProductService, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Delete product service
    @DeleteMapping("/deleteProductServiceById/{id}")
    public ResponseEntity<Void> deleteProductServiceById(@PathVariable int id) {
        boolean deleted = productServiceService.deleteProductServiceById(id);
        if (deleted) {
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
}
```
ReportController.java
```
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.ReportEntity;
import com.nearbyvendor.palit.service.ReportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class ReportController {

    @Autowired
    private ReportService reportService;

    // Get all reports
    @GetMapping("/getAllReports")
    public ResponseEntity<List<ReportEntity>> getAllReports() {
        List<ReportEntity> reports = reportService.getAllReports();
        return new ResponseEntity<>(reports, HttpStatus.OK);
    }

    // Get a report by ID
    @GetMapping("/getReportById/{id}")
    public ResponseEntity<ReportEntity> getReportById(@PathVariable int id) {
        ReportEntity report = reportService.getReportById(id);
        if (report != null) {
            return new ResponseEntity<>(report, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Create a new report
    @PostMapping("/createReport")
    public ResponseEntity<ReportEntity> createReport(@RequestBody ReportEntity report) {
        ReportEntity newReport = reportService.createReport(report);
        return new ResponseEntity<>(newReport, HttpStatus.CREATED);
    }

    // Update an existing report
    @PutMapping("/updateReportById/{id}")
    public ResponseEntity<ReportEntity> updateReportById(@PathVariable int id, @RequestBody ReportEntity report) {
        ReportEntity updatedReport = reportService.updateReportById(id, report);
        if (updatedReport != null) {
            return new ResponseEntity<>(updatedReport, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Delete an existing report
    @DeleteMapping("/deleteReportById/{id}")
    public ResponseEntity<Void> deleteReportById(@PathVariable int id) {
        boolean deleted = reportService.deleteReportById(id);
        if (deleted) {
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
}
```
StoreController.java
```
package com.nearbyvendor.palit.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.nearbyvendor.palit.entity.StoreEntity;
import com.nearbyvendor.palit.service.StoreService;

@RestController
@RequestMapping("/api")
public class StoreController {
    
    @Autowired
    private StoreService storeService;
    
    @GetMapping("/getAllStores")
    public ResponseEntity<List<StoreEntity>> getAllStores() {
        List<StoreEntity> stores = storeService.getAllStores();
        return new ResponseEntity<>(stores, HttpStatus.OK);
    }
    
    @GetMapping("/getStoreById/{id}")
    public ResponseEntity<StoreEntity> getStoreById(@PathVariable("id") int id) {
        StoreEntity store = storeService.getStoreById(id);
        if (store != null) {
            return new ResponseEntity<>(store, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
    
    @PostMapping("/createStore")
    public ResponseEntity<StoreEntity> createStore(@RequestBody StoreEntity store) {
        StoreEntity newStore = storeService.createStore(store);
        return new ResponseEntity<>(newStore, HttpStatus.CREATED);
    }
    
    @PutMapping("/updateStoreById/{id}")
    public ResponseEntity<StoreEntity> updateStore(@PathVariable("id") int id, @RequestBody StoreEntity store) {
        StoreEntity updatedStore = storeService.updateStoreById(id, store);
        if (updatedStore != null) {
            return new ResponseEntity<>(updatedStore, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
}
```
TransactionController.java
```
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.TransactionEntity;
import com.nearbyvendor.palit.service.TransactionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class TransactionController {

    @Autowired
    private TransactionService transactionService;

    // Get all transactions
    @GetMapping("/getAllTransactions")
    public ResponseEntity<List<TransactionEntity>> getTransactions() {
        List<TransactionEntity> transactions = transactionService.getAllTransactions();
        return new ResponseEntity<>(transactions, HttpStatus.OK);
    }

    // Get a transaction by ID
    @GetMapping("/getTransactionById/{id}")
    public ResponseEntity<TransactionEntity> getTransactionById(@PathVariable int id) {
        TransactionEntity transaction = transactionService.getTransactionById(id);
        if (transaction != null) {
            return new ResponseEntity<>(transaction, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Create a new transaction
    @PostMapping("/createTransaction")
    public ResponseEntity<TransactionEntity> createTransaction(@RequestBody TransactionEntity transaction) {
        TransactionEntity newTransaction = transactionService.createTransaction(transaction);
        return new ResponseEntity<>(newTransaction, HttpStatus.CREATED);
    }

    // Update an existing transaction
    @PutMapping("updateTransactionById/{id}")
    public ResponseEntity<TransactionEntity> updateTransactionById(@PathVariable int id, @RequestBody TransactionEntity transaction) {
        TransactionEntity updatedTransaction = transactionService.updateTransactionById(id, transaction);
        if (updatedTransaction != null) {
            return new ResponseEntity<>(updatedTransaction, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Delete an existing transaction
    @DeleteMapping("deleteTransactionById/{id}")
    public ResponseEntity<Void> deleteTransactionById(@PathVariable int id) {
        transactionService.deleteTransactionById(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}
```
UserController.java
```
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.AccountEntity;
import com.nearbyvendor.palit.entity.LocationEntity;
import com.nearbyvendor.palit.entity.StoreEntity;
import com.nearbyvendor.palit.entity.UserEntity;
import com.nearbyvendor.palit.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.text.ParseException;
import java.util.List;

@RestController
@RequestMapping("/api")
public class UserController {

    @Autowired
    private UserService userService;

    @GetMapping("/getAllUsers")
    public ResponseEntity<List<UserEntity>> getAllUsers() {
        List<UserEntity> users = userService.getAllUsers();
        return new ResponseEntity<>(users, HttpStatus.OK);
    }

    @GetMapping("/getUserById/{id}")
    public ResponseEntity<UserEntity> getUserById(@PathVariable int id) {
        UserEntity user = userService.getUserById(id);
        if (user != null) {
            return new ResponseEntity<>(user, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @PostMapping(value = "/createUser", consumes = { "multipart/form-data" })
    public ResponseEntity<UserEntity> createUser(@RequestParam("image") MultipartFile image,
            @RequestParam("firstName") String firstName,
            @RequestParam("lastName") String lastName,
            @RequestParam("birthDate") String birthDate,
            @RequestParam("email") String email,
            @RequestParam("password") String password,
            @RequestParam("accountId") int accountId,
            @RequestParam("locationId") int locationId,
            @RequestParam("storeId") String storeId) {
        try {
            UserEntity newUser = userService.createUser(image, firstName, lastName, birthDate, email, password,
                    accountId,
                    locationId, storeId);
            return new ResponseEntity<>(newUser, HttpStatus.CREATED);
        } catch (IOException | ParseException e) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
    }

    @PutMapping(value = "/updateUserById/{id}", consumes = { "multipart/form-data" })
    public ResponseEntity<UserEntity> updateUser(@PathVariable("id") int id,
            @RequestParam("image") MultipartFile image,
            @RequestParam("firstName") String firstName,
            @RequestParam("lastName") String lastName,
            @RequestParam("birthDate") String birthDate,
            @RequestParam("email") String email,
            @RequestParam("password") String password,
            @RequestParam("accountId") int accountId,
            @RequestParam("locationId") int locationId,
            @RequestParam("storeId") String storeId) {
        try {
            UserEntity updatedUser = userService.updateUserById(id, image, firstName, lastName, birthDate, email,
                    password, accountId, locationId, storeId);
            if (updatedUser != null) {
                return new ResponseEntity<>(updatedUser, HttpStatus.OK);
            } else {
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            }
        } catch (IOException | ParseException e) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
    }

    @DeleteMapping("/deleteUserById/{id}")
    public ResponseEntity<Void> deleteUserById(@PathVariable int id) {
        userService.deleteUserById(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    @PostMapping("/isEmailTaken")
    public ResponseEntity<Boolean> checkEmail(@RequestBody UserEntity userData) {
        boolean isEmailTaken = userService.checkEmail(userData);
        return new ResponseEntity<>(isEmailTaken, HttpStatus.OK);
    }

    // define the controller API function that returns the service function
    @GetMapping("/getAccountByUserId/{userId}")
    public ResponseEntity<AccountEntity> getAccountByAccountId(@PathVariable int accountId) {
        AccountEntity account = userService.getAccountByAccountId(accountId);
        if (account != null) {
            return ResponseEntity.ok(account);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    // define the controller API function that returns the service function for
    // location
    @GetMapping("/getLocationByUserId/{userId}")
    public ResponseEntity<LocationEntity> getLocationByLocationId(@PathVariable int locationId) {
        LocationEntity location = userService.getLocationByLocationId(locationId);
        if (location != null) {
            return ResponseEntity.ok(location);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    // define the controller API function that returns the service function for
    // store
    @GetMapping("/getStoreByStoreId/{storeId}")
    public ResponseEntity<StoreEntity> getStoreByStoreId(@PathVariable int storeId) {
        StoreEntity store = userService.getStoreByStoreId(storeId);
        if (store != null) {
            return ResponseEntity.ok(store);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}
```
AccountEntity.java
```
package com.nearbyvendor.palit.entity;

import javax.persistence.*;

@Entity
@Table(name = "account")
public class AccountEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int accountId;

    private boolean isVendor;

    private boolean isAdmin;

    private boolean isDeleted;

    // getters and setters
    public int getId() {
        return accountId;
    }

    public void setId(int accountId) {
        this.accountId = accountId;
    }

    public boolean getIsVendor() {
        return isVendor;
    }

    public void setIsVendor(boolean isVendor) {
        this.isVendor = isVendor;
    }

    public boolean getIsAdmin() {
        return isAdmin;
    }

    public void setIsAdmin(boolean isAdmin) {
        this.isAdmin = isAdmin;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }
}
```
ChatEntity.java
```
package com.nearbyvendor.palit.entity;

import javax.persistence.*;
import java.sql.Timestamp;

@Entity
@Table(name = "chat")
public class ChatEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int chatId;

    private int senderId;

    private int receiverId;

    private String messageContent;

    private Timestamp timestamp;

    private int conversationId;

    private boolean isDeleted;

    public ChatEntity() {
    }

    public ChatEntity(int senderId, int receiverId, String messageContent, Timestamp timestamp, int conversationId) {
        this.senderId = senderId;
        this.receiverId = receiverId;
        this.messageContent = messageContent;
        this.timestamp = timestamp;
        this.conversationId = conversationId;
    }

    public int getId() {
        return chatId;
    }

    public void setId(int chatId) {
        this.chatId = chatId;
    }

    public int getSenderId() {
        return senderId;
    }

    public void setSenderId(int senderId) {
        this.senderId = senderId;
    }

    public int getReceiverId() {
        return receiverId;
    }

    public void setReceiverId(int receiverId) {
        this.receiverId = receiverId;
    }

    public String getMessageContent() {
        return messageContent;
    }

    public void setMessageContent(String messageContent) {
        this.messageContent = messageContent;
    }

    public Timestamp getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Timestamp timestamp) {
        this.timestamp = timestamp;
    }

    public int getConversationId() {
        return conversationId;
    }

    public void setConversationId(int conversationId) {
        this.conversationId = conversationId;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }
}
```
ConversationEntity.java
```
package com.nearbyvendor.palit.entity;

import javax.persistence.*;

@Entity
@Table(name = "conversation")
public class ConversationEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int conversationId;

    private int senderId;

    private int receiverId;
    
    private boolean isDeleted;

    public ConversationEntity() {
    }

    public ConversationEntity(int senderId, int receiverId) {
        this.senderId = senderId;
        this.receiverId = receiverId;
    }

    public int getId() {
        return conversationId;
    }

    public void setId(int conversationId) {
        this.conversationId = conversationId;
    }

    public int getSenderId() {
        return senderId;
    }

    public void setSenderId(int senderId) {
        this.senderId = senderId;
    }

    public int getReceiverId() {
        return receiverId;
    }

    public void setReceiverId(int receiverId) {
        this.receiverId = receiverId;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }
}
```
LocationEntity.java
```
package com.nearbyvendor.palit.entity;

import javax.persistence.*;

@Entity
@Table(name = "location")
public class LocationEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int locationId;

    private double latitude;

    private double longitude;

    private boolean isDeleted;

    private boolean isActive;

    public LocationEntity() {
    }

    public LocationEntity(int locationId, double latitude, double longitude, UserEntity user) {
        this.locationId = locationId;
        this.latitude = latitude;
        this.longitude = longitude;
    }

    public int getId() {
        return locationId;
    }

    public void setId(int locationId) {
        this.locationId = locationId;
    }

    public double getLatitude() {
        return latitude;
    }

    public void setLatitude(double latitude) {
        this.latitude = latitude;
    }

    public double getLongitude() {
        return longitude;
    }

    public void setLongitude(double longitude) {
        this.longitude = longitude;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public boolean getIsActive() {
        return this.isActive;
    }

    public void setIsActive(boolean isActive) {
        this.isActive = isActive;
    }
}
```
ProductServiceEntity.java
```
package com.nearbyvendor.palit.entity;

import javax.persistence.*;

@Entity
@Table(name = "product_service")
public class ProductServiceEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int productId;

    private String name;

    private String description;

    private double price;

    private int storeId;

    private String imagePath;
    
    private boolean isDeleted;

    public ProductServiceEntity() {
    }

    public ProductServiceEntity(String name, String description, double price, int storeId, String imagePath) {
        this.name = name;
        this.description = description;
        this.price = price;
        this.storeId = storeId;
        this.imagePath = imagePath;
    }

    public int getId() {
        return productId;
    }

    public void setId(int productId) {
        this.productId = productId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public String getImagePath() {
        return imagePath;
    }

    public void setImagePath(String imagePath) {
        this.imagePath = imagePath;
    }

    public int getStoreId() {
        return storeId;
    }

    public void setStoreId(int storeId) {
        this.storeId = storeId;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }
}
```
ReportEntity.java
```
package com.nearbyvendor.palit.entity;

import javax.persistence.*;
import java.sql.Timestamp;

@Entity
@Table(name = "report")
public class ReportEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int reportId;

    @Column(nullable = false)
    private int senderId;

    @Column(nullable = false)
    private String messageContent;

    @Column(nullable = false)
    private Timestamp timestamp;

    @Column(nullable = false)
    private boolean isResolved;
    
    private boolean isDeleted;

    public ReportEntity() {
    }

    public ReportEntity(int senderId, String messageContent, Timestamp timestamp, boolean isResolved) {
        this.senderId = senderId;
        this.messageContent = messageContent;
        this.timestamp = timestamp;
        this.isResolved = isResolved;
    }

    public int getId() {
        return reportId;
    }

    public void setId(int reportId) {
        this.reportId = reportId;
    }

    public int getSenderId() {
        return senderId;
    }

    public void setSenderId(int senderId) {
        this.senderId = senderId;
    }

    public String getMessageContent() {
        return messageContent;
    }

    public void setMessageContent(String messageContent) {
        this.messageContent = messageContent;
    }

    public Timestamp getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Timestamp timestamp) {
        this.timestamp = timestamp;
    }

    public boolean getIsResolved() {
        return isResolved;
    }

    public void setIsResolved(boolean isResolved) {
        this.isResolved = isResolved;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }
}
```
StoreEntity.java
```
package com.nearbyvendor.palit.entity;

import javax.persistence.*;

@Entity
@Table(name = "store")
public class StoreEntity {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int storeId;
    
    private String storeName;
    
    private String description;
    
    private String category;
    
    private int rating;
    
    private boolean isDeleted;
    
    public StoreEntity() {
        // default constructor
    }
    
    public StoreEntity(String storeName, String description, String category, int vendorAccountId) {
        this.storeName = storeName;
        this.description = description;
        this.category = category;
    }
    
    public int getId() {
        return storeId;
    }
    
    public void setId(int storeId) {
        this.storeId = storeId;
    }
    
    public String getStoreName() {
        return storeName;
    }
    
    public void setStoreName(String storeName) {
        this.storeName = storeName;
    }
    
    public String getDescription() {
        return description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    
    public String getCategory() {
        return category;
    }
    
    public void setCategory(String category) {
        this.category = category;
    }
    
    public int getRating() {
        return rating;
    }
    
    public void setRating(int rating) {
        this.rating = rating;
    }
    
    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }
    
    @Override
    public String toString() {
        return "StoreEntity [storeId=" + storeId + ", storeName=" + storeName + ", description=" + description
                + ", category=" + category + ", rating=" + rating + "]";
    }

}
```
TransactionEntity.java
```
package com.nearbyvendor.palit.entity;

import javax.persistence.*;

@Entity
@Table(name = "transaction")
public class TransactionEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int transactionId;

    private int accountCustomerId;

    private int accountVendorId;

    private String status;

    private int rating;
    
    private boolean isDeleted;

    public TransactionEntity() {
    }

    public TransactionEntity(int accountCustomerId, int accountVendorId, String status, int rating) {
        this.accountCustomerId = accountCustomerId;
        this.accountVendorId = accountVendorId;
        this.status = status;
        this.rating = rating;
    }

    public int getId() {
        return transactionId;
    }

    public void setId(int transactionId) {
        this.transactionId = transactionId;
    }

    public int getAccountCustomerId() {
        return accountCustomerId;
    }

    public void setAccountCustomerId(int accountCustomerId) {
        this.accountCustomerId = accountCustomerId;
    }

    public int getAccountVendorId() {
        return accountVendorId;
    }

    public void setAccountVendorId(int accountVendorId) {
        this.accountVendorId = accountVendorId;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public int getRating() {
        return rating;
    }

    public void setRating(int rating) {
        this.rating = rating;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }
}
```
UserEntity.java
```
package com.nearbyvendor.palit.entity;

import javax.persistence.*;

import java.util.Date;

@Entity
@Table(name = "users")
public class UserEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int userId;

    private String firstName;
    
    private String lastName;

    @Temporal(TemporalType.DATE)
    private Date birthDate;

    private String email;

    private String password;

    private boolean isDeleted;

    @Lob
    private byte[] image;

    @OneToOne
    @JoinColumn(name = "accountId", referencedColumnName = "accountId")
    private AccountEntity account;

    @OneToOne
    @JoinColumn(name = "locationId", referencedColumnName = "locationId")
    private LocationEntity location;

    @OneToOne
    @JoinColumn(name = "storeId", referencedColumnName = "storeId")
    private StoreEntity store;

    public UserEntity() {
        super();
        this.isDeleted = false;
    }

    public UserEntity(int userId, String firstName, String lastName, Date birthDate, String email, String password,
            byte[] image, AccountEntity account, LocationEntity location, StoreEntity store) {
        super();
        this.userId = userId;
        this.firstName = firstName;
        this.lastName = lastName;
        this.birthDate = birthDate;
        this.email = email;
        this.password = password;
        this.isDeleted = false;
        this.image = image;
        this.account = account;
        this.location = location;
        this.store = store;
    }

    // getters and setters
    public int getUserId() {
        return userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public Date getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(Date birthDate) {
        this.birthDate = birthDate;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public byte[] getImage() {
        return image;
    }

    public void setImage(byte[] image) {
        this.image = image;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public AccountEntity getAccount() {
        return this.account;
    }
    
    public void setAccount(AccountEntity account) {
        this.account = account;
    }
    
    public LocationEntity getLocation() {
        return this.location;
    }
    
    public void setLocation(LocationEntity location) {
        this.location = location;
    }

    public StoreEntity getStore() {
        return this.store;
    }
    
    public void setStore(StoreEntity store) {
        this.store = store;
    }
}
```
AccountRepository.java
```
package com.nearbyvendor.palit.repository;

import com.nearbyvendor.palit.entity.AccountEntity;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface AccountRepository extends JpaRepository<AccountEntity, Integer> {

  AccountEntity findByAccountIdAndIsDeletedFalse(int accountId);

  List<AccountEntity> findByIsDeletedFalse();
  
}
```
ChatRepository.java
```
package com.nearbyvendor.palit.repository;

import com.nearbyvendor.palit.entity.ChatEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface ChatRepository extends JpaRepository<ChatEntity, Integer> {

    // Find all chats by conversation id
    List<ChatEntity> findByConversationId(int conversationId);

    List<ChatEntity> findByConversationIdAndIsDeletedFalse(int conversationId);

    Optional<ChatEntity> findByChatIdAndIsDeletedFalse(int chatId);
}
```
ConversationRepository.java
```
package com.nearbyvendor.palit.repository;

import com.nearbyvendor.palit.entity.ConversationEntity;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ConversationRepository extends JpaRepository<ConversationEntity, Integer> {

  List<ConversationEntity> findByIsDeletedFalse();

  Optional<ConversationEntity> findByConversationIdAndIsDeletedFalse(int conversationId);
}
```
LocationRepository.java
```
package com.nearbyvendor.palit.repository;

import com.nearbyvendor.palit.entity.LocationEntity;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface LocationRepository extends JpaRepository<LocationEntity, Integer> {

  List<LocationEntity> findByIsDeletedFalse();

  LocationEntity findByLocationIdAndIsDeletedFalse(int locationId);
}
```
ProductServiceRepository.java
```
package com.nearbyvendor.palit.repository;

import com.nearbyvendor.palit.entity.ProductServiceEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface ProductServiceRepository extends JpaRepository<ProductServiceEntity, Integer> {

    // Find product services by store id
    List<ProductServiceEntity> findByStoreId(int storeId);

    Optional<ProductServiceEntity> findByProductIdAndIsDeletedFalse(int productId);

    List<ProductServiceEntity> findByStoreIdAndIsDeletedFalse(int storeId);

    List<ProductServiceEntity> findByIsDeletedFalse();
}
```
ReportRepository.java
```
package com.nearbyvendor.palit.repository;

import com.nearbyvendor.palit.entity.ReportEntity;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ReportRepository extends JpaRepository<ReportEntity, Integer> {

  List<ReportEntity> findAllByIsDeletedFalse();
    // You can add custom methods here if needed

  ReportEntity findByReportIdAndIsDeletedFalse(int reportId);
}
```
StoreRepository.java
```
package com.nearbyvendor.palit.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.nearbyvendor.palit.entity.StoreEntity;

@Repository
public interface StoreRepository extends JpaRepository<StoreEntity, Integer> {

  StoreEntity findByStoreIdAndIsDeletedFalse(int storeId);

  List<StoreEntity> findAllByIsDeletedFalse();

}
```
TransactionRepository.java
```
package com.nearbyvendor.palit.repository;

import com.nearbyvendor.palit.entity.TransactionEntity;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface TransactionRepository extends JpaRepository<TransactionEntity, Integer> {

  List<TransactionEntity> findAllByIsDeletedFalse();
    // You can add custom methods here if needed

  TransactionEntity findByTransactionIdAndIsDeletedFalse(int transactionId);
}
```
UserRepository.java
```
package com.nearbyvendor.palit.repository;

import com.nearbyvendor.palit.entity.AccountEntity;
import com.nearbyvendor.palit.entity.LocationEntity;
import com.nearbyvendor.palit.entity.StoreEntity;
import com.nearbyvendor.palit.entity.UserEntity;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UserRepository extends JpaRepository<UserEntity, Integer> {

  List<UserEntity> findByIsDeletedFalse();

  UserEntity findByUserIdAndIsDeletedFalse(int userId);
    
  AccountEntity findByAccountAccountIdAndIsDeletedFalse(int accountId);

  LocationEntity  findByLocationLocationIdAndIsDeletedFalse(int locationId);

  StoreEntity findByStoreStoreIdAndIsDeletedFalse(int storeId);
}
```
AccountService.java
```
package com.nearbyvendor.palit.service;

import com.nearbyvendor.palit.entity.AccountEntity;
import com.nearbyvendor.palit.repository.AccountRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class AccountService {

    @Autowired
    private AccountRepository accountRepository;

    public List<AccountEntity> getAllAccounts() {
        return accountRepository.findByIsDeletedFalse();
    }

    public AccountEntity getAccountById(int accountId) {
        AccountEntity account = accountRepository.findByAccountIdAndIsDeletedFalse(accountId);
        if (account == null) {
            // Log an error message for debugging
            System.err.println("Account not found with ID: " + accountId);
        }
        return account;
    }

    public AccountEntity createAccount(AccountEntity account) {
        return accountRepository.save(account);
    }

    public AccountEntity editAccountById(int accountId, AccountEntity account) {
        AccountEntity existingAccount = accountRepository.findByAccountIdAndIsDeletedFalse(accountId);
        if (existingAccount != null) {
            account.setId(accountId);
            return accountRepository.save(account);
        } else {
            // Log an error message for debugging
            System.err.println("Invalid account ID for editing: " + accountId);
            throw new IllegalArgumentException("Invalid account ID");
        }
    }

    public boolean deleteAccountById(int accountId) {
        AccountEntity existingAccount = accountRepository.findByAccountIdAndIsDeletedFalse(accountId);
        if (existingAccount != null) {
            existingAccount.setIsDeleted(true);
            accountRepository.save(existingAccount);
            return true; // Deletion was successful
        } else {
            // Log an error message for debugging
            System.err.println("Invalid account ID for deletion: " + accountId);
            return false; // Deletion was not successful
        }
    }
}
```
ChatService.java
```
package com.nearbyvendor.palit.service;

import com.nearbyvendor.palit.entity.ChatEntity;
import com.nearbyvendor.palit.repository.ChatRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class ChatService {

    @Autowired
    private ChatRepository chatRepository;

    public List<ChatEntity> getChatsByConversationId(int conversationId) {
        return chatRepository.findByConversationIdAndIsDeletedFalse(conversationId);
    }

    public ChatEntity createChat(ChatEntity chat) {
        return chatRepository.save(chat);
    }

    public ChatEntity updateChatById(int chatId, ChatEntity chat) {
        Optional<ChatEntity> chatOptional = chatRepository.findByChatIdAndIsDeletedFalse(chatId);
        if (chatOptional.isPresent()) {
            ChatEntity existingChat = chatOptional.get();
            existingChat.setSenderId(chat.getSenderId());
            existingChat.setReceiverId(chat.getReceiverId());
            existingChat.setMessageContent(chat.getMessageContent());
            existingChat.setTimestamp(chat.getTimestamp());
            existingChat.setConversationId(chat.getConversationId());
            return chatRepository.save(existingChat);
        } else {
            // Log an error message for debugging
            System.err.println("ChatEntity not found with id: " + chatId);
            throw new RuntimeException("ChatEntity not found with id: " + chatId);
        }
    }

    public boolean deleteChatById(int chatId) {
        Optional<ChatEntity> chatOptional = chatRepository.findByChatIdAndIsDeletedFalse(chatId);
        if (chatOptional.isPresent()) {
            ChatEntity chat = chatOptional.get();
            chat.setIsDeleted(true);
            chatRepository.save(chat);
            return true; // Deletion was successful
        } else {
            // Log an error message for debugging
            System.err.println("ChatEntity not found with id: " + chatId);
            throw new RuntimeException("ChatEntity not found with id: " + chatId);
        }
    }    
}
```
ConversationService.java
```
package com.nearbyvendor.palit.service;

import com.nearbyvendor.palit.entity.ConversationEntity;
import com.nearbyvendor.palit.repository.ConversationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class ConversationService {

    @Autowired
    private ConversationRepository conversationRepository;

    // Get all conversations where isDeleted is false
    public List<ConversationEntity> getAllConversations() {
        return conversationRepository.findByIsDeletedFalse();
    }

    // Get a conversation by id where isDeleted is false
    public ConversationEntity getConversationById(int id) {
        Optional<ConversationEntity> conversation = conversationRepository.findByConversationIdAndIsDeletedFalse(id);
        if (conversation.isPresent()) {
            return conversation.get();
        } else {
            // Log an error message for debugging
            System.err.println("ConversationEntity not found with id: " + id);
            throw new RuntimeException("ConversationEntity not found with id: " + id);
        }
    }

    // Create a new conversation
    public ConversationEntity createConversation(ConversationEntity conversation) {
        return conversationRepository.save(conversation);
    }

    // Update an existing conversation by id where isDeleted is false
    public ConversationEntity updateConversationById(int id, ConversationEntity conversation) {
        Optional<ConversationEntity> existingConversation = conversationRepository.findByConversationIdAndIsDeletedFalse(id);
        if (existingConversation.isPresent()) {
            existingConversation.get().setSenderId(conversation.getSenderId());
            existingConversation.get().setReceiverId(conversation.getReceiverId());
            return conversationRepository.save(existingConversation.get());
        } else {
            // Log an error message for debugging
            System.err.println("ConversationEntity not found with id: " + id);
            throw new RuntimeException("ConversationEntity not found with id: " + id);
        }
    }

    // Delete a conversation by id by setting isDeleted to true
    public boolean deleteConversationById(int id) {
        Optional<ConversationEntity> conversation = conversationRepository.findByConversationIdAndIsDeletedFalse(id);
        if (conversation.isPresent()) {
            conversation.get().setIsDeleted(true);
            conversationRepository.save(conversation.get());
            return true; // Deletion was successful
        } else {
            // Log an error message for debugging
            System.err.println("ConversationEntity not found with id: " + id);
            throw new RuntimeException("ConversationEntity not found with id: " + id);
        }
    }
}
```
LocationService.java
```
package com.nearbyvendor.palit.service;

import com.nearbyvendor.palit.entity.LocationEntity;
import com.nearbyvendor.palit.repository.LocationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class LocationService {

    @Autowired
    private LocationRepository locationRepository;

    // Get all locations where isDeleted is false
    public List<LocationEntity> getAllLocations() {
        return locationRepository.findByIsDeletedFalse();
    }

    // Get location by id where isDeleted is false
    public LocationEntity getLocationById(int id) {
        LocationEntity location = locationRepository.findByLocationIdAndIsDeletedFalse(id);
        if (location != null) {
            return location;
        } else {
            // Log an error message for debugging
            System.err.println("LocationEntity not found with id: " + id);
            throw new RuntimeException("LocationEntity not found with id: " + id);
        }
    }

    // Create location
    public LocationEntity createLocation(LocationEntity location) {
        return locationRepository.save(location);
    }

    // Update location by id where isDeleted is false
    public LocationEntity updateLocationById(int id, LocationEntity location) {
        LocationEntity existingLocation = locationRepository.findByLocationIdAndIsDeletedFalse(id);
        if (existingLocation != null) {
            existingLocation.setLatitude(location.getLatitude());
            existingLocation.setLongitude(location.getLongitude());
            return locationRepository.save(existingLocation);
        } else {
            // Log an error message for debugging
            System.err.println("LocationEntity not found with id: " + id);
            throw new RuntimeException("LocationEntity not found with id: " + id);
        }
    }

    // Delete location by id
    public boolean deleteLocationById(int id) {
        LocationEntity location = locationRepository.findByLocationIdAndIsDeletedFalse(id);
        if (location != null) {
            location.setIsDeleted(true);
            locationRepository.save(location);
            return true; // Deletion was successful
        } else {
            // Log an error message for debugging
            System.err.println("LocationEntity not found with id: " + id);
            throw new RuntimeException("LocationEntity not found with id: " + id);
        }
    }
}
```
ProductServiceService.java
```
package com.nearbyvendor.palit.service;

import com.nearbyvendor.palit.entity.ProductServiceEntity;
import com.nearbyvendor.palit.repository.ProductServiceRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class ProductServiceService {

    @Autowired
    private ProductServiceRepository productServiceRepository;

    // Get all product services where isDeleted is false
    public List<ProductServiceEntity> getAllProductServices() {
        return productServiceRepository.findByIsDeletedFalse();
    }

    // Get product service by id where isDeleted is false
    public ProductServiceEntity getProductServiceById(int id) {
        Optional<ProductServiceEntity> productService = productServiceRepository.findByProductIdAndIsDeletedFalse(id);
        if (productService.isPresent()) {
            return productService.get();
        } else {
            // Log an error message for debugging
            System.err.println("Product service not found with id: " + id);
            throw new RuntimeException("Product service not found with id: " + id);
        }
    }

    // Get product services by store id where isDeleted is false
    public List<ProductServiceEntity> getProductServicesByStoreId(int storeId) {
        return productServiceRepository.findByStoreIdAndIsDeletedFalse(storeId);
    }

    // Create product service
    public ProductServiceEntity createProductService(ProductServiceEntity productService) {
        return productServiceRepository.save(productService);
    }

    // Update product service
    public ProductServiceEntity updateProductServiceById(int id, ProductServiceEntity productService) {
        Optional<ProductServiceEntity> existingProductService = productServiceRepository.findByProductIdAndIsDeletedFalse(id);
        if (existingProductService.isPresent()) {
            existingProductService.get().setName(productService.getName());
            existingProductService.get().setDescription(productService.getDescription());
            existingProductService.get().setPrice(productService.getPrice());
            existingProductService.get().setStoreId(productService.getStoreId());
            existingProductService.get().setImagePath(productService.getImagePath());
            return productServiceRepository.save(existingProductService.get());
        } else {
            // Log an error message for debugging
            System.err.println("Product service not found with id: " + id);
            throw new RuntimeException("Product service not found with id: " + id);
        }
    }

    // Delete product service by setting isDeleted to true
    public boolean deleteProductServiceById(int id) {
        Optional<ProductServiceEntity> existingProductService = productServiceRepository.findByProductIdAndIsDeletedFalse(id);
        if (existingProductService.isPresent()) {
            existingProductService.get().setIsDeleted(true);
            productServiceRepository.save(existingProductService.get());
            return true; // Deletion was successful
        } else {
            // Log an error message for debugging
            System.err.println("Product service not found with id: " + id);
            throw new RuntimeException("Product service not found with id: " + id);
        }
    }
}
```
ReportService.java
```
package com.nearbyvendor.palit.service;

import com.nearbyvendor.palit.entity.ReportEntity;
import com.nearbyvendor.palit.repository.ReportRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ReportService {

    @Autowired
    private ReportRepository reportRepository;

    public List<ReportEntity> getAllReports() {
        return reportRepository.findAllByIsDeletedFalse();
    }

    public ReportEntity getReportById(int id) {
        ReportEntity report = reportRepository.findByReportIdAndIsDeletedFalse(id);
        if (report != null) {
            return report;
        } else {
            // Log an error message for debugging
            System.err.println("ReportEntity not found with id: " + id);
            throw new RuntimeException("ReportEntity not found with id: " + id);
        }
    }

    public ReportEntity createReport(ReportEntity report) {
        return reportRepository.save(report);
    }

    public ReportEntity updateReportById(int id, ReportEntity report) {
        ReportEntity existingReport = reportRepository.findByReportIdAndIsDeletedFalse(id);
        if (existingReport != null) {
            report.setId(id);
            return reportRepository.save(report);
        } else {
            // Log an error message for debugging
            System.err.println("Invalid report ID for updating: " + id);
            throw new IllegalArgumentException("Invalid report ID");
        }
    }

    public boolean deleteReportById(int id) {
        ReportEntity existingReport = reportRepository.findByReportIdAndIsDeletedFalse(id);
        if (existingReport != null) {
            existingReport.setIsDeleted(true);
            reportRepository.save(existingReport);
            return true; // Deletion was successful
        } else {
            // Log an error message for debugging
            System.err.println("Invalid report ID for deletion: " + id);
            throw new IllegalArgumentException("Invalid report ID");
        }
    }
}
```
StoreService.java
```
package com.nearbyvendor.palit.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.nearbyvendor.palit.entity.StoreEntity;
import com.nearbyvendor.palit.repository.StoreRepository;

@Service
public class StoreService {
    
    @Autowired
    private StoreRepository storeRepository;
    
    public List<StoreEntity> getAllStores() {
        return storeRepository.findAllByIsDeletedFalse();
    }
    
    public StoreEntity getStoreById(int storeId) {
        StoreEntity store = storeRepository.findByStoreIdAndIsDeletedFalse(storeId);
        if (store != null) {
            return store;
        } else {
            // Log an error message for debugging
            System.err.println("StoreEntity not found with id: " + storeId);
            throw new RuntimeException("StoreEntity not found with id: " + storeId);
        }
    }
    
    public StoreEntity createStore(StoreEntity store) {
        return storeRepository.save(store);
    }
    
    public StoreEntity updateStoreById(int storeId, StoreEntity store) {
        StoreEntity existingStore = storeRepository.findByStoreIdAndIsDeletedFalse(storeId);
        if (existingStore != null) {
            store.setId(storeId);
            return storeRepository.save(store);
        } else {
            // Log an error message for debugging
            System.err.println("Invalid store ID for updating: " + storeId);
            throw new IllegalArgumentException("Invalid store ID");
        }
    }

    public boolean deleteStoreById(int storeId) {
        StoreEntity existingStore = storeRepository.findByStoreIdAndIsDeletedFalse(storeId);
        if (existingStore != null) {
            existingStore.setIsDeleted(true);
            storeRepository.save(existingStore);
            return true; // Deletion was successful
        } else {
            // Log an error message for debugging
            System.err.println("Invalid store ID for deletion: " + storeId);
            throw new IllegalArgumentException("Invalid store ID");
        }
    }
}
```
TransactionService.java
```
package com.nearbyvendor.palit.service;

import com.nearbyvendor.palit.entity.TransactionEntity;
import com.nearbyvendor.palit.repository.TransactionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TransactionService {

    @Autowired
    private TransactionRepository transactionRepository;

    public List<TransactionEntity> getAllTransactions() {
        return transactionRepository.findAllByIsDeletedFalse();
    }

    public TransactionEntity getTransactionById(int id) {
        TransactionEntity transaction = transactionRepository.findByTransactionIdAndIsDeletedFalse(id);
        if (transaction != null) {
            return transaction;
        } else {
            // Log an error message for debugging
            System.err.println("TransactionEntity not found with id: " + id);
            throw new RuntimeException("TransactionEntity not found with id: " + id);
        }
    }

    public TransactionEntity createTransaction(TransactionEntity transaction) {
        transaction.setIsDeleted(false);
        return transactionRepository.save(transaction);
    }

    public TransactionEntity updateTransactionById(int id, TransactionEntity transaction) {
        TransactionEntity existingTransaction = transactionRepository.findByTransactionIdAndIsDeletedFalse(id);
        if (existingTransaction != null) {
            transaction.setId(existingTransaction.getId());
            transaction.setIsDeleted(false);
            return transactionRepository.save(transaction);
        } else {
            // Log an error message for debugging
            System.err.println("Invalid transaction ID for updating: " + id);
            throw new IllegalArgumentException("Invalid transaction ID");
        }
    }

    public boolean deleteTransactionById(int id) {
        TransactionEntity existingTransaction = transactionRepository.findByTransactionIdAndIsDeletedFalse(id);
        if (existingTransaction != null) {
            existingTransaction.setIsDeleted(true);
            transactionRepository.save(existingTransaction);
            return true; // Deletion was successful
        } else {
            // Log an error message for debugging
            System.err.println("Invalid transaction ID for deletion: " + id);
            throw new IllegalArgumentException("Invalid transaction ID");
        }
    }
}
```
UserService.java
```
package com.nearbyvendor.palit.service;

import com.nearbyvendor.palit.entity.AccountEntity;
import com.nearbyvendor.palit.entity.UserEntity;
import com.nearbyvendor.palit.repository.AccountRepository;
import com.nearbyvendor.palit.repository.LocationRepository;
import com.nearbyvendor.palit.repository.StoreRepository;
import com.nearbyvendor.palit.repository.UserRepository;
import com.nearbyvendor.palit.entity.LocationEntity;
import com.nearbyvendor.palit.entity.StoreEntity;

import org.springframework.web.multipart.MultipartFile;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Optional;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;
    @Autowired
    private AccountRepository accountRepository;
    @Autowired
    private LocationRepository locationRepository;
    @Autowired
    private StoreRepository storeRepository;

    public List<UserEntity> getAllUsers() {
        return userRepository.findByIsDeletedFalse();
    }

    public UserEntity getUserById(int id) {
        UserEntity user = userRepository.findByUserIdAndIsDeletedFalse(id);
        if (user != null) {
            return user;
        } else {
            // Log an error message for debugging
            System.err.println("UserEntity not found with id: " + id);
            throw new RuntimeException("UserEntity not found with id: " + id);
        }
    }

    public UserEntity createUser(MultipartFile image, String firstName, String lastName, String birthDate, String email,
            String password, int accountId, int locationId, String storeId)
            throws IOException, ParseException {
        UserEntity newUserEntity = new UserEntity();
        newUserEntity.setImage(image.getBytes());
        newUserEntity.setFirstName(firstName);
        newUserEntity.setLastName(lastName);
        // Convert the birthDate string to java.sql.Date
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        java.util.Date parsedDate = dateFormat.parse(birthDate);
        java.sql.Date sqlDate = new java.sql.Date(parsedDate.getTime());
        newUserEntity.setBirthDate(sqlDate);
        newUserEntity.setEmail(email);
        newUserEntity.setPassword(password);
        AccountEntity account = accountRepository.findByAccountIdAndIsDeletedFalse(accountId);
        newUserEntity.setAccount(account);
        LocationEntity location = locationRepository.findByLocationIdAndIsDeletedFalse(locationId);
        newUserEntity.setLocation(location);
        if (storeId.equals("null")) {
            newUserEntity.setStore(null);
        } else {
            int storeIdInt = Integer.parseInt(storeId);
            StoreEntity store = storeRepository.findByStoreIdAndIsDeletedFalse(storeIdInt);
            newUserEntity.setStore(store);
        }
        // Save the updated user in the repository
        return userRepository.save(newUserEntity);
    }

    public UserEntity updateUserById(int id, MultipartFile image, String firstName, String lastName, String birthDate,
            String email, String password, int accountId, int locationId, String storeId)
            throws IOException, ParseException {
        Optional<UserEntity> user = userRepository.findById(id);
        if (user.isPresent()) {
            UserEntity existingUser = user.get();
            existingUser.setImage(image.getBytes());
            existingUser.setFirstName(firstName);
            existingUser.setLastName(lastName);
            // Convert the birthDate string to java.sql.Date
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date parsedDate = dateFormat.parse(birthDate);
            java.sql.Date sqlDate = new java.sql.Date(parsedDate.getTime());
            existingUser.setBirthDate(sqlDate);
            existingUser.setEmail(email);
            existingUser.setPassword(password);
            AccountEntity account = accountRepository.findByAccountIdAndIsDeletedFalse(accountId);
            existingUser.setAccount(account);
            LocationEntity location = locationRepository.findByLocationIdAndIsDeletedFalse(locationId);
            existingUser.setLocation(location);
            if (storeId.equals("null")) {
                existingUser.setStore(null);
            } else {
                int storeIdInt = Integer.parseInt(storeId);
                StoreEntity store = storeRepository.findByStoreIdAndIsDeletedFalse(storeIdInt);
                existingUser.setStore(store);
            }
            // Save the updated user in the repository
            return userRepository.save(existingUser);
        } else {
            // Log an error message for debugging
            System.err.println("Invalid user ID for updating: " + id);
            throw new IllegalArgumentException("Invalid user ID");
        }
    }

    public boolean deleteUserById(int id) {
        UserEntity user = userRepository.findByUserIdAndIsDeletedFalse(id);
        if (user != null) {
            user.setIsDeleted(true);
            userRepository.save(user);
            return true; // Deletion was successful
        } else {
            // Log an error message for debugging
            System.err.println("Invalid user ID for deletion: " + id);
            throw new IllegalArgumentException("Invalid user ID");
        }
    }

    // Create a method to check if an email already exists
    public boolean checkEmail(UserEntity userData) {
        // Get the list of users from the previous method
        List<UserEntity> users = getAllUsers();
        // Loop through the users and compare the email with the userData
        for (UserEntity user : users) {
            if (user.getEmail().equals(userData.getEmail())) {
                // If the email already exists, return a message
                return true;
            }
        }
        // If the email does not exist, return a success message
        return false;
    }

    // define the get account entity by account id method
    public AccountEntity getAccountByAccountId(int accountId) {
        // use the account repository to find the account entity by user id
        AccountEntity accountEntity = userRepository.findByAccountAccountIdAndIsDeletedFalse(accountId);
        // return the account entity or null if not found
        return accountEntity;
    }

    // define get location entity by location id method
    public LocationEntity getLocationByLocationId(int locationId) {
        // use the user repository to find the location entity by location id
        LocationEntity locationEntity = userRepository.findByLocationLocationIdAndIsDeletedFalse(locationId);
        // return the location entity or null if not found
        return locationEntity;
    }

    // define get store entity by store id method
    public StoreEntity getStoreByStoreId(int storeId) {
        // use the user repository to find the store entity by store id
        StoreEntity storeEntity = userRepository.findByStoreStoreIdAndIsDeletedFalse(storeId);
        // return the store entity or null if not found
        return storeEntity;
    }
}
```
PalitApplicationTests.java
```
package com.nearbyvendor.palit;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class PalitApplicationTests {

	@Test
	void contextLoads() {
	}

}
```
