write a message for john saying hi with "John: " while revise this sign in page to use the apis below.
import React, { useState, useEffect } from "react";
import { Link, useHistory } from "react-router-dom";
import axios from "axios";

import logo from "../assets/images/logo.png";
import CustomInput from "../components/CustomInput";
import CustomButton from "../components/CustomButton";

const Signin = () => {
  const history = useHistory();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [userData, setUserData] = useState([]);
  const [loading, setLoading] = useState(true);

  const handleEmailChange = (e) => {
    setEmail(e.target.value);
  };

  const handlePasswordChange = (e) => {
    setPassword(e.target.value);
  };

  const fetchUserData = () => {
    axios
      .get("http://localhost:3002/users")
      .then((response) => {
        setUserData(response.data);
        setLoading(false);
      })
      .catch((error) => {
        alert("Error fetching data:", error);
        setLoading(false);
      });
  };

  useEffect(() => {
    fetchUserData();
  }, []);

  const handleLogin = (e) => {
    e.preventDefault();

    const user = userData.find(
      (user) => user.email === email && user.password === password
    );

    if (user) {
      console.log("Current user: ", user);
      history.push("/home");
    } else {
      setError("Invalid email or password");
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
      <div className="w-full h-screen bg-stroke-bg bg-center bg-no-repeat bg-cover font-custom ">
        <div className="w-[500px] m-auto">
          <div className="w-full flex items-center justify-center">
            <img src={logo} alt="Palit logo" className="w-[250px] h-[102px] mt-40" />
          </div>
          <h2 className="text-2xl font-bold text-grayy mt-8">Welcome!</h2>
          <p className="text-slate-500 mb-10">Log in to continue</p>

          <form onSubmit={handleLogin}>
            <div className="mt-4">
              <label>Email address</label>
              <CustomInput
                type="email"
                name="email"
                placeholder="yourname@gmail.com"
                value={email}
                onChange={handleEmailChange}
              />
            </div>
            <div className="mt-4">
              <label>Password</label>
              <CustomInput
                type="password"
                name="password"
                value={password}
                onChange={handlePasswordChange}
              />
            </div>
            <CustomButton
              btnStyle="w-full bg-primary p-3 text-white rounded-[20px] mt-10"
              label="Log In"
              type="submit"
            />
            {error && <div className="text-red-500 mt-2">{error}</div>}
          </form>
          <Link to="signup">
            <div className="text-center mt-4 pb-6">
              Don't have an account?
              <span className="text-primary underline cursor-pointer">
                {" "}
                Sign up
              </span>
            </div>
          </Link>
        </div>
      </div>
  );
};

export default Signin;
------------------------------------


package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.AccountEntity;
import com.nearbyvendor.palit.service.AccountService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
public class AccountController {

    @Autowired
    private AccountService accountService;

    @GetMapping("/accounts")
    public List<AccountEntity> getAllAccounts() {
        return accountService.getAllAccounts();
    }

    @GetMapping("/accounts/{id}")
    public AccountEntity getAccountById(@PathVariable int id) {
        return accountService.getAccountById(id);
    }

    @PostMapping("/accounts")
    public AccountEntity saveAccount(@RequestBody AccountEntity account) {
        return accountService.saveAccount(account);
    }

    @DeleteMapping("/accounts/{id}")
    public void deleteAccountById(@PathVariable int id) {
        accountService.deleteAccountById(id);
    }
}
---------------------------
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.Chat;
import com.nearbyvendor.palit.service.ChatService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/chat")
public class ChatController {

    @Autowired
    private ChatService chatService;

    // Get all chats by conversation id
    @GetMapping("/{conversationId}")
    public ResponseEntity<List<Chat>> getChatsByConversationId(@PathVariable int conversationId) {
        List<Chat> chats = chatService.getChatsByConversationId(conversationId);
        return new ResponseEntity<>(chats, HttpStatus.OK);
    }

    // Create a new chat
    @PostMapping
    public ResponseEntity<Chat> createChat(@RequestBody Chat chat) {
        Chat newChat = chatService.createChat(chat);
        return new ResponseEntity<>(newChat, HttpStatus.CREATED);
    }

    // Update an existing chat
    @PutMapping("/{chatId}")
    public ResponseEntity<Chat> updateChat(@PathVariable int chatId, @RequestBody Chat chat) {
        Chat updatedChat = chatService.updateChat(chatId, chat);
        return new ResponseEntity<>(updatedChat, HttpStatus.OK);
    }

    // Delete an existing chat
    @DeleteMapping("/{chatId}")
    public ResponseEntity<Void> deleteChat(@PathVariable int chatId) {
        chatService.deleteChat(chatId);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}
-------------------------
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.Conversation;
import com.nearbyvendor.palit.service.ConversationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/conversations")
public class ConversationController {

    @Autowired
    private ConversationService conversationService;

    // Get all conversations
    @GetMapping
    public ResponseEntity<List<Conversation>> getAllConversations() {
        List<Conversation> conversations = conversationService.getAllConversations();
        return new ResponseEntity<>(conversations, HttpStatus.OK);
    }

    // Get a conversation by id
    @GetMapping("/{id}")
    public ResponseEntity<Conversation> getConversationById(@PathVariable("id") int id) {
        Conversation conversation = conversationService.getConversationById(id);
        return new ResponseEntity<>(conversation, HttpStatus.OK);
    }

    // Create a new conversation
    @PostMapping
    public ResponseEntity<Conversation> createConversation(@RequestBody Conversation conversation) {
        Conversation newConversation = conversationService.createConversation(conversation);
        return new ResponseEntity<>(newConversation, HttpStatus.CREATED);
    }

    // Update an existing conversation
    @PutMapping("/{id}")
    public ResponseEntity<Conversation> updateConversation(@PathVariable("id") int id, @RequestBody Conversation conversation) {
        Conversation updatedConversation = conversationService.updateConversation(id, conversation);
        return new ResponseEntity<>(updatedConversation, HttpStatus.OK);
    }

    // Delete a conversation by id
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteConversation(@PathVariable("id") int id) {
        conversationService.deleteConversation(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}
--------------------
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.Location;
import com.nearbyvendor.palit.service.LocationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/locations")
public class LocationController {

    @Autowired
    private LocationService locationService;

    // Get all locations
    @GetMapping
    public ResponseEntity<List<Location>> getAllLocations() {
        List<Location> locations = locationService.getAllLocations();
        return new ResponseEntity<>(locations, HttpStatus.OK);
    }

    // Get location by id
    @GetMapping("/{id}")
    public ResponseEntity<Location> getLocationById(@PathVariable("id") int id) {
        Location location = locationService.getLocationById(id);
        return new ResponseEntity<>(location, HttpStatus.OK);
    }

    // Create location
    @PostMapping
    public ResponseEntity<Location> createLocation(@RequestBody Location location) {
        Location newLocation = locationService.createLocation(location);
        return new ResponseEntity<>(newLocation, HttpStatus.CREATED);
    }

    // Update location
    @PutMapping("/{id}")
    public ResponseEntity<Location> updateLocation(@PathVariable("id") int id, @RequestBody Location location) {
        Location updatedLocation = locationService.updateLocation(id, location);
        return new ResponseEntity<>(updatedLocation, HttpStatus.OK);
    }

    // Delete location
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteLocation(@PathVariable("id") int id) {
        locationService.deleteLocation(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}
----------------------
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.ProductService;
import com.nearbyvendor.palit.service.ProductServiceService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/product-service")
public class ProductServiceController {

    @Autowired
    private ProductServiceService productServiceService;

    // Get all product services
    @GetMapping
    public ResponseEntity<List<ProductService>> getAllProductServices() {
        List<ProductService> productServices = productServiceService.getAllProductServices();
        return new ResponseEntity<>(productServices, HttpStatus.OK);
    }

    // Get product service by id
    @GetMapping("/{id}")
    public ResponseEntity<ProductService> getProductServiceById(@PathVariable int id) {
        ProductService productService = productServiceService.getProductServiceById(id);
        return new ResponseEntity<>(productService, HttpStatus.OK);
    }

    // Get product services by store id
    @GetMapping("/store/{storeId}")
    public ResponseEntity<List<ProductService>> getProductServicesByStoreId(@PathVariable int storeId) {
        List<ProductService> productServices = productServiceService.getProductServicesByStoreId(storeId);
        return new ResponseEntity<>(productServices, HttpStatus.OK);
    }

    // Create product service
    @PostMapping
    public ResponseEntity<ProductService> createProductService(@RequestBody ProductService productService) {
        ProductService newProductService = productServiceService.createProductService(productService);
        return new ResponseEntity<>(newProductService, HttpStatus.CREATED);
    }

    // Update product service
    @PutMapping("/{id}")
    public ResponseEntity<ProductService> updateProductService(@PathVariable int id, @RequestBody ProductService productService) {
        ProductService updatedProductService = productServiceService.updateProductService(id, productService);
        return new ResponseEntity<>(updatedProductService, HttpStatus.OK);
    }

    // Delete product service
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteProductService(@PathVariable int id) {
        productServiceService.deleteProductService(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}
----------------------
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.Report;
import com.nearbyvendor.palit.service.ReportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/reports")
public class ReportController {

    @Autowired
    private ReportService reportService;

    @GetMapping
    public ResponseEntity<List<Report>> getAllReports() {
        return new ResponseEntity<>(reportService.getAllReports(), HttpStatus.OK);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Report> getReportById(@PathVariable int id) {
        return new ResponseEntity<>(reportService.getReportById(id), HttpStatus.OK);
    }

    @PostMapping
    public ResponseEntity<Report> createReport(@RequestBody Report report) {
        return new ResponseEntity<>(reportService.createReport(report), HttpStatus.CREATED);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Report> updateReport(@PathVariable int id, @RequestBody Report report) {
        return new ResponseEntity<>(reportService.updateReport(id, report), HttpStatus.OK);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteReport(@PathVariable int id) {
        reportService.deleteReport(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}
-----------------------------
package com.nearbyvendor.palit.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.nearbyvendor.palit.entity.Store;
import com.nearbyvendor.palit.service.StoreService;

@RestController
public class StoreController {
    
    @Autowired
    private StoreService storeService;
    
    @GetMapping("/stores")
    public ResponseEntity<List<Store>> getAllStores() {
        List<Store> stores = storeService.getAllStores();
        return new ResponseEntity<>(stores, HttpStatus.OK);
    }
    
    @GetMapping("/stores/{id}")
    public ResponseEntity<Store> getStoreById(@PathVariable("id") int id) {
        Store store = storeService.getStoreById(id);
        return new ResponseEntity<>(store, HttpStatus.OK);
    }
    
    @PostMapping("/stores")
    public ResponseEntity<Store> createStore(@RequestBody Store store) {
        Store newStore = storeService.createStore(store);
        return new ResponseEntity<>(newStore, HttpStatus.CREATED);
    }
    
}
--------------------------
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.Transaction;
import com.nearbyvendor.palit.service.TransactionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/transactions")
public class TransactionController {

    @Autowired
    private TransactionService transactionService;

    // Get all transactions
    @GetMapping
    public ResponseEntity<List<Transaction>> getAllTransactions() {
        List<Transaction> transactions = transactionService.getAllTransactions();
        return new ResponseEntity<>(transactions, HttpStatus.OK);
    }

    // Get a transaction by customer and vendor ids
    @GetMapping("/{customer_id}/{vendor_id}")
    public ResponseEntity<Transaction> getTransactionById(@PathVariable("customer_id") int customerId, @PathVariable("vendor_id") int vendorId) {
        Transaction transaction = transactionService.getTransactionById(customerId, vendorId);
        return new ResponseEntity<>(transaction, HttpStatus.OK);
    }

    // Create a new transaction
    @PostMapping
    public ResponseEntity<Transaction> createTransaction(@RequestBody Transaction transaction) {
        Transaction newTransaction = transactionService.createTransaction(transaction);
        return new ResponseEntity<>(newTransaction, HttpStatus.CREATED);
    }

    // Update an existing transaction
    @PutMapping("/{customer_id}/{vendor_id}")
    public ResponseEntity<Transaction> updateTransaction(@PathVariable("customer_id") int customerId, @PathVariable("vendor_id") int vendorId, @RequestBody Transaction transaction) {
        Transaction updatedTransaction = transactionService.updateTransaction(customerId, vendorId, transaction);
        return new ResponseEntity<>(updatedTransaction, HttpStatus.OK);
    }

    // Delete an existing transaction
    @DeleteMapping("/{customer_id}/{vendor_id}")
    public ResponseEntity<Void> deleteTransaction(@PathVariable("customer_id") int customerId, @PathVariable("vendor_id") int vendorId) {
        transactionService.deleteTransaction(customerId, vendorId);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}
---------------------------
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.UserEntity;
import com.nearbyvendor.palit.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
public class UserController {

    @Autowired
    private UserService userService;

    @GetMapping("/users")
    public List<UserEntity> getAllUsers() {
        return userService.getAllUsers();
    }

    @GetMapping("/users/{id}")
    public UserEntity getUserById(@PathVariable int id) {
        return userService.getUserById(id);
    }

    @PostMapping("/users")
    public UserEntity saveUser(@RequestBody UserEntity user) {
        return userService.saveUser(user);
    }

    @DeleteMapping("/users/{id}")
    public void deleteUserById(@PathVariable int id) {
        userService.deleteUserById(id);
    }
}
