d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\App.js:
```
import React from "react";
import { BrowserRouter, Route, Switch } from "react-router-dom";
import { UserProvider } from "./UserContext";

import Admin from "./Admin/Admin";
import "./App.css";
import Aboutus from "./pages/Aboutus";
import Contact from "./pages/Contact";
import Home from "./pages/Home";
import Landing from "./pages/Landing";
import Services from "./pages/Services";
import Signin from "./pages/Signin";
import Signup from "./pages/Signup";
import Chat from "./pages/Chat";
import Store from "./pages/Store";
import Report from "./pages/Report";

import AdminDashboard from "./components/AdminDashboard";
// import Dashboard from "./Admin/Dashboard";

function App() {
  return (
    <UserProvider>
      <BrowserRouter>
        <Switch>
          <Route path="/landing" exact component={Landing} />
          <Route path="/signup" exact component={Signup} />
          <Route path="/signin" exact component={Signin} />
          <Route path="/aboutus" exact component={Aboutus} />
          <Route path="/contactus" exact component={Contact} />
          <Route path="/services" exact component={Services} />
          <Route path="/store" exact component={Store} />
          <Route path="/report" exact component={Report} />
          <Route path="/home" exact component={Home} />
          <Route path="/chat" exact component={Chat} />

          <Route path="/adminlogin3x8Yz7!qA" exact component={Admin} />
          <Route
            path="/admindashboard/dashboard"
            exact
            component={AdminDashboard}
          />

          <Route
            path="/admindashboard/statistics"
            exact
            component={AdminDashboard}
          />

          <Route
            path="/admindashboard/reports"
            exact
            component={AdminDashboard}
          />
          <Route
            path="/admindashboard/users"
            exact
            component={AdminDashboard}
          />
          <Route
            path="/admindashboard/accounts"
            exact
            component={AdminDashboard}
          />
          <Route
            path="/admindashboard/stores"
            exact
            component={AdminDashboard}
          />
          <Route
            path="/admindashboard/transactions"
            exact
            component={AdminDashboard}
          />
          <Route
            path="/admindashboard/products"
            exact
            component={AdminDashboard}
          />

          <Route component={Landing} />
        </Switch>
      </BrowserRouter>
    </UserProvider>
  );
}

export default App;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\App.test.js:
```
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\index.js:
```
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

reportWebVitals();
```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\reportWebVitals.js:
```
const reportWebVitals = (onPerfEntry) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\service-worker.js:
```
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\serviceWorkerRegistration.js:
```
// This optional code is used to register a service worker.
// register() is not called by default.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on subsequent visits to a page, after all the
// existing tabs open on the page have been closed, since previously cached
// resources are updated in the background.

// To learn more about the benefits of this model and instructions on how to
// opt-in, read https://cra.link/PWA

const isLocalhost = Boolean(
  window.location.hostname === 'localhost' ||
    // [::1] is the IPv6 localhost address.
    window.location.hostname === '[::1]' ||
    // 127.0.0.0/8 are considered localhost for IPv4.
    window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)
);

export function register(config) {
  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
    // The URL constructor is available in all browsers that support SW.
    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);
    if (publicUrl.origin !== window.location.origin) {
      // Our service worker won't work if PUBLIC_URL is on a different origin
      // from what our page is served on. This might happen if a CDN is used to
      // serve assets; see https://github.com/facebook/create-react-app/issues/2374
      return;
    }

    window.addEventListener('load', () => {
      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;

      if (isLocalhost) {
        // This is running on localhost. Let's check if a service worker still exists or not.
        checkValidServiceWorker(swUrl, config);

        // Add some additional logging to localhost, pointing developers to the
        // service worker/PWA documentation.
        navigator.serviceWorker.ready.then(() => {
          console.log(
            'This web app is being served cache-first by a service ' +
              'worker. To learn more, visit https://cra.link/PWA'
          );
        });
      } else {
        // Is not localhost. Just register service worker
        registerValidSW(swUrl, config);
      }
    });
  }
}

function registerValidSW(swUrl, config) {
  navigator.serviceWorker
    .register(swUrl)
    .then((registration) => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing;
        if (installingWorker == null) {
          return;
        }
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              // At this point, the updated precached content has been fetched,
              // but the previous service worker will still serve the older
              // content until all client tabs are closed.
              console.log(
                'New content is available and will be used when all ' +
                  'tabs for this page are closed. See https://cra.link/PWA.'
              );

              // Execute callback
              if (config && config.onUpdate) {
                config.onUpdate(registration);
              }
            } else {
              // At this point, everything has been precached.
              // It's the perfect time to display a
              // "Content is cached for offline use." message.
              console.log('Content is cached for offline use.');

              // Execute callback
              if (config && config.onSuccess) {
                config.onSuccess(registration);
              }
            }
          }
        };
      };
    })
    .catch((error) => {
      console.error('Error during service worker registration:', error);
    });
}

function checkValidServiceWorker(swUrl, config) {
  // Check if the service worker can be found. If it can't reload the page.
  fetch(swUrl, {
    headers: { 'Service-Worker': 'script' },
  })
    .then((response) => {
      // Ensure service worker exists, and that we really are getting a JS file.
      const contentType = response.headers.get('content-type');
      if (
        response.status === 404 ||
        (contentType != null && contentType.indexOf('javascript') === -1)
      ) {
        // No service worker found. Probably a different app. Reload the page.
        navigator.serviceWorker.ready.then((registration) => {
          registration.unregister().then(() => {
            window.location.reload();
          });
        });
      } else {
        // Service worker found. Proceed as normal.
        registerValidSW(swUrl, config);
      }
    })
    .catch(() => {
      console.log('No internet connection found. App is running in offline mode.');
    });
}

export function unregister() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then((registration) => {
        registration.unregister();
      })
      .catch((error) => {
        console.error(error.message);
      });
  }
}

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\setupTests.js:
```
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\UserContext.js:
```
import React, { createContext, useState } from "react";
import axios from "axios";

export const UserContext = createContext();

const useLocalStorage = (key, initialValue) => {
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(error);
      return initialValue;
    }
  });

  const setValue = (value) => {
    try {
      window.localStorage.setItem(key, JSON.stringify(value));
      setStoredValue(value);
    } catch (error) {
      console.error(error);
    }
  };

  return [storedValue, setValue];
};

export const UserProvider = ({ children }) => {
  const [user, setUser] = useLocalStorage("user", null);

  return (
    <UserContext.Provider value={{ user, setUser }}>
      {children}
    </UserContext.Provider>
  );
};

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\Admin\AccountData.jsx:
```
import { Paper } from "@material-ui/core";
import axios from "axios";
import { useEffect, useState } from "react";

const AccountData = () => {
    const [accountData, setAccountData] = useState([]);

    useEffect(() => {
        axios.get('http://localhost:3009/account')
            .then(response => setAccountData(response.data))
            .catch(error => console.error('Error fetching account data:', error));
    }, []);

    return (
        <Paper elevation={3} className="p-5 border rounded-3xl font-custom">
            <div>
                <h1 className="text-2xl font-bold pb-6" >Accounts</h1>
                <table className="w-full">
                    <thead className="text-left border-b border-[#0071B3] text-slate-500">
                        <tr>
                            <th className="w-1/5 pb-2" >Account ID</th>
                            <th className="w-1/5 pb-2" >Is Vendor</th>
                            <th className="w-1/5 pb-2" >Is Admin</th>
                            <th className="w-1/5 pb-2" >User ID</th>
                            <th className="w-1/5 pb-2" >Username</th>
                            <th className="w-1/5 pb-2" >Email</th>
                        </tr>
                    </thead>
                    <tbody>
                        {accountData.map(account => (
                            <tr key={account.accountId}>
                                <td className="py-2">{account.accountId}</td>
                                <td className="py-2">{account.isVendor ? 'Yes' : 'No'}</td>
                                <td className="py-2">{account.isAdmin ? 'Yes' : 'No'}</td>
                                <td className="py-2">{account.user.userId}</td>
                                <td className="py-2">{account.user.username}</td>
                                <td className="py-2">{account.user.email}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </Paper>
    )
}

export default AccountData

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\Admin\Accounts.jsx:
```
import React from "react";
import AccountData from "./AccountData";

const Accounts = () => {
    return <div>
        <h1 className="text-3xl font-bold pb-6 mt-10">Accounts</h1>
        <div className="w-full"><AccountData /></div>
    </div>;
}

export default Accounts;
```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\Admin\Admin.jsx:
```
import axios from "axios";
import React, { useEffect, useState } from "react";
import { useHistory } from "react-router-dom";

import logo from "../assets/images/logo.png";
import CustomButton from "../components/CustomButton";
import CustomInput from "../components/CustomInput";


const Admin = () => {
  const history = useHistory();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [userData, setUserData] = useState([]);
  const [loading, setLoading] = useState(true);

  const handleEmailChange = (e) => {
    setEmail(e.target.value);
  };

  const handlePasswordChange = (e) => {
    setPassword(e.target.value);
  };

  const fetchUserData = () => {
    axios
      .get("http://localhost:8080/api/getAllAdminAccounts")
      .then((response) => {
        setUserData(response.data);
        setLoading(false);
      })
      .catch((error) => {
        alert("Error fetching data:", error);
        setLoading(false);
      });
  };

  useEffect(() => {
    fetchUserData();
  }, []);

  const handleLogin = (e) => {
    e.preventDefault();

    const user = userData.find(
      (user) => user.email === email && user.password === password
    );

    if (user) {
      console.log("Current user: ", user);
      history.push("/admindashboard/dashboard");
    } else {
      setError("Invalid email or password");
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div className="flex items-center justify-center h-screen bg-primary bg-stroke-bg bg-center bg-no-repeat bg-cover font-custom">
      <div className="w-[500px] bg-white rounded-lg p-8">
        <div className="w-full flex items-center justify-center">
          <img src={logo} alt="Palit logo" className="w-[250px] h-[102px] mt-4" />
        </div>
        <h2 className="text-2xl font-bold text-grayy mt-4">Admin</h2>
        <form onSubmit={handleLogin}>
          <div className="mt-4">
            <label>Email address</label>
            <CustomInput
              type="email"
              name="email"
              placeholder="yourname@gmail.com"
              value={email}
              onChange={handleEmailChange}
            />
          </div>
          <div className="mt-4">
            <label>Password</label>
            <CustomInput
              type="password"
              name="password"
              value={password}
              onChange={handlePasswordChange}
            />
          </div>
          <CustomButton
            btnStyle="w-full bg-primary p-3 text-white rounded-[20px] mt-6"
            label="Log In"
            type="submit"
          />
          {error && <div className="text-red-500 mt-2">{error}</div>}
        </form>
      </div>
    </div>
  );
};

export default Admin;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\Admin\Dashboard.jsx:
```
import Typography from "@mui/material/Typography";
import React from "react";
import ReportsData from "./ReportsData";
import StoreData from "./StoreData";
import UserData from "./UserData";
import ProductData from "./ProductData";
import StatisticsData from "./StatisticsData";
import AccountData from "./AccountData";
import TransactionData from "./TransactionData";

const marginBottomStyle = {
  marginBottom: "2rem", // You can adjust the margin size as needed
};

const Dashboard = () => {
  return (
    <div className="w-full">
      <Typography paragraph>
        {/* Your existing text content */}
      </Typography>

      <StatisticsData />

      <div style={marginBottomStyle}>
        <ReportsData />
      </div>

      <div style={marginBottomStyle}>
        <UserData />
      </div>

      <div style={marginBottomStyle}>
        <AccountData />
      </div>

      <div style={marginBottomStyle}>
        <StoreData />
      </div>

      <div style={marginBottomStyle}>
        <TransactionData />
      </div>

      <div style={marginBottomStyle}>
        <ProductData />
      </div>
    </div>
  );
};

export default Dashboard;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\Admin\ProductData.jsx:
```
import { Paper } from "@material-ui/core";
import axios from "axios";
import { useEffect, useState } from "react";

const ProductData = () => {
    const [productData, setProductData] = useState([]);

    useEffect(() => {
        axios.get('http://localhost:3003/products')
            .then(response => setProductData(response.data))
            .catch(error => console.error('Error fetching product data:', error));
    }, []);

    return (
        <Paper elevation={3} className="p-5 border rounded-3xl font-custom">
            <div>
                <h1 className="text-2xl font-bold pb-6" >Products</h1>
                <table className="w-full">
                    <thead className="text-left border-b border-[#0071B3] text-slate-500">
                        <tr>
                            <th className="w-1/5 pb-2" >Name</th>
                            <th className="w-1/5 pb-2" >Description</th>
                            <th className="w-1/5 pb-2" >Price</th>
                            <th className="w-1/10 pb-2" >Store ID</th>
                            <th className="w-3/10 pb-2" >Image</th>
                        </tr>
                    </thead>
                    <tbody>
                        {productData.map(product => (
                            <tr key={product.productId}>
                                <td className="py-2">{product.name}</td>
                                <td className="py-2">{product.description}</td>
                                <td className="py-2">{product.price}</td>
                                <td className="py-2">{product.storeId}</td>
                                <td className="py-2">{product.imagePath && <img src={product.imagePath} alt={`Image for ${product.name}`} />}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </Paper>
    )
}

export default ProductData

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\Admin\Products.jsx:
```
import React from "react";
import ProductData from "./ProductData";

const Products = () => {
    return <div>
        <div className="w-full">
        <h1 className="text-3xl font-bold pb-6 mt-10">Products</h1>
            <ProductData />
        </div>
        </div>;
}

export default Products;
```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\Admin\Reports.jsx:
```
import axios from "axios";
import React, { useEffect, useState } from "react";
import ReportsData from "./ReportsData";

const Reports = () => {
  const [reportData, setReportData] = useState([]);

  useEffect(() => {
    axios
      .get("http://localhost:3008/reports")
      .then((response) => setReportData(response.data))
      .catch((error) => console.error("Error fetching reports data:", error));
  }, []);

  return (
    <div className="w-full">
      <h1 className="text-3xl font-bold pb-6 mt-10">Reports</h1>
      <ReportsData />
    </div>
  );
};

export default Reports;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\Admin\ReportsData.jsx:
```
import React, { useState, useEffect } from "react";
import axios from "axios";
import { Paper } from "@material-ui/core";
import CustomButton from "../components/CustomButton";

const ReportsData = () => {
  const [reportData, setReportData] = useState([]);
  const [edit, setEdit] = useState(0);
  const [resolvedCheckboxes, setResolvedCheckboxes] = useState({});

  useEffect(() => {
    axios
      .get("http://localhost:3008/reports")
      .then((response) => {
        setReportData(response.data);
        const initialCheckboxes = {};
        response.data.forEach((report) => {
          initialCheckboxes[report.reportId] = report.isResolved === "true";
        });
        setResolvedCheckboxes(initialCheckboxes);
      })
      .catch((error) =>
        console.error("Error fetching reports data:", error)
      );
  }, []);

  const handleEditClick = () => {
    setEdit(1);
  };

  const handleSaveClick = () => {
    // Create a variable to store the updated reports data
    let updatedReportsData = [];
    // Loop through the reportData array
    reportData.forEach((report) => {
      // Compare the isResolved value of each report with the resolvedCheckboxes state
      if (report.isResolved !== resolvedCheckboxes[report.reportId]) {
        // If they are different, add that report to the updated reports data
        updatedReportsData.push(report);
      }
    });
    // Check if the updated reports data is not empty
    if (updatedReportsData.length > 0) {
      // Use axios to make a PUT request to the API endpoint with the updated reports data as the payload
      axios
        .put("http://localhost:3008/reports", updatedReportsData)
        .then((response) => {
          // Handle the response from the API request
          console.log("Reports data updated successfully:", response.data);
        })
        .catch((error) => {
          // Handle the error from the API request
          console.error("Error updating reports data:", error);
        });
    }
    // Set the edit state back to 0 to exit the edit mode
    setEdit(0);
  };
  
  const handleCheckboxChange = (reportId) => {
    // Copy the resolvedCheckboxes state into a new object
    const prevCheckboxes = { ...resolvedCheckboxes };
    // Update the resolvedCheckboxes state
    setResolvedCheckboxes((prevCheckboxes) => ({
      ...prevCheckboxes,
      [reportId]: !prevCheckboxes[reportId],
    }));
    // Update the report.isResolved value in the reportData array
    setReportData((prevData) =>
      prevData.map((report) =>
        report.reportId === reportId
          ? { ...report, isResolved: !prevCheckboxes[reportId] ? "true" : "false" }
          : report
      )
    );
  };
  
  return (
    <Paper elevation={3} className="p-5 border rounded-3xl font-custom">
      <div>
        <h1 className="text-2xl font-bold pb-6">Report</h1>
        <CustomButton
          // Use a ternary operator to change the button label
          label={edit === 1 ? "Save" : "Edit"}
          // Pass the handleSaveClick function as a prop
          onClick={edit === 1 ? handleSaveClick : handleEditClick}
        ></CustomButton>
        <table className="w-full">
          <thead className="text-left border-b border-[#0071B3] text-slate-500">
            <tr>
              <th className="w-1/5 pb-2">Sender Name</th>
              <th className="w-1/5 pb-2">Message Content</th>
              <th className="w-1/5 pb-2">Time Stamp</th>
              <th className="w-1/10 pb-2">isResolved</th>
              {edit === 1 && <th>Delete</th>}
            </tr>
          </thead>
          <tbody>
            {reportData.map((report) => (
              <tr key={report.reportId}>
                <td className="py-2">{report.senderName}</td>
                <td className="py-2">{report.messageContent}</td>
                <td className="py-2">{report.timestamp}</td>
                {edit === 1 ? (
                  <td className="py-2">
                    <input
                      type="checkbox"
                      checked={resolvedCheckboxes[report.reportId]}
                      onChange={() => handleCheckboxChange(report.reportId)}
                    />
                  </td>
                ) : (
                  <td className="py-2">
                    {report.isResolved === "true" ? "Resolved" : "Pending"}
                  </td>
                )}
                {edit === 1 && <td>Delete button goes here</td>}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </Paper>
  );
};

export default ReportsData;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\Admin\Statistics.jsx:
```
import React from "react";
import StatisticsData from "./StatisticsData";

const Statistics = () => {
  return (
    <div className="w-full">
  <h1 className="text-3xl font-bold pb-6 mt-10">Statistics</h1>
      <StatisticsData />
    </div>
  );
};

export default Statistics;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\Admin\StatisticsData.jsx:
```
import React from 'react';
import { Bar, Line } from 'react-chartjs-2';

const StatisticsData = () => {
    const transactions = [
        { status: 'Completed', rating: 5 },
        { status: 'Pending', rating: 4 },
        { status: 'Cancelled', rating: 3 },
        { status: 'Completed', rating: 5 },
        { status: 'Pending', rating: 4 },
    ];

    const reports = [
        { isResolved: true },
        { isResolved: true },
        { isResolved: false },
        { isResolved: false },
        { isResolved: false },
    ];

    const users = [
        { id: 1, fullname: 'John Doe', userType: 'Vendor' },
        { id: 2, fullname: 'Jane Smith', userType: 'Customer' },
        { id: 3, fullname: 'Joshua Briones', userType: 'Vendor' },
        { id: 4, fullname: 'Eren Kuno', userType: 'Customer' },
        { id: 5, fullname: 'Doe John', userType: 'Vendor' },
    ];

    const totalTransactions = transactions.length;

    const resolvedReports = reports.filter(report => report.isResolved === true);
    const resolutionRate = (resolvedReports.length / reports.length) * 100 || 0;

    const totalUsers = users.length;

    const websiteVisitorsData = {
        labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
        datasets: [
            {
                label: 'Website Visitors',
                backgroundColor: 'rgba(75,192,192,0.4)',
                borderColor: 'rgba(75,192,192,1)',
                borderWidth: 1,
                hoverBackgroundColor: 'rgba(75,192,192,0.6)',
                hoverBorderColor: 'rgba(75,192,192,1)',
                data: [65, 59, 80, 81, 56],
            },
        ],
    };

    const salesAnalyticsData = {
        labels: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6', 'Day 7'],
        datasets: [
            {
                label: 'Total Sales (in thousands)',
                fill: false,
                lineTension: 0.1,
                backgroundColor: 'rgba(75,192,192,0.4)',
                borderColor: 'rgba(75,192,192,1)',
                borderCapStyle: 'butt',
                borderDash: [],
                borderDashOffset: 0.0,
                borderJoinStyle: 'miter',
                pointBorderColor: 'rgba(75,192,192,1)',
                pointBackgroundColor: '#fff',
                pointBorderWidth: 1,
                pointHoverRadius: 5,
                pointHoverBackgroundColor: 'rgba(75,192,192,1)',
                pointHoverBorderColor: 'rgba(220,220,220,1)',
                pointHoverBorderWidth: 2,
                pointRadius: 1,
                pointHitRadius: 10,
                data: [30, 40, 25, 45, 30, 50, 35],
            },
        ],
    };

    

    return (
        
        <div className="container mx-auto p-4" >
          <div className="flex flex-wrap -mx-2">
            <div className="w-full md:w-1/3 px-2 mb-4">
              <div className="border border-gray-300 p-4 bg-blue-400 rounded-lg shadow-md">
                <h2 className="text-2xl mb-2">Total Users</h2>
                <p className="text-5xl font-bold text-center">{totalUsers}</p>
                <p className='text-center'>From the running month</p>
              </div>
            </div>
    
            {/* Total Transactions */}
            <div className="w-full md:w-1/3 px-2 mb-4">
              <div className="border border-gray-300 p-4 bg-yellow-300 rounded-lg shadow-md">
                <h2 className="text-2xl mb-2">Total Transactions</h2>
                <p className="text-5xl font-bold text-center">{totalTransactions}</p>
                <p className='text-center'>Daily Transactions for the month</p>
              </div>
            </div>
    
            {/* Report Resolution Rate */}
            <div className="w-full md:w-1/3 px-2 mb-4">
              <div className="border border-gray-300 p-4 bg-red-400 rounded-lg shadow-md">
                <h2 className="text-2xl mb-2">Report Resolution Rate</h2>
                <p className="text-5xl font-bold text-center ">{resolutionRate.toFixed(2)}%</p>
                <p className='text-center'>+ 7.46% greater than last month</p>
              </div>
            </div>
          </div>
    
          {/* Display graphs side by side */}
          <div className="flex flex-wrap -mx-2">
            {/* Sales Analytics Line Graph */}
            <div className="w-full md:w-1/2 px-2 mb-4 ">
              <div className="border border-gray-300 p-4 rounded shadow-md bg-white">
                <h2 className="text-2xl font-bold mb-2">Sales Analytics (Past 7 Days)</h2>
                <Line data={salesAnalyticsData} />
              </div>
            </div>
    
            {/* Website Visitors Bar Graph */}
            <div className="w-full md:w-1/2 px-2 mb-4">
              <div className="border border-gray-300 p-4 rounded shadow-md bg-white">
                <h2 className="text-2xl font-bold mb-2">Website Visitors</h2>
                <Bar data={websiteVisitorsData} />
              </div>
            </div>
          </div>
        </div>
      );
    };
    
    export default StatisticsData;
```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\Admin\StoreData.jsx:
```
import { useState, useEffect } from "react";
import axios from "axios";
import { Paper } from "@material-ui/core";

const StoreData = ()=> {
    const [storeData, setStoreData] = useState([]);

    useEffect(() => {
        axios.get('http://localhost:3006/store')
          .then(response => setStoreData(response.data))
          .catch(error => console.error('Error fetching store data:', error));
    }, []);

    return (
        <Paper elevation={3} className="p-5 border rounded-3xl font-custom">
            <div>
                <h1 className="text-2xl font-bold pb-6" >Store</h1>
                <table className="w-full">
                <thead className="text-left border-b border-[#0071B3] text-slate-500">
                    <tr>
                    <th className="w-1/5 pb-2" >Store</th>
                    <th className="w-2/5 pb-2" >Description</th>
                    <th className="w-1/10 pb-2">Category</th>
                    <th className="w-3/10 pb-2">Image</th>
                    </tr>
                </thead>
                <tbody>
                    {storeData.map(store => (
                    <tr key={store.id}>
                        <td className="py-2">{store.storeName}</td>
                        <td className="py-2">{store.storeDescription}</td>
                        <td className="py-2">{store.category}</td>
                        <td className="py-2">{store.imagePath}</td>
                    </tr>
                    ))}
                </tbody>
                </table>
            </div>
        </Paper>
    )
}

export default StoreData
```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\Admin\Stores.jsx:
```
import React from "react";
import StoreData from "./StoreData";

const Stores = () => {
  return <div>
    <div className="w-full">
    <h1 className="text-3xl font-bold pb-6 mt-10">Stores</h1>
        <StoreData />
    </div>
  </div>;
}

export default Stores;
```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\Admin\TransactionData.jsx:
```
import { Paper } from "@material-ui/core";
import axios from "axios";
import { useEffect, useState } from "react";

const TransactionData = () => {
    const [transactionData, setTransactionData] = useState([]);

    useEffect(() => {
        axios.get('http://localhost:3007/transactions')
            .then(response => setTransactionData(response.data))
            .catch(error => console.error('Error fetching transaction data:', error));
    }, []);

    return (
        <Paper elevation={3} className="p-5 border rounded-3xl font-custom">
            <div>
                <h1 className="text-2xl font-bold pb-6" >Transactions</h1>
                <table className="w-full">
                    <thead className="text-left border-b border-[#0071B3] text-slate-500">
                        <tr>
                            <th className="w-1/5 pb-2" >Customer ID</th>
                            <th className="w-1/5 pb-2" >Vendor ID</th>
                            <th className="w-1/5 pb-2" >Status</th>
                            <th className="w-1/5 pb-2" >Rating</th>
                        </tr>
                    </thead>
                    <tbody>
                        {transactionData.map(transaction => (
                            <tr key={`${transaction.accountCustomerId}-${transaction.accountVendorId}`}>
                                <td className="py-2">{transaction.accountCustomerId}</td>
                                <td className="py-2">{transaction.accountVendorId}</td>
                                <td className="py-2">{transaction.status}</td>
                                <td className="py-2">{transaction.rating}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </Paper>
    )
}

export default TransactionData

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\Admin\Transactions.jsx:
```
import React from "react";
import TransactionData from "./TransactionData";

const Transactions = () => {
    return <div>
        <div className="w-full">
        <h1 className="text-3xl font-bold pb-6 mt-10">Transactions</h1>
            <TransactionData />
        </div>
    </div>;
}

export default Transactions;
```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\Admin\UserData.jsx:
```
import { Paper } from "@material-ui/core";
import axios from "axios";
import { useEffect, useState } from "react";

const UserData = () => {
    const [userData, setUserData] = useState([]);

    useEffect(() => {
        axios.get('http://localhost:3002/users')
            .then(response => setUserData(response.data))
            .catch(error => console.error('Error fetching user data:', error));
    }, []);

    return (
        <Paper elevation={3} className="p-5 border rounded-3xl font-custom">
            <div>
                <h1 className="text-2xl font-bold pb-6" >User</h1>
                <table className="w-full">
                    <thead className="text-left border-b border-[#0071B3] text-slate-500">
                        <tr>
                            <th className="w-1/5 pb-2" >Name</th>
                            <th className="w-1/5 pb-2" >Email</th>
                            <th className="w-1/5 pb-2" >Birthdate</th>
                            <th className="w-1/10 pb-2" >User Type</th>
                            <th className="w-3/10 pb-2" >Image</th>
                        </tr>
                    </thead>
                    <tbody>
                        {userData.map(user => (
                            <tr key={user.id}>
                                <td className="py-2">{user.fullname}</td>
                                <td className="py-2">{user.email}</td>
                                <td className="py-2">{user.birthdate}</td>
                                <td className="py-2">{user.userType}</td>
                                <td className="py-2">{user.image && <img src={user.image} alt={`Profile for ${user.fullname}`} />}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </Paper>
    )
}

export default UserData
```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\Admin\Users.jsx:
```
import React from "react";
import UserData from "./UserData";

const Users = () => {
  return <div>
    <div className="w-full">
    <h1 className="text-3xl font-bold pb-6 mt-10">Users</h1>
        <UserData />
    </div>
  </div>;
}

export default Users;
```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\assets\styles\styles.js:
```
import * as React from "react";
import { styled } from "@mui/material/styles";
import Badge from "@mui/material/Badge";
import Avatar from "@mui/material/Avatar";
import Stack from "@mui/material/Stack";
import Button from "@mui/material/Button";
import MuiAlert from "@mui/material/Alert";

import IconButton from "@mui/material/IconButton";
import CloseIcon from "@mui/icons-material/Close";

export const NAV_HOVER_STYLE =
  "relative text-xl w-fit block after:block after:content-[''] after:absolute after:h-[3px] after:bg-customYellow after:w-full after:scale-x-0 after:hover:scale-x-100 after:transition after:duration-300 after:origin-center";

export const NAV_ACTIVE_STYLE =
  "relative text-xl w-fit block after:block after:content-[''] after:absolute after:h-[3px] after:bg-customYellow after:w-full after:scale-x-100";

export const GRADIENT_BG = {
  backgroundColor: "hsla(0, 0%, 100%, 1)",
  backgroundImage:
    "linear-gradient(315deg, hsla(0, 0%, 100%, 1) 0%, hsla(190, 42%, 76%, 1) 100%)",
  MozBackgroundImage:
    "-moz-linear-gradient(315deg, hsla(0, 0%, 100%, 1) 0%, hsla(190, 42%, 76%, 1) 100%)",
  WebkitBackgroundImage:
    "-webkit-linear-gradient(315deg, hsla(0, 0%, 100%, 1) 0%, hsla(190, 42%, 76%, 1) 100%)",
  filter:
    'progid:DXImageTransform.Microsoft.gradient(startColorstr="#FFFFFF", endColorstr="#AAD4DC", GradientType=1)',
};
export const GRADIENT_BG_DM = {
  background: "hsla(0, 0%, 100%, 1)",
  backgroundImage:
    "linear-gradient(315deg, hsla(0, 0%, 100%, 1) 0%, hsla(189, 40%, 13%, 1) 100%)",
  MozBackgroundImage:
    "-moz-linear-gradient(315deg, hsla(0, 0%, 100%, 1) 0%, hsla(189, 40%, 13%, 1) 100%)",
  WebkitBackgroundImage:
    "-webkit-linear-gradient(315deg, hsla(0, 0%, 100%, 1) 0%, hsla(189, 40%, 13%, 1) 100%)",
  filter:
    'progid:DXImageTransform.Microsoft.gradient(startColorstr="#FFFFFF", endColorstr="#142B2F", GradientType=1)',
};

export const StyledBadge = styled(Badge)(({ theme }) => ({
  "& .MuiBadge-badge": {
    backgroundColor: "#44b700",
    color: "#44b700",
    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,
    "&::after": {
      position: "absolute",
      top: 0,
      left: 0,
      width: "100%",
      height: "100%",
      borderRadius: "50%",
      animation: "ripple 1.2s infinite ease-in-out",
      border: "1px solid currentColor",
      content: '""',
    },
  },
  "@keyframes ripple": {
    "0%": {
      transform: "scale(.8)",
      opacity: 1,
    },
    "100%": {
      transform: "scale(2.4)",
      opacity: 0,
    },
  },
}));

export const Alert = React.forwardRef(function Alert(props, ref) {
  return <MuiAlert elevation={6} ref={ref} variant="filled" {...props} />;
});

export const mapContainerStyle = {
  width: "100%",
  height: "calc(100vh - 90px)",
};

export const mapOptions = {
  streetViewControl: false,
  zoomControl: false,
  mapTypeControl: false,
  scaleControl: false,
  rotateControl: false,
  fullscreenControl: false,
  styles: [
    {
      featureType: "poi",
      stylers: [{ visibility: "off" }],
    },
    {
      featureType: "transit",
      elementType: "labels.icon",
      stylers: [{ visibility: "off" }],
    },
  ],
};



```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\components\AdminDashboard.jsx:
```
import FolderSharedIcon from "@mui/icons-material/FolderShared";
import HomeIcon from "@mui/icons-material/Home";
import LocalGroceryStoreIcon from "@mui/icons-material/LocalGroceryStore";
import LogoutIcon from "@mui/icons-material/Logout";
import PaymentsIcon from "@mui/icons-material/Payments";
import PeopleIcon from "@mui/icons-material/People";
import ReportIcon from "@mui/icons-material/Report";
import ShoppingBagIcon from "@mui/icons-material/ShoppingBag";
import StackedLineChartIcon from "@mui/icons-material/StackedLineChart";
import Box from "@mui/material/Box";
import CssBaseline from "@mui/material/CssBaseline";
import Divider from "@mui/material/Divider";
import Drawer from "@mui/material/Drawer";
import List from "@mui/material/List";
import ListItem from "@mui/material/ListItem";
import ListItemButton from "@mui/material/ListItemButton";
import ListItemIcon from "@mui/material/ListItemIcon";
import ListItemText from "@mui/material/ListItemText";
import * as React from "react";
import { useState } from "react";
import { Link, useLocation } from "react-router-dom";
import logo from "../assets/images/logo.png";
import CustomInput from "./CustomInput";

import { useHistory } from "react-router-dom";
import Accounts from "../Admin/Accounts";
import Dashboard from "../Admin/Dashboard";
import Products from "../Admin/Products";
import Reports from "../Admin/Reports";
import Statistics from "../Admin/Statistics";
import Stores from "../Admin/Stores";
import Transactions from "../Admin/Transactions";
import Users from "../Admin/Users";

const drawerWidth = 240;

export default function NavigationBarAdmin() {
  const [searchInput, setSearchInput] = useState("");
  const currentDate = new Date();
  const location = useLocation().pathname;
  const history = useHistory();
  const formattedDate = currentDate.toDateString();

  const handleLogout = () => {
    history.push("/adminlogin3x8Yz7!qA");
  };

  return (
    <Box sx={{ display: "flex " }}>
      <CssBaseline />

      <Drawer
        sx={{
          width: drawerWidth,
          flexShrink: 0,
          "& .MuiDrawer-paper": {
            width: drawerWidth,
            boxSizing: "border-box",
          },
        }}
        variant="permanent"
        anchor="left"
      >
        <img src={logo} alt="Palit app logo" className="w-3/4" />
        <Divider />
        <List>
          {[
            "Dashboard",
            "Statistics",
            "Reports",
            "Users",
            "Accounts",
            "Stores",
            "Transactions",
            "Products",
          ].map((text, index) => (
            <ListItem
              key={text}
              disablePadding
              sx={{
                "&:hover": {
                  backgroundColor: "#0071B3",
                  color: "white",
                  "& .MuiSvgIcon-root": {
                    color: "white",
                  },
                },
              }}
            >
              <ListItemButton
                component={Link}
                to={`/admindashboard/${text.toLowerCase()}`}
              >
                <ListItemIcon>
                  {(() => {
                    switch (text) {
                      case "Dashboard":
                        return <HomeIcon />;
                      case "Statistics":
                        return <StackedLineChartIcon />;
                      case "Reports":
                        return <ReportIcon />;
                      case "Users":
                        return <PeopleIcon />;
                      case "Accounts":
                        return <FolderSharedIcon />;
                      case "Stores":
                        return <LocalGroceryStoreIcon />;
                      case "Transactions":
                        return <PaymentsIcon />;
                      case "Products":
                        return <ShoppingBagIcon />;
                      default:
                        return null;
                    }
                  })()}
                </ListItemIcon>
                <ListItemText primary={text} />
              </ListItemButton>
            </ListItem>
          ))}
        </List>
        <Divider />
        <List
          sx={{
            "&:hover": {
              backgroundColor: "#E8594F",
              color: "white",
              "& .MuiSvgIcon-root": {
                color: "white",
              },
            },
          }}
        >
          <ListItemButton onClick={handleLogout}>
            <ListItemIcon>
              <LogoutIcon />
            </ListItemIcon>
            <ListItemText primary="Log out" />
          </ListItemButton>
        </List>
      </Drawer>
      <Box
        component="main"
        sx={{ flexGrow: 1, p: 3, backgroundColor: "#D6F3F9", height: "100vh", overflow: "auto" }}
      >
        {/* <Toolbar /> */}
        <section id="dashboard" className="font-custom">
          <div className="flex justify-between items-center ">
            <di>
              <h1 className="text-4xl font-bold ">Dashboard</h1>
              <p class="text-sm text-slate-400">{formattedDate}</p>
            </di>
            <div className="w-[250px]">
              <CustomInput
                type="text"
                placeholder="Search"
                onChange={(e) => setSearchInput(e.target.value)}
              />
            </div>
          </div>
          {location === "/admindashboard/dashboard" && <Dashboard />}
          {location === "/admindashboard/statistics" && <Statistics />}
          {location === "/admindashboard/reports" && <Reports />}
          {location === "/admindashboard/users" && <Users />}
          {location === "/admindashboard/accounts" && <Accounts />}
          {location === "/admindashboard/stores" && <Stores />}
          {location === "/admindashboard/transactions" && <Transactions />}
          {location === "/admindashboard/products" && <Products />}
          {/* {(() => {
            switch (location) {
              case "/admindashboard/dashboard":
                return <Dashboard />;
              case "/admindashboard/statistics":
                return <Statistics />;
              case "/admindashboard/reports":
                return <Reports />;
              default:
                return null;
            }
          })()} */}
        </section>
      </Box>
    </Box>
  );
}

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\components\CustomButton.jsx:
```
import React from "react";

const CustomButton = ({ btnStyle, label, onClick, type }) => {
  return (
    <button className={btnStyle} onClick={onClick} type={type}>
      {label}
    </button>
  );
};

export default CustomButton;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\components\CustomInput.jsx:
```
import React from "react";

const Input = ({ type, placeholder, onChange }) => {
  return (
    <input
      type={type}
      placeholder={placeholder}
      onChange={onChange}
      className="w-full rounded-[20px] p-3 mt-1 text-grayy font-custom border border-grayy "
      required
    />
  );
};

export default Input;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\components\MapSlidingBox.jsx:
```
import React from "react";
import { GoSidebarExpand, GoSidebarCollapse  } from "react-icons/go";
import stroke from "../assets/images/stroke.png";
import ManageStore from "../pages/ManageStore";
const MapSlidingBox = ({ showSlider, handleSliderToggle }) => {
  const sliderBoxStyle = {
    position: "absolute",
    top: 25,
    right: showSlider ? "30px" : "-410px",
    width: "400px",
    height: "90%",
    backgroundColor: "#fff",
    borderRadius: "5px",
    boxShadow: "0 0 3px rgba(0, 0, 0, 0.3)",
    transition: "right 0.3s ease",
    overflow: "hidden",
    padding: "20px",
  };
  return (
    <div>
      <div style={sliderBoxStyle}>
        <img
          src={stroke}
          alt="Stroke"
          style={{
            width: "auto",
            height: "100%",
            position: "absolute",
          }}
        />
        <ManageStore />
      </div>
      <button
        style={{
          backgroundColor: "white",
          position: "absolute",
          right: showSlider ? "440px" : "80px",
          bottom: "20px",
          padding: "10px",
          borderRadius: "5px",
          boxShadow: "0 0 3px rgba(0, 0, 0, 0.3)",
          marginBottom: "10px",
          transition: "right 0.3s ease", // Add a transition to make the movement smooth
        }}
        onClick={handleSliderToggle}
      >
        {showSlider ? <GoSidebarCollapse size={30} /> : <GoSidebarExpand size={30} />}
      </button>
    </div>
  );
};
export default MapSlidingBox;
```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\components\NavigationBar.jsx:
```
import React, { useContext, useState } from "react";
import { Link, useHistory } from "react-router-dom";
import { Button } from "@material-ui/core";
import logo from "../assets/images/logo-white.png";
import { NAV_HOVER_STYLE, NAV_ACTIVE_STYLE } from "../assets/styles/styles.js";
import { useLocation } from "react-router-dom/cjs/react-router-dom.min.js";
import { UserContext } from "../UserContext"; // Update the path based on your file structure
import sampleStore from "../assets/images/storesample.png";
import MenuItem from "@mui/material/MenuItem";
import Menu from "@mui/material/Menu";
import AccountCircleIcon from "@mui/icons-material/AccountCircle";
import LogoutIcon from "@mui/icons-material/Logout";
import axios from "axios";

const NavigationBar = () => {
  const [isHovered, setIsHovered] = useState(false);
  const { user, setUser } = useContext(UserContext);
  const loc = useLocation();
  const history = useHistory();
  const [anchorEl, setAnchorEl] = React.useState(null);

  const handleLogout = () => {
    // Perform logout actions (e.g., clear user data)
    setUser(null);
    // Additional logout actions can be added here
    axios.put(`http://localhost:8080/api/updateLocationById/${user.id}`, {
      // user user's location but update the isActive to true
      ...user.account.location,
      isActive: false,
    })
    .then(response => {
      console.log(response.data);
    })
    .catch(error => {
      console.error(error);
    });
    // Redirect to the default page ("/")
    history.push("/");
  };

  const handleMenu = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  return (
    <nav className="flex justify-between w-full py-3 px-16 bg-primary">
      <img src={logo} alt="Palit logo" className="w-30 h-16" />
      <div className="flex items-center justify-center gap-8">
        <ul className="flex gap-8 items-center justify-center text-white text-xl">
          <li
            className={
              loc.pathname === "/home" ? NAV_ACTIVE_STYLE : NAV_HOVER_STYLE
            }
          >
            <Link to="/home">Home</Link>
          </li>
          <li
            className={
              loc.pathname === "/aboutus" ? NAV_ACTIVE_STYLE : NAV_HOVER_STYLE
            }
          >
            <Link to="/aboutus">About us</Link>
          </li>
          <li
            className={
              loc.pathname === "/contactus" ? NAV_ACTIVE_STYLE : NAV_HOVER_STYLE
            }
          >
            <Link to="/contactus">Contact us</Link>
          </li>
          <li
            className={
              loc.pathname === "/services" ? NAV_ACTIVE_STYLE : NAV_HOVER_STYLE
            }
          >
            <Link to="/services">Services</Link>
          </li>
        </ul>

        {user ? (
          // If the user is logged in, display Logout button and user image
          <div className="flex items-center gap-4">
            <img
              src={`data:image/png;base64, ${user.image}`}
              alt="User"
              className="w-12 h-12 rounded-full"
              onClick={handleMenu}
            />
            <Menu
              id="menu-appbar"
              anchorEl={anchorEl}
              anchorOrigin={{
                vertical: "top",
                horizontal: "right",
              }}
              keepMounted
              transformOrigin={{
                vertical: "top",
                horizontal: "right",
              }}
              open={Boolean(anchorEl)}
              onClose={handleClose}
              style={{ marginTop: "50px" }}
            >
              <MenuItem
                onClick={handleLogout}
                style={{ display: "flex", gap: "10px", paddingLeft: "3px", paddingRight: "3px"}}
              >
                <LogoutIcon />
                Logout
              </MenuItem>
            </Menu>
          </div>
        ) : (
          // If the user is not logged in, display Sign In button
          <Link to="/signin" style={{ textDecoration: "none" }}>
            <Button
              variant="outlined"
              style={{
                textTransform: "none",
                backgroundColor: "#F4D23E",
                color: "#2a2c41",
                border: "none",
                width: "120px",
                fontSize: "18px",
                backgroundColor: isHovered ? "#f5d751" : "#F4D23E",
                fontFamily: "Poppins",
                textDecoration: "semibold",
                borderRadius: "20px",
                transition: "color 0.3s, border-color 0.3s, box-shadow 0.3s", // Add box-shadow to the transition
                boxShadow: isHovered
                  ? "5px 5px 30px rgba(0, 0, 0, 0.2)"
                  : "none",
              }}
              onMouseEnter={() => setIsHovered(true)}
              onMouseLeave={() => setIsHovered(false)}
            >
              Sign In
            </Button>
          </Link>
        )}
      </div>
    </nav>
  );
};

export default NavigationBar;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\data\dummy.js:
```
import geoloc from "../assets/images/geolocation.png";
import rating from "../assets/images/rating.png";
import chat from "../assets/images/message.png";
import report from "../assets/images/report.png";
import cod from "../assets/images/cod.png";
import queue from "../assets/images/queue.png";

export const services = [
  {
    title: "Geolocation",
    description:
      "Utilize our precise location services, ensuring accurate navigation and personalized experiences tailored to your specific needs.",
    logo: geoloc,
  },
  {
    title: "Chat",
    description:
      "Engage in instant messaging, fostering real-time communication for quick and efficient interactions with our user-friendly interface.",
    logo: chat,
  },
  {
    title: "Cash on delivery",
    description:
      "Opt for the convenient payment option, allowing you to pay upon receiving your orders at your doorstep.",
    logo: cod,
  },
  {
    title: "Report",
    description:
      " Quickly address issues with our easy reporting system, facilitating prompt resolution and continuous improvement of our services.",
    logo: report,
  },
  {
    title: "Rating",
    description:
      "Share your valuable insights through our comprehensive rating and review system, enhancing user satisfaction and refining experiences.",
    logo: rating,
  },
  {
    title: "Customer queue",
    description:
      "Enjoy a streamlined and organized customer experience with our efficient queue management system for seamless transactions.",
    logo: queue,
  },
];

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\pages\Aboutus.jsx:
```
import React from "react";
import { Link } from "react-router-dom";

import NavigationBar from "../components/NavigationBar";
import map from "../assets/images/citmap.png";
import dogge from "../assets/images/dummy_prof.jpeg";

const membersData = [
  {
    name: "Mark Kenneth Badilla",
    position: "Web Developer",
    img: dogge,
  },
  {
    name: "Alestair Cyril Coyoca",
    position: "Web Developer",
    img: dogge,
  },
  { name: "Kheisa Selma", position: "Web Developer", img: dogge },
  { name: "Joshua Briones", position: "Web Developer", img: dogge },
];

const Aboutus = () => {
  return (
    <div className="w-full font-custom">
      {/* Navigation bar to be added... */}
      <NavigationBar />
      <div className="w-full flex items-center flex-col py-[96px] px-20 text-center">
        <h4 className="text-primary text-[16px] font-semibold mb-4 ">
          About the company
        </h4>
        <h1 className="text-grayy text-5xl leading-[60px] font-semibold">
          Made with love, right here
          <br />
          in Cebu
        </h1>
        <p className="text-slate-500 pt-6 text-xl mb-[96px]">
          Come visit our friendly team at one of our offices.
        </p>

        <img src={map} alt="Palit's location" />

        <div className="h-[1px] w-full bg-gray-200 mt-[96px]"></div>

        <h4 className="text-primary text-[16px] font-semibold mb-4 mt-[96px] ">
          Join us!
        </h4>
        <h1 className="text-grayy text-5xl leading-[60px] font-semibold">
          Meet our team
        </h1>
        <p className="text-slate-500 pt-6 text-xl mb-[96px]">
          Our philosophy is simple &mdash; hire a team of diverse, passionate
          people and foster <br /> a culture that empowers you to do your best
          work.
        </p>

        <div className="pt-16 flex gap-8 w-full">
          {membersData.map((member, index) => (
            <div className="w-full text-left" key={index}>
              <img
                src={member.img}
                alt={member.name}
                className="w-full h-[300px] mb-6"
              />
              <h5 className="text-xl font-semibold text-grayy">
                {member.name}
              </h5>
              <p className="text-lg text-primary">{member.position}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default Aboutus;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\pages\Chat.jsx:
```
import React from "react";
import { useState } from "react";
import { Avatar } from "@material-ui/core";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import DarkModeIcon from "@mui/icons-material/DarkMode";
import LightModeIcon from "@mui/icons-material/LightMode";
import SendIcon from "@mui/icons-material/Send";

import {
  GRADIENT_BG,
  StyledBadge,
  GRADIENT_BG_DM,
} from "../assets/styles/styles";
import dummyImg from "../assets/images/dummy_prof.jpeg";

const conversation = [
  {
    conversation_id: 1,
    is_deleted: 0,
    receiver_id: 101,
    sender_id: 100,
  },
  {
    conversation_id: 2,
    is_deleted: 0,
    receiver_id: 201,
    sender_id: 200,
  },
];

const chats = [
  {
    chat_id: 1,
    conversation_id: 1,
    is_deleted: 0,
    message_content: "Unsay baligya ninyo boss?",
    receiver_id: 100,
    sender_id: 101,
    timestamp: "2023-11-22T10:35:00Z",
  },
  {
    chat_id: 2,
    conversation_id: 1,
    is_deleted: 0,
    message_content: "Pila nana ka adlaw sukad harvest inyong saging?",
    receiver_id: 100,
    sender_id: 101,
    timestamp: "2023-11-22T11:00:00Z",
  },
  {
    chat_id: 3,
    conversation_id: 1,
    is_deleted: 0,
    message_content: "Naa tay saging, siomai, buko juice, og uban pa",
    receiver_id: 101,
    sender_id: 100,
    timestamp: "2023-11-22T11:05:00Z",
  },
  {
    chat_id: 4,
    conversation_id: 1,
    is_deleted: 0,
    message_content: "Sige sige boss, papalita ko",
    receiver_id: 100,
    sender_id: 101,
    timestamp: "2023-11-22T11:05:00Z",
  },
];

const Chat = () => {
  const [isDarkMode, setIsDarkMode] = useState(false);

  const toggleDarkmode = () => {
    setIsDarkMode(!isDarkMode);
  };

  return (
    <div
      className={`w-full h-screen flex flex-col font-custom ${
        isDarkMode ? "bg-[#081314]" : "bg-slate-100"
      }`}
    >
      <div
        id="receiver-details"
        className="w-full px-10 py-4 flex justify-between items-center"
        style={isDarkMode ? GRADIENT_BG_DM : GRADIENT_BG}
      >
        <div className="h-full flex items-center gap-4">
          <button>
            <ArrowBackIcon
              sx={{ color: isDarkMode ? "white" : "black", fontSize: 32 }}
            />
          </button>
          <div className="flex items-center gap-3">
            <StyledBadge
              overlap="circular"
              anchorOrigin={{ vertical: "bottom", horizontal: "right" }}
              variant="dot"
            >
              <Avatar
                alt="Remy Sharp"
                src={dummyImg}
                style={{ height: "60px", width: "60px" }}
              />
            </StyledBadge>
            <div>
              <h2
                className={`${
                  isDarkMode ? "text-white" : "text-black"
                } text-xl font-semibold`}
              >
                {conversation[0].receiver_id === 101 && "Gregorio Bainabai"}
              </h2>
              <p className="text-sm text-green-500">∙ Online</p>
            </div>
          </div>
        </div>
        <div>
          <button onClick={toggleDarkmode}>
            {isDarkMode ? (
              <DarkModeIcon sx={{ color: "black", fontSize: 32 }} />
            ) : (
              <LightModeIcon sx={{ color: "#F4D23F", fontSize: 32 }} />
            )}
          </button>
        </div>
      </div>
      <div
        id="message-contents"
        className="w-full  flex flex-col flex-1 overflow-scroll py-4 px-10"
      >
        {chats.map((chat) => (
          <div
            className={`${
              chat.sender_id === 101 ? "self-start" : "self-end"
            } mb-3 flex`}
          >
            {chat.sender_id === 101 ? (
              <span className="flex items-center gap-2">
                <Avatar
                  alt="Dummy profile"
                  src={dummyImg}
                  style={{
                    height: "42px",
                    width: "42px",
                    display: "inline-block",
                  }}
                />
                <span className="bg-[#E3F1F3] p-3 text-left rounded-r-lg rounded-b-lg">
                  {chat.message_content}
                </span>
              </span>
            ) : (
              <span className="bg-[#AAD5DD] p-3 text-left rounded-l-lg rounded-t-lg">
                {chat.message_content}
              </span>
            )}
          </div>
        ))}
      </div>
      <div id="input-chat" className="w-full h-20 flex gap-3 py-2 px-8 mb-4">
        <textarea className="w-full h-full p-2 rounded-lg border border-gray-300"></textarea>
        <button>
          <SendIcon
            sx={{
              fontSize: 60,
              backgroundColor: isDarkMode ? "white" : "black",
              padding: "12px",
              color: isDarkMode ? "black" : "white",
              borderRadius: "100px",
            }}
          />
        </button>
      </div>
    </div>
  );
};

export default Chat;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\pages\Contact.jsx:
```
import React, { useRef } from "react";
import emailjs from "emailjs-com";

import NavigationBar from "../components/NavigationBar";
import contactBg from "../assets/images/contactus.jpg";

const Contact = () => {
  const form = useRef();

  const sendEmail = (e) => {
    e.preventDefault();

    emailjs
      .sendForm(
        "service_ucxgho9",
        "template_0l01wc5",
        form.current,
        "H1_mvGGgFfArM3Z4L"
      )
      .then(
        (result) => {
          console.log(result.text);
        },
        (error) => {
          console.log(error.text);
        }
      );
  };

  return (
    <div className="w-full h-screen font-custom">
      <NavigationBar />
      <div className="w-full grid grid-cols-2 px-[220px] py-24">
        <form ref={form} onSubmit={sendEmail} className="flex flex-col pr-5">
          <h1 className="text-4xl font-semibold mb-4 text-dark">
            Get in touch
          </h1>
          <p className="text-base text-slate-600 mb-10">
            How can we assist you? please write down your query.
          </p>
          <input
            type="text"
            name="user_name"
            placeholder="Name"
            className="p-4 mb-5 border border-dark rounded-2xl"
          />
          <input
            type="email"
            name="user_email"
            placeholder="Email address"
            className="p-4 mb-5 border border-dark rounded-2xl"
          />
          <textarea
            name="message"
            placeholder="Message"
            className="p-4 mb-5 border border-dark rounded-2xl"
          />
          <input
            type="submit"
            value="Send"
            className="cursor-pointer px-2 py-4 text-white bg-primary rounded-[100px]"
          />
        </form>
        <img
          src={contactBg}
          alt="Background image"
          className="col-span-1 w-full h-full"
        />
      </div>
    </div>
  );
};

export default Contact;
```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\pages\Home.jsx:
```
// Import React and its hooks
import React, {
  useCallback,
  useContext,
  useEffect,
  useRef,
  useState,
} from "react";
// Import Google Maps components from react-google-maps library
import { Circle, GoogleMap, LoadScript, Marker } from "@react-google-maps/api";
// Import custom components for navigation bar and map sliding box
import MapSlidingBox from "../components/MapSlidingBox";
import NavigationBar from "../components/NavigationBar";
// Import custom marker images for vendor and customer
import customerMarker from "../assets/images/customer-map-icon.png";
import marker from "../assets/images/vendor-self-pin.png";
// Import icon for report button
import { MdOutlineReportGmailerrorred } from "react-icons/md";
// Import user context for accessing user data
import { UserContext } from "../UserContext";
// Import utility functions from "../utils/functions"
// Import custom styles for map container and options
import { mapContainerStyle, mapOptions } from "../assets/styles/styles";
// Import utility functions from "../utils/functions"
import {
  renderVendorMarkerIcon,
  updateLocationInContext,
  panAndZoomMap,
  handleSliderToggle,
  handleReport,
  fetchNearbyUsers,
} from "../utils/functions";
let markers = [];
// Define the Home component
function Home() {
  // Get the user and setUser function from the user context
  const { user, setUser } = useContext(UserContext);
  // Define state variables for current position, nearby users, and show slider
  const [currentPosition, setCurrentPosition] = useState(null);
  const [nearbyUsers, setNearbyUsers] = useState([]);
  const [showSlider, setShowSlider] = useState(false);
  // Define a ref variable for the map object
  const mapRef = useRef();
  // Define a callback function for loading the map
  const onMapLoad = useCallback(
    (map) => {
      // Assign the map object to the map ref
      mapRef.current = map;
      // If the current position is available, set the map center to it
      if (currentPosition) {
        mapRef.current.setCenter(currentPosition);
      }
    },
    [currentPosition]
  );
  // Define an effect hook for updating the location in the context
  useEffect(() => {
    // Use the navigator geolocation API to watch the position changes
    const watchId = navigator.geolocation.watchPosition(
      (position) =>
        updateLocationInContext(
          position,
          currentPosition,
          setCurrentPosition,
          user
        ),
      (error) => console.log(error),
      { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }
    );
    // Return a cleanup function to clear the watch
    return () => navigator.geolocation.clearWatch(watchId);
  }, [user, user.account.location.latitude, user.account.location.longitude]);
  // Define an effect hook for panning and zooming the map
  useEffect(() => {
    panAndZoomMap(mapRef, currentPosition, showSlider);
  }, [showSlider, currentPosition]);
  // Define an effect hook for fetching the nearby users
  useEffect(() => {
    fetchNearbyUsers(
      currentPosition,
      user,
      mapRef,
      customerMarker,
      markers
    );
  }, [currentPosition, user.account]);
  // Return the JSX element for rendering the component
  return (
    <>
      <div className="w-full font-custom">
        <NavigationBar />
        <LoadScript googleMapsApiKey="AIzaSyBNM-CYx7dA0gckgBmybtovang7Bvp8lK0">
          <div>
            <GoogleMap
              mapContainerStyle={mapContainerStyle}
              zoom={17}
              className="flex-1"
              options={mapOptions}
              onLoad={onMapLoad}
            >
              {currentPosition && (
                <>
                  <Marker
                    position={currentPosition}
                    icon={renderVendorMarkerIcon(marker)}
                  />
                </>
              )}
              {currentPosition && (
                <Circle
                  center={currentPosition}
                  radius={200}
                  options={{
                    strokeColor: "#0071B3",
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: "#0071B3",
                    fillOpacity: 0.05,
                  }}
                />
              )}
              <MapSlidingBox
                showSlider={showSlider}
                handleSliderToggle={() =>
                  handleSliderToggle(showSlider, setShowSlider)
                }
              />
            </GoogleMap>
            <button
              style={{
                backgroundColor: "white",
                position: "absolute",
                left: "30px",
                bottom: "30px",
                padding: "10px",
                borderRadius: "5px",
                boxShadow: "0 0 5px rgba(0, 0, 0, 0.3)",
                transition: "left 0.3s ease, bottom 0.3s ease",
              }}
              onClick={handleReport}
            >
              <MdOutlineReportGmailerrorred size={30} />
            </button>
          </div>
        </LoadScript>
      </div>
    </>
  );
}
// Export the Home component
export default Home;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\pages\Landing.jsx:
```
import React, { useContext } from "react"; // Import useContext from react
import { Button } from "@material-ui/core";
import { Link, Redirect } from "react-router-dom";
import { UserContext } from "../UserContext";

import NavigationBar from "../components/NavigationBar.jsx";

const Landing = () => {
  // Access the user context
  const { user } = useContext(UserContext);

  // Check if a user exists in the context
  const userExists = user !== null; // Replace with your actual logic

  if (userExists) {
    // Redirect to "/home" if user exists
    return <Redirect to="/home" />;
  }

  return (
    <div className="w-full h-screen bg-primary bg-stroke-bg bg-center bg-no-repeat bg-cover font-custom">
      <NavigationBar />
      <div className="pt-14 text-center w-[600px] m-auto  text-white ">
        <h1 className=" text-7xl font-bold">Palit: Buy and sell on the go!</h1>
        <p className="mt-7 text-slate-300 mb-20">
          A commerce app for moving vendors and customers. Find, chat, and buy
          from nearby sellers on the map. Convenient, fair, and secure. Support
          local livelihoods.
        </p>
        <Link to="/signup">
          <Button
            variant="contained"
            size="large"
            style={{
              textTransform: "none",
              width: "250px",
              fontSize: "18px",
              backgroundColor: "#F4D23E",
              borderRadius: "20px",
              fontFamily: "Poppins",
              color: "#2A2C41",
            }}
          >
            Get started
          </Button>
        </Link>
      </div>
    </div>
  );
};

export default Landing;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\pages\ManageStore.jsx:
```
import { Button, TextField } from "@mui/material";
import axios from "axios";
import React, { useContext, useEffect, useState } from "react";
import { UserContext } from "../UserContext";
import redRating from "../assets/images/redRating.png";

const ManageStore = () => {
    const { user, setUser } = useContext(UserContext);
    const [anchorEl, setAnchorEl] = useState(null);
    const [editMode, setEditMode] = useState(false);
    const [editedProduct, setEditedProduct] = useState({
        picture: "",
        name: "",
        price: "",
    });
    const [products, setProducts] = useState([]);
    const [store, setStore] = useState(null);
    const [imagePreview, setImagePreview] = useState(null);

    useEffect(() => {
        // Replace with your actual API endpoints
        const userApiEndpoint = `http://localhost:8080/api/getUserById/${user.id}`;
        const accountApiEndpoint = "http://localhost:8080/api/getAccountById/";
        const storeApiEndpoint = "http://localhost:8080/api/getStoreById/";

        axios
            .get(userApiEndpoint)
            .then((response) => {
                if (response.data && response.data.accountId) {
                    return axios.get(accountApiEndpoint + response.data.accountId);
                } else {
                    throw new Error("Account ID not found in user data");
                }
            })
            .then((response) => {
                if (response.data && response.data.store) {
                    return axios.get(storeApiEndpoint + response.data.store.storeId);
                } else {
                    throw new Error("Store ID not found in account data");
                }
            })
            .then((response) => {
                if (response.data) {
                    setStore(response.data); // Set the store state
                    console.log("Store data:", response.data); // Log the store data
                }
            })
            .catch((error) => {
                console.error("Error fetching data: ", error);
            });

        const fetchProducts = async () => {
            try {
                const response = await axios.get(`http://localhost:8080/api/getProductServicesByStoreId/store/${user.account.store.storeId}`);
                setProducts(response.data);
                // Store the product data in local storage
                localStorage.setItem('products', JSON.stringify(response.data));
            } catch (error) {
                console.error('Error fetching products:', error);
                // If there's an error, try to load the product data from local storage
                const localData = localStorage.getItem('products');
                if (localData) {
                    setProducts(JSON.parse(localData));
                }
            }
        };

        fetchProducts();
    }, []);

    // Handle click on user image
    const handleMenu = (event) => {
        setAnchorEl(event.currentTarget);
    };

    // Close menu
    const handleClose = () => {
        setAnchorEl(null);
    };

    // Handle click on "Edit" button
    const handleEdit = () => {
        setEditMode(true);
    };

    // Handle click on "Save" button
    const handleSave = () => {
        console.log("Save clicked", editedProduct);
        // Perform the save operation with editedProduct data
        // Update the user context or make an API call to save the changes

        // Reset state after saving
        setEditMode(false);
        setEditedProduct({
            picture: "",
            name: "",
            price: "",
        });
    };

    // Handle input change for text fields
    const handleInputChange = (event) => {
        const { name, value } = event.target;
        setEditedProduct({
            ...editedProduct,
            [name]: value,
        });
    };

    const handleImageChange = (e) => {
        setEditedProduct({
            ...editedProduct,
            picture: e.target.files[0],
        });
        setImagePreview(
            e.target.files[0] ? URL.createObjectURL(e.target.files[0]) : null
        );
    };

    // Handle click on "Choose File" button

    // Handle click on "Add" button
    const handleAdd = async () => {
        // Validate that all required fields are filled
        if (!editedProduct.picture || !editedProduct.name || !editedProduct.price) {
            alert("Please fill in all product details.");
            return;
        }

        function convertToBase64(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = () => resolve(reader.result.split(",")[1]);
                reader.onerror = (error) => reject(error);
            });
        }

        const imageBase64 = await convertToBase64(editedProduct.picture);

        const productData = {
            name: editedProduct.name,
            price: editedProduct.price,
            image: imageBase64,
            store: { storeId: user.account.store.storeId }, // Add the storeId
        };

        // Add the edited product to the list of products
        setProducts((prevProducts) => [...prevProducts, productData]);

        // Make a POST request to the ProductService API endpoint
        axios
            .post("http://localhost:8080/api/createProductService", productData)
            .then((response) => {
                console.log("Product created:", response.data);
            })
            .catch((error) => {
                console.error("Error creating product:", error);
            });

        // Clear the edited product state
        setEditedProduct({
            picture: "",
            name: "",
            price: "",
        });

        setImagePreview(null);
    };

    return (
        <div style={{ height: "100vh", display: "flex", flexDirection: "column" }}>
            {/* User details */}
            <div style={{ display: "flex" }}>
                <img
                    src={`data:image/png;base64, ${user.image}`}
                    alt="User"
                    className="w-14 h-15 rounded-full border-2 border-black"
                    style={{ width: "70px", height: "70px" }}
                    onClick={handleMenu}
                />
                <div className="ml-3" style={{ flexDirection: "column" }}>
                    {/* Store Name */}
                    <h2 className="text-xl font-semibold">
                        {user.account.store ? user.account.store.storeName : "Loading..."}
                    </h2>
                    {/* Category */}
                    <p className="text-sm">
                        {user.account.store ? user.account.store.category : "Loading..."}
                    </p>
                    <div className="flex">
                        <img src={redRating} alt="Rating" className="w-5 h-5" />
                        <p className="font-medium">4.8</p>
                    </div>
                </div>
            </div>

            {/* Store description */}
            <div className="p-2" style={{ height: "90px" }}>
                <p className="text-sm" style={{ textAlign: "justify" }}>
                    {user.account.store ? user.account.store.description : "Loading..."}
                </p>
            </div>

            {/* Products section */}
            <h1
                className="p-2 text-lg font-medium"
                style={{ fontSize: "25px", color: "#0071B3" }}
            >
                Products
            </h1>

            {/* Edit mode */}
            {editMode ? (
                <div
                    className="productscomponent"
                    style={{
                        marginBottom: "20px", width: "95%", position: "relative"

                    }}
                >
                    <div className="flex">
                        <label className="flex-1  justify-center items-center bg-primary rounded-[20px] cursor-pointer mx-auto flex">
                            <input
                                name="image"
                                type="file"
                                accept="image/*"
                                onChange={handleImageChange}
                                className="hidden"
                            />
                            {imagePreview ? (
                                <img
                                    src={imagePreview}
                                    alt="Preview"
                                    className="w-full h-[136px] rounded-[20px] inline-block border-[3px] border-green-400 "
                                />
                            ) : (
                                <span className="text-lg font-semibold` text-white inline-block">
                                    Choose image
                                </span>
                            )}
                        </label>
                        <div className="flex-1">
                            <TextField
                                label="Product Name"
                                name="name"
                                variant="outlined"
                                placeholder="Enter product name"
                                value={editedProduct.name}
                                onChange={handleInputChange}
                                margin="normal"
                                size="small"
                                style={{
                                    width: "40%",
                                    fontSize: "12px",
                                    position: "absolute",
                                    marginTop: "5px",
                                    marginLeft: "10px",
                                }}
                            />
                            <TextField
                                label="Product Price"
                                name="price"
                                variant="outlined"
                                placeholder="Enter product price"
                                value={editedProduct.price}
                                onChange={handleInputChange}
                                margin="normal"
                                size="small"
                                style={{
                                    width: "40%",
                                    fontSize: "12px",
                                    marginTop: "50px",
                                    position: "absolute",
                                    marginLeft: "10px",
                                }}
                            />
                            <Button
                                variant="contained"
                                color="primary"
                                style={{
                                    borderRadius: "15px",
                                    width: "80%",
                                    marginTop: "100px",
                                    marginLeft: "10px",
                                }}
                                onClick={handleAdd}
                            >
                                Add
                            </Button>
                        </div>
                    </div>
                </div>
            ) : (
                <div>{ }</div>
            )}

            {/* Display products */}
            <div style={{ maxHeight: "300px", display: "flex", flexWrap: "wrap", justifyContent: "space-between", overflow: "auto", position: "relative" }}>
                {products.map((product, index) => (
                    <div key={product.productId} style={{ marginBottom: "20px", width: "48%", position: "relative" }}>
                        <img
                            src={`data:image/png;base64,${product.image}`}
                            alt={`Product ${index + 1}`}
                            style={{ width: "100%", height: "150px", border: "1px solid black", borderRadius: "15px" }}
                        />
                        <p style={{ position: "absolute", top: "1px", left: "49%", width: "100%", transform: "translateX(-50%)", paddingLeft: "10px", paddingRight: "5px", color: "white", fontSize: "16px", fontWeight: "bold", backgroundColor: "rgba(136, 170, 204, 0.7)", borderRadius: "15px" }}>
                            {product.name}
                        </p>
                        <p style={{ position: "absolute", bottom: "1px", left: "3%", textAlign: "left", color: "black", fontSize: "14px", fontWeight: "bold", backgroundColor: "#c0d8f0", paddingLeft: "10px", paddingRight: "5px", borderRadius: "10px" }}>
                            ₱ {product.price}
                        </p>
                    </div>
                ))}
            </div>

            {/* Save/Edit button */}
            <div className="flex mt-4 absolute bottom-8 w-full">
                {editMode ? (
                    <Button
                        variant="contained"
                        color="primary"
                        style={{ borderRadius: "15px", width: "90%" }}
                        onClick={handleSave}
                    >
                        Save
                    </Button>
                ) : (
                    <Button
                        variant="contained"
                        color="primary"
                        style={{ borderRadius: "15px", width: "90%" }}
                        onClick={handleEdit}
                    >
                        Edit Store and Products
                    </Button>
                )}
            </div>
        </div>
    );
};

export default ManageStore;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\pages\Report.jsx:
```
import React, { useState, useContext, useRef } from "react";
import NavigationBar from "../components/NavigationBar";
import { UserContext } from "../UserContext";
import axios from "axios";
import reportBg from "../assets/images/reportpng.png";
import { Alert } from "../assets/styles/styles.js";

const Report = () => {
  const { user } = useContext(UserContext);
  const reportRef = useRef();
  const [showAlert, setShowAlert] = useState(false);
  const [alertMessage, setAlertMessage] = useState("");
  console.log(user);

  const handleSubmitReport = async (e) => {
    e.preventDefault();

    const messageContent = reportRef.current.querySelector('textarea[name="message"]').value;

    if (!messageContent.trim()) {
      alert("Please enter a message before submitting the report");
      return;
    }

    const reportData = {
      senderId: user.account,
      messageContent: messageContent,
      timestamp: new Date(),
    };

    try {
      const response = await axios.post(`http://localhost:8080/api/createReport`, reportData);
      console.log(response.data);

      setAlertMessage("Report created successfully!");
      setShowAlert(true);

      reportRef.current.reset();
    } catch (error) {
      console.log(error);
      alert("Report creation failed");
    }
  };

  return (
    <div className="w-full h-screen bg-stroke-bg bg-center bg-no-repeat bg-cover font-custom flex flex-col items-center">
      <NavigationBar />
      <div className="my-auto bg-blue-500 w-1/2 h-3/10 rounded-2xl shadow-2xl">
        <div className="h-full flex">
          <div className="my-auto w-2/3 h-full bg-white px-14 py-20 flex flex-col justify-center">
            <h1 className="text-5xl font-bold mb-10">Submit a report</h1>
            <p className="text-xl mb-5">Details of the report</p>
            <form ref={reportRef} onSubmit={handleSubmitReport} className="flex flex-col text-left">
              <textarea
                name="message"
                placeholder="Message"
                rows="5"
                className="p-4 mb-5 border-b border-dark"
              />
              <input
                type="submit"
                value="Submit"
                className="w-1/3 bg-blue-500 rounded-3xl text-white p-2 text-lg font-semibolds"
              />
            </form>
          </div>
          <img src={reportBg} alt="Report bg" className="col-span-1" />
        </div>
      </div>
      {showAlert && (
        <Alert onClose={() => setShowAlert(false)} severity="success" sx={{ width: "100%" }}>
          {alertMessage}
        </Alert>
      )}
    </div>
  );
};

export default Report;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\pages\Services.jsx:
```
import React from "react";
import NavigationBar from "../components/NavigationBar";

import { services } from "../data/dummy";

const Services = () => {
  return (
    <div className="w-full h-screen bg-slate-50 font-custom">
      <NavigationBar />
      <div className="w-full font-custom text-center p-10 flex flex-col items-center justify-center gap-5">
        <div>
          <h1 className="font-bold text-5xl">
            OUR <span className="text-primary">SERVICE</span>
          </h1>
          <p className="text-slate-500 pt-3">
            The app uses realtime geolocation to show the users' locations on a
            <br />
            map and allows them to chat and transact with each other.
          </p>
        </div>

        <div className="flex gap-1 items-center ">
          <div className="w-12 h-[3px] bg-primary"></div>
          <div className="w-5 h-3 bg-primary"></div>
          <div className="w-12 h-[3px] bg-primary"></div>
        </div>
      </div>

      <div className="grid grid-cols-3 gap-5 items-center justify-center p-10 bg-red w-full">
        {services.map((service, index) => (
          <div
            className="flex flex-col items-center bg-white p-10 rounded-lg text-center shadow-md"
            key={index}
          >
            <div className="bg-slate-100 rounded-full p-2">
              <img
                src={service.logo}
                className="w-12 h-12 rounded-full"
                alt="Service Logo"
              />
            </div>
            <h2 className="font-semibold text-2xl mt-5 mb-4">
              {service.title}
            </h2>
            <p className="text-slate-500">{service.description}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Services;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\pages\Signin.jsx:
```
import React, { useState, useEffect, useContext } from "react";
import { Link, useHistory } from "react-router-dom";
import axios from "axios";

import logo from "../assets/images/logo.png";
import CustomInput from "../components/CustomInput";
import CustomButton from "../components/CustomButton";
import { UserContext } from "../UserContext";

const Signin = () => {
  const history = useHistory();
  const { setUser } = useContext(UserContext);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [userData, setUserData] = useState([]);
  const [loading, setLoading] = useState(true);

  const handleEmailChange = (e) => {
    setEmail(e.target.value);
  };

  const handlePasswordChange = (e) => {
    setPassword(e.target.value);
  };

  const fetchUserData = () => {
    axios
      .get("http://localhost:8080/api/getAllUsers")
      .then((response) => {
        setUserData(response.data);
        setLoading(false);
      })
      .catch((error) => {
        alert("Error fetching data:", error);
        setLoading(false);
      });
  };

  useEffect(() => {
    fetchUserData();
  }, []);

  const handleLogin = (e) => {
    e.preventDefault();

    const user = userData.find(
      (user) =>
        user.account.email === email && user.account.password === password
    );

    console.log("Ako si user", user);

    if (user) {
      console.log("Current user: ", user);
      setUser(user);

      history.push("/home");
    } else {
      setError("Invalid email or password");
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div className="w-full h-screen bg-stroke-bg bg-center bg-no-repeat bg-cover font-custom ">
      <div className="w-[500px] m-auto">
        <div className="w-full flex items-center justify-center">
          <img
            src={logo}
            alt="Palit logo"
            className="w-[250px] h-[102px] mt-40"
          />
        </div>
        <h2 className="text-2xl font-bold text-grayy mt-8">Welcome!</h2>
        <p className="text-slate-500 mb-10">Log in to continue</p>

        <form onSubmit={handleLogin}>
          <div className="mt-4">
            <label>Email address</label>
            <CustomInput
              type="email"
              name="email"
              placeholder="yourname@gmail.com"
              value={email}
              onChange={handleEmailChange}
            />
          </div>
          <div className="mt-4">
            <label>Password</label>
            <CustomInput
              type="password"
              name="password"
              value={password}
              onChange={handlePasswordChange}
            />
          </div>
          <CustomButton
            btnStyle="w-full bg-primary p-3 text-white rounded-[20px] mt-10"
            label="Log In"
            type="submit"
          />
          {error && <div className="text-red-500 mt-2">{error}</div>}
        </form>
        <Link to="signup">
          <div className="text-center mt-4 pb-6">
            Don't have an account?
            <span className="text-primary underline cursor-pointer">
              {" "}
              Sign up
            </span>
          </div>
        </Link>
      </div>
    </div>
  );
};

export default Signin;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\pages\Signup.jsx:
```
import React, { useState } from "react";
import axios from "axios";
import moment from "moment";
import logo from "../assets/images/logo.png";
import { useHistory } from "react-router-dom";
import {
  useTheme,
  useMediaQuery,
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  Snackbar,
} from "@mui/material";
import { Alert } from "../assets/styles/styles.js";

function Signup() {
  const history = useHistory();
  const [imagePreview, setImagePreview] = useState(null);
  const [alert, setAlert] = useState("");
  const [isImageEmpty, setIsImageEmpty] = useState(false);
  const [isPasswordValid, setIsPasswordValid] = useState(true);
  const [success, setSuccess] = useState(false);
  const [confirm, setConfirm] = useState(false);
  const [error, setError] = useState(false);
  const theme = useTheme();
  const fullScreen = useMediaQuery(theme.breakpoints.down("md"));
  const [userData, setUserData] = useState({
    firstName: "",
    lastName: "",
    email: "",
    password: "",
    userType: "",
    storeName: "",
    description: "",
    category: "",
    birthdate: "",
    image: "",
    lng: 0,
    lat: 0,
  });

  const handleImageChange = (e) => {
    setUserData({
      ...userData,
      image: e.target.files[0],
    });
    setImagePreview(
      e.target.files[0] ? URL.createObjectURL(e.target.files[0]) : null
    );
  };

  const validatePassword = (password) => {
    const passwordRegex =
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
    return passwordRegex.test(password);
  };

  const handleChange = (e) => {
    setUserData({
      ...userData,
      [e.target.name]: e.target.value,
    });

    if (e.target.name === "password") {
      setIsPasswordValid(validatePassword(e.target.value));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    setIsImageEmpty(!userData.image);
    const age = moment().diff(moment(userData.birthdate), "years");
    if (age < 13) {
      setAlert("You must be at least 13 years old to sign up.");
      return;
    }

    if (!validatePassword(userData.password)) {
      setIsPasswordValid(false);
      setAlert("Password must meet the required criteria.");
      return;
    }

    if (userData.image && isPasswordValid && age >= 13) {
      setConfirm(true);
    }
  };

  const handleConfirm = async () => {
    try {
      const emailCheckResponse = await axios.post(
        "http://localhost:8080/api/isEmailTaken",
        {
          email: userData.email,
        }
      );

      if (emailCheckResponse.data.exists) {
        setAlert("Email already exists. Please use a different email.");
        return;
      }

      const locationResponse = await axios.post(
        "http://localhost:8080/api/createLocation",
        {
          latitude: userData.lat,
          longitude: userData.lng,
        }
      );

      let storeResponse = null;
      if (userData.userType === "vendor") {
        storeResponse = await axios.post(
          "http://localhost:8080/api/createStore",
          {
            storeName: userData.storeName,
            description: userData.description,
            category: userData.category,
          }
        );
      }

      const accountResponse = await axios.post(
        "http://localhost:8080/api/createAccount",
        {
          email: userData.email,
          password: userData.password,
          isVendor: userData.userType === "vendor",
          isAdmin: false,
          location: locationResponse.data,
          store: storeResponse ? storeResponse.data : null,
        }
      );

      function convertToBase64(file) {
        return new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.readAsDataURL(file);
          reader.onload = () => resolve(reader.result.split(",")[1]);
          reader.onerror = (error) => reject(error);
        });
      }

      const imageBase64 = await convertToBase64(userData.image);
      const user = {
        firstName: userData.firstName,
        lastName: userData.lastName,
        birthDate: userData.birthdate,
        image: imageBase64,
        account: accountResponse.data,
      };

      const userResponse = await axios.post(
        "http://localhost:8080/api/createUser",
        user
      );

      setSuccess(true);
      setTimeout(() => {
        setSuccess(null);
        history.push("/signin");
      }, 3000);
    } catch (error) {
      console.error(error);
      setError(true);
      setConfirm(false);
    }
  };

  const handleCancel = () => {
    setConfirm(false);
  };

  return (
    <div className="w-full h-screen pb-10 bg-stroke-bg bg-center bg-no-repeat bg-cover font-custom">
      <div className="w-full flex items-center justify-center ">
        <img src={logo} alt="Palit logo" className="w-[250px] h-[102px] mt-5" />
      </div>
      <div className="w-[500px] m-auto">
        <form onSubmit={handleSubmit} className="mt-8">
          <div className="mt-4 text-center">
            <label className="w-[90px] h-[90px] flex justify-center items-center bg-primary rounded-[20px] cursor-pointer mx-auto">
              <input
                name="image"
                type="file"
                accept="image/*"
                onChange={handleImageChange}
                className="hidden"
              />
              {imagePreview ? (
                <img
                  src={imagePreview}
                  alt="Preview"
                  className="w-[90px] h-[90px] rounded-[20px]"
                />
              ) : (
                <span className="text-5xl font-semibold` text-white">+</span>
              )}
            </label>
            {isImageEmpty && <p className="text-red-500">Image is required</p>}
          </div>
          <div className="mt-4 flex">
            <div className="mr-2 w-full">
              <input
                name="firstName"
                onChange={handleChange}
                placeholder="First Name"
                required
                className="rounded-[20px] p-3 mt-1 text-grayy font-custom border border-grayy w-full"
              />
            </div>
            <div className="w-full">
              <input
                name="lastName"
                onChange={handleChange}
                placeholder="Last Name"
                required
                className="rounded-[20px] p-3 mt-1 text-grayy font-custom border border-grayy w-full"
              />
            </div>
          </div>
          <div className="mt-4">
            <input
              // type="email"
              name="email"
              onChange={handleChange}
              placeholder="Email"
              required
              className="w-full rounded-[20px] p-3 mt-1 text-grayy font-custom border border-grayy"
            />
          </div>
          <div className="mt-4">
            <input
              name="password"
              onChange={handleChange}
              placeholder="Password"
              required
              type="password"
              className="w-full rounded-[20px] p-3 mt-1 text-grayy font-custom border border-grayy"
            />
            {!isPasswordValid && (
              <p className="text-red-500">
                Password must be at least 8 characters, include an uppercase and
                lowercase letter, a number, and a special character.
              </p>
            )}
          </div>
          <div className="mt-4">
            <input
              name="birthdate"
              type="date"
              onChange={handleChange}
              placeholder="Birthdate"
              required
              className="w-full rounded-[20px] p-3 mt-1 text-gray-400 font-custom border border-grayy"
            />
          </div>
          <div className="mt-4">
            <select
              name="userType"
              onChange={handleChange}
              required
              className="w-full rounded-[20px] p-3 mt-1 text-gray-400 font-custom border border-grayy"
            >
              <option value="">Select user type</option>
              <option value="customer">Customer</option>
              <option value="vendor">Vendor</option>
            </select>
          </div>

          {userData.userType === "vendor" && (
            <>
              <div className="mt-4">
                <input
                  name="storeName"
                  onChange={handleChange}
                  placeholder="Store Name"
                  required
                  className="w-full rounded-[20px] p-3 mt-1 text-grayy font-custom border border-grayy"
                />
              </div>
              <div className="mt-4">
                <input
                  name="description"
                  onChange={handleChange}
                  placeholder="Description"
                  required
                  className="w-full rounded-[20px] p-3 mt-1 text-grayy font-custom border-gray"
                />
              </div>
              <div className="mt-4">
                <select
                  name="category"
                  onChange={handleChange}
                  placeholder="Category"
                  required
                  className="w-full rounded-[20px] p-3 mt-1 text-grayy font-custom border border-grayy"
                >
                  <option value="">Select category</option>
                  <option value="fish">Fish</option>
                  <option value="fruits">Fruits</option>
                  <option value="assorted">Assorted</option>
                  <option value="manicure">Manicure</option>
                </select>
              </div>
            </>
          )}
          <p className="text-center mt-4 text-red-600">{alert}</p>
          <button
            type="submit"
            className="w-full bg-primary p-3 text-white rounded-[20px] mt-10"
          >
            Sign Up
          </button>
        </form>
      </div>

      {confirm && (
        <div
          className="fixed top-0 left-0 w-full h-full flex justify-center items-center bg-black bg-opacity-50
                      "
        >
          <React.Fragment>
            <Dialog
              fullScreen={fullScreen}
              open={confirm}
              onClose={handleCancel}
              aria-labelledby="responsive-dialog-title"
            >
              <DialogTitle id="responsive-dialog-title">
                {"Sign up confirmation"}
              </DialogTitle>
              <DialogContent>
                <DialogContentText>
                  Are you sure you want to become part of our community and
                  create an account?
                </DialogContentText>
              </DialogContent>
              <DialogActions>
                <Button
                  autoFocus
                  onClick={handleCancel}
                  style={{ backgroundColor: "#ccc", color: "#fff" }}
                >
                  Cancel
                </Button>
                <Button
                  onClick={handleConfirm}
                  style={{ backgroundColor: "#1976D2", color: "#fff" }}
                  autoFocus
                >
                  Confirm
                </Button>
              </DialogActions>
              {success && (
                <Snackbar
                  open={success}
                  autoHideDuration={6000}
                  onClose={() => false}
                >
                  <Alert
                    onClose={() => false}
                    severity="success"
                    sx={{ width: "100%" }}
                  >
                    Created account successfully!
                  </Alert>
                </Snackbar>
              )}
              {error && (
                <Snackbar
                  open={error}
                  autoHideDuration={6000}
                  onClose={() => false}
                >
                  <Alert
                    onClose={() => false}
                    severity="error"
                    sx={{ width: "100%" }}
                  >
                    Failed to create account. Please try again.
                  </Alert>
                </Snackbar>
              )}
            </Dialog>
          </React.Fragment>
        </div>
      )}
    </div>
  );
}

export default Signup;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\pages\Store.jsx:
```
import React, { useContext } from "react";
import { UserContext } from "../UserContext"; // Update the path based on your file structure

const Store = () => {
  // Access user data from the context
  const { user, setUser } = useContext(UserContext);

  // Now you can use the user data in your component
  // For example, display the user's name
  return <div>{user ? `Hello, ${user.name}!` : "Not logged in"}</div>;
};

export default Store;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\utils\functions.js:
```
import fruits from "../assets/images/fruits_categ.png";
import fish from "../assets/images/fish_categ.png";
import assorted from "../assets/images/assorted_categ.png";
import manicure from "../assets/images/manicure_categ.png";

const R = 6371;
const deg2rad = (deg) => deg * (Math.PI / 180);
export const getDistance = (lat1, lon1, lat2, lon2) => {
  const dLat = deg2rad(lat2 - lat1);
  const dLon = deg2rad(lon2 - lon1);
  const a =
    Math.sin(dLat / 2) ** 2 +
    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) ** 2;
  return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)) * 1000;
};

export const vendorIcons = (category) => {
  switch (category) {
    case "fruits":
      return fruits;
    case "fish":
      return fish;
    case "manicure":
      return manicure;
    case "assorted":
      return assorted;
    default:
      return fruits;
  }
};
```

