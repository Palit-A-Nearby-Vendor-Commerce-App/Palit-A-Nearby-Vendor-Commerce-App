
AccountEntity.java:
```
package com.nearbyvendor.palit.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import javax.persistence.*;
import java.util.List;
import java.util.Set;

@Entity
@Table(name = "tblAccount")
public class AccountEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer accountId;

    private String email;

    private String password;

    private boolean isVendor;

    private boolean isAdmin;

    private boolean isDeleted;

    @JsonIgnore
    @OneToOne(mappedBy = "account")
    private UserEntity user;

    @OneToOne
    @JoinColumn(name = "locationId", referencedColumnName = "locationId")
    private LocationEntity location;

    @OneToOne
    @JoinColumn(name = "storeId", referencedColumnName = "storeId")
    private StoreEntity store;
    
    @JsonIgnore
    @OneToMany(mappedBy = "customer")
    private Set<TransactionEntity> customerTransactions;

    @JsonIgnore
    @OneToMany(mappedBy = "account")
    private Set<ChatEntity> chats;

    @JsonIgnore
    @OneToMany(mappedBy = "customer")
    private Set<ConversationEntity> conversations;

    @JsonIgnore
    @OneToMany(mappedBy = "vendor")
    private Set<TransactionEntity> vendorTransactions;

    @JsonIgnore
    @OneToMany(mappedBy = "account")
    private List<ReportEntity> reports;

    public AccountEntity() {
    }

    public AccountEntity(int accountId, String email, String password, LocationEntity location, StoreEntity store,
                         boolean isVendor, boolean isAdmin) {
        this.accountId = accountId;
        this.email = email;
        this.password = password;
        this.location = location;
        this.store = store;
        this.isVendor = isVendor;
        this.isAdmin = isAdmin;
        this.isDeleted = false;
    }

    public Integer getAccountId() {
        return accountId;
    }

    public void setAccountId(Integer accountId) {
        this.accountId = accountId;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public boolean getIsVendor() {
        return isVendor;
    }

    public void setIsVendor(boolean isVendor) {
        this.isVendor = isVendor;
    }

    public boolean getIsAdmin() {
        return isAdmin;
    }

    public void setIsAdmin(boolean isAdmin) {
        this.isAdmin = isAdmin;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public UserEntity getUser() {
        return user;
    }

    public void setUser(UserEntity user) {
        this.user = user;
    }

    public LocationEntity getLocation() {
        return location;
    }

    public void setLocation(LocationEntity location) {
        this.location = location;
    }

    public StoreEntity getStore() {
        return store;
    }

    public void setStore(StoreEntity store) {
        this.store = store;
    }

    public Set<TransactionEntity> getCustomerTransactions() {
        return customerTransactions;
    }

    public void setCustomerTransactions(Set<TransactionEntity> customerTransactions) {
        this.customerTransactions = customerTransactions;
    }

    public Set<ChatEntity> getChats() {
        return chats;
    }

    public void setChats(Set<ChatEntity> chats) {
        this.chats = chats;
    }

    public Set<ConversationEntity> getConversations() {
        return conversations;
    }

    public void setConversations(Set<ConversationEntity> conversations) {
        this.conversations = conversations;
    }

    public Set<TransactionEntity> getVendorTransactions() {
        return vendorTransactions;
    }

    public void setVendorTransactions(Set<TransactionEntity> vendorTransactions) {
        this.vendorTransactions = vendorTransactions;
    }

    public List<ReportEntity> getReports() {
        return reports;
    }

    public void setReports(List<ReportEntity> reports) {
        this.reports = reports;
    }
}

```

ChatEntity.java:
```
package com.nearbyvendor.palit.entity;

import javax.persistence.*;
import java.sql.Timestamp;

@Entity
@Table(name = "tblChat")
public class ChatEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int chatId;

    @ManyToOne
    @JoinColumn(name = "senderId", referencedColumnName = "accountId")
    private AccountEntity account;

    private String messageContent;

    private Timestamp timestamp;

    @ManyToOne
    @JoinColumn(name = "conversationId", referencedColumnName = "conversationId")
    private ConversationEntity conversation;

    private boolean isDeleted;

    public ChatEntity() {
    }

    public ChatEntity(int chatId, AccountEntity account, String messageContent, Timestamp timestamp,
                      ConversationEntity conversation) {
        this.chatId = chatId;
        this.account = account;
        this.messageContent = messageContent;
        this.timestamp = timestamp;
        this.conversation = conversation;
        this.isDeleted = false;
    }

    public int getChatId() {
        return chatId;
    }

    public void setChatId(int chatId) {
        this.chatId = chatId;
    }

    public AccountEntity getAccount() {
        return account;
    }

    public void setAccount(AccountEntity account) {
        this.account = account;
    }

    public String getMessageContent() {
        return messageContent;
    }

    public void setMessageContent(String messageContent) {
        this.messageContent = messageContent;
    }

    public Timestamp getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Timestamp timestamp) {
        this.timestamp = timestamp;
    }

    public ConversationEntity getConversation() {
        return conversation;
    }

    public void setConversation(ConversationEntity conversation) {
        this.conversation = conversation;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }
}

```

ConversationEntity.java:
```
package com.nearbyvendor.palit.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import javax.persistence.*;
import java.util.Set;

@Entity
@Table(name = "tblConversation")
public class ConversationEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int conversationId;

    @ManyToOne
    @JoinColumn(name = "vendorAccountId", referencedColumnName = "accountId")
    private AccountEntity vendor;

    @ManyToOne
    @JoinColumn(name = "customerAccountId", referencedColumnName = "accountId")
    private AccountEntity customer;

    @JsonIgnore
    @OneToMany(mappedBy = "conversation")
    private Set<ChatEntity> chats;

    private boolean isDeleted;

    public ConversationEntity() {
    }

    public ConversationEntity(int conversationId, AccountEntity vendor, AccountEntity customer) {
        this.conversationId = conversationId;
        this.vendor = vendor;
        this.customer = customer;
        this.isDeleted = false;
    }

    public int getConversationId() {
        return conversationId;
    }

    public void setConversationId(int conversationId) {
        this.conversationId = conversationId;
    }

    public AccountEntity getVendor() {
        return vendor;
    }

    public void setVendor(AccountEntity vendor) {
        this.vendor = vendor;
    }

    public AccountEntity getCustomer() {
        return customer;
    }

    public void setCustomer(AccountEntity customer) {
        this.customer = customer;
    }

    public Set<ChatEntity> getChats() {
        return chats;
    }

    public void setChats(Set<ChatEntity> chats) {
        this.chats = chats;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }
}
```

LocationEntity.java:
```
package com.nearbyvendor.palit.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;

import javax.persistence.*;

@Entity
@Table(name = "tblLocation")
public class LocationEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int locationId;

    private double latitude;

    private double longitude;

    private boolean isDeleted;

    private boolean isActive;

    @JsonIgnore
    @OneToOne(mappedBy = "location")
    private AccountEntity account;

    public LocationEntity() {
    }

        public LocationEntity(int locationId, double latitude, double longitude, boolean isActive, AccountEntity account) {
            this.locationId = locationId;
            this.latitude = latitude;
            this.longitude = longitude;
            this.isActive = isActive;
            this.account = account;
            this.isDeleted = false;
        }

        public int getLocationId() {
            return locationId;
        }

        public void setLocationId(int locationId) {
            this.locationId = locationId;
        }

        public double getLatitude() {
            return latitude;
        }

        public void setLatitude(double latitude) {
            this.latitude = latitude;
        }

        public double getLongitude() {
            return longitude;
        }

        public void setLongitude(double longitude) {
            this.longitude = longitude;
        }

        public boolean getIsDeleted() {
            return isDeleted;
        }

        public void setIsDeleted(boolean isDeleted) {
            this.isDeleted = isDeleted;
        }

        public boolean getIsActive() {
            return isActive;
        }

        public void setIsActive(boolean isActive) {
            this.isActive = isActive;
        }

        public AccountEntity getAccount() {
            return account;
        }

        public void setAccount(AccountEntity account) {
            this.account = account;
        }
    }

```

ProductServiceEntity.java:
```
package com.nearbyvendor.palit.entity;

import javax.persistence.*;

@Entity
@Table(name = "tblProduct_service")
public class ProductServiceEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int productId;

    private String name;

    private double price;

    @Lob
    private byte[] image;

    private boolean isDeleted;

    @ManyToOne
    @JoinColumn(name = "storeId", referencedColumnName = "storeId")
    private StoreEntity store;

    public ProductServiceEntity() {
    }

    public ProductServiceEntity(String name, double price, byte[] image, StoreEntity store) {
        this.name = name;
        this.price = price;
        this.store = store;
        this.image = image;
        this.isDeleted = false;
    }

    public int getProductId() {
        return productId;
    }

    public void setProductId(int productId) {
        this.productId = productId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public byte[] getImage() {
        return image;
    }

    public void setImage(byte[] image) {
        this.image = image;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public StoreEntity getStore() {
        return store;
    }

    public void setStore(StoreEntity store) {
        this.store = store;
    }
}

```

ReportEntity.java:
```
package com.nearbyvendor.palit.entity;

import javax.persistence.*;
import java.sql.Timestamp;

@Entity
@Table(name = "tblReport")
public class ReportEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int reportId;

    @ManyToOne
    @JoinColumn(name = "senderId")
    private AccountEntity account;

    private String messageContent;

    private Timestamp timestamp;

    private boolean isResolved;

    private boolean isDeleted;

    public ReportEntity() {
    }

    public ReportEntity(AccountEntity account, String messageContent, Timestamp timestamp, boolean isResolved) {
        this.account = account;
        this.messageContent = messageContent;
        this.timestamp = timestamp;
        this.isResolved = isResolved;
        this.isDeleted = false;
    }

    public int getReportId() {
        return reportId;
    }

    public void setReportId(int reportId) {
        this.reportId = reportId;
    }

    public AccountEntity getSenderId() {
        return account;
    }

    public void setSenderId(AccountEntity account) {
        this.account = account;
    }

    public String getMessageContent() {
        return messageContent;
    }

    public void setMessageContent(String messageContent) {
        this.messageContent = messageContent;
    }

    public Timestamp getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Timestamp timestamp) {
        this.timestamp = timestamp;
    }

    public boolean getIsResolved() {
        return isResolved;
    }

    public void setIsResolved(boolean isResolved) {
        this.isResolved = isResolved;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public AccountEntity getAccount() {
        return account;
    }

    public void setAccount(AccountEntity account) {
        this.account = account;
    }
}

```

StoreEntity.java:
```
package com.nearbyvendor.palit.entity;

import java.util.List;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnore;

@Entity
@Table(name = "tblStore")
public class StoreEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int storeId;

    private String storeName;

    private String description;

    private String category;

    private boolean isDeleted;

    @JsonIgnore
    @OneToOne(mappedBy = "store")
    private AccountEntity account;

    @JsonIgnore
    @OneToMany(mappedBy = "store")
    private List<ProductServiceEntity> productServices;

    public StoreEntity() {

    }

    public StoreEntity(String storeName, String description, String category, AccountEntity account) {
        this.storeName = storeName;
        this.description = description;
        this.category = category;
        this.account = account;
        this.isDeleted = false;
    }

    public int getStoreId() {
        return storeId;
    }

    public void setStoreId(int storeId) {
        this.storeId = storeId;
    }

    public String getStoreName() {
        return storeName;
    }

    public void setStoreName(String storeName) {
        this.storeName = storeName;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public AccountEntity getAccount() {
        return account;
    }

    public void setAccount(AccountEntity account) {
        this.account = account;
    }

    public List<ProductServiceEntity> getProductServices() {
        return productServices;
    }

    public void setProductServices(List<ProductServiceEntity> productServices) {
        this.productServices = productServices;
    }
}

```

TransactionEntity.java:
```
package com.nearbyvendor.palit.entity;

import javax.persistence.*;

@Entity
@Table(name = "tblTransaction")
public class TransactionEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int transactionId;

    private String status;

    private boolean isDeleted;

    private String details; // Added string details

    @ManyToOne
    @JoinColumn(name = "accountCustomerId", referencedColumnName = "accountId")
    private AccountEntity customer;

    @ManyToOne
    @JoinColumn(name = "accountVendorId", referencedColumnName = "accountId")
    private AccountEntity vendor;

    public TransactionEntity() {
    }

    public TransactionEntity(AccountEntity customer, AccountEntity vendor, String status, String details) { // Updated constructor
        this.customer = customer;
        this.vendor = vendor;
        this.status = status;
        this.details = details;
        this.isDeleted = false;
    }

    public int getTransactionId() {
        return transactionId;
    }

    public void setTransactionId(int transactionId) {
        this.transactionId = transactionId;
    }

    public AccountEntity getAccountCustomerId() {
        return customer;
    }

    public void setAccountCustomerId(AccountEntity customer) {
        this.customer = customer;
    }

    public AccountEntity getAccountVendorId() {
        return vendor;
    }

    public void setAccountVendorId(AccountEntity vendor) {
        this.vendor = vendor;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public String getDetails() {
        return details;
    }

    public void setDetails(String details) {
        this.details = details;
    }

    public AccountEntity getCustomer() {
        return customer;
    }

    public void setCustomer(AccountEntity customer) {
        this.customer = customer;
    }

    public AccountEntity getVendor() {
        return vendor;
    }

    public void setVendor(AccountEntity vendor) {
        this.vendor = vendor;
    }
}
```

UserEntity.java:
```
package com.nearbyvendor.palit.entity;

import javax.persistence.*;
import java.util.Date;

@Entity
@Table(name = "tblUser")
public class UserEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int userId;

    private String firstName;

    private String lastName;

    @Temporal(TemporalType.DATE)
    private Date birthDate;

    private boolean isDeleted;

    @Lob
    private byte[] image;

    @OneToOne
    @JoinColumn(name = "accountId", referencedColumnName = "accountId")
    private AccountEntity account;

    public UserEntity() {
    }

    public UserEntity(int userId, String firstName, String lastName, Date birthDate, boolean isDeleted, byte[] image,
                      AccountEntity account) {
        this.userId = userId;
        this.firstName = firstName;
        this.lastName = lastName;
        this.birthDate = birthDate;
        this.isDeleted = isDeleted;
        this.image = image;
        this.account = account;
        this.isDeleted = false;
    }

    public UserEntity(int userId, String firstName, String lastName, Date birthDate, byte[] image,
                      AccountEntity account) {
        this.userId = userId;
        this.firstName = firstName;
        this.lastName = lastName;
        this.birthDate = birthDate;
        this.isDeleted = false;
        this.image = image;
    }

    public int getUserId() {
        return userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public Date getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(Date birthDate) {
        this.birthDate = birthDate;
    }

    public byte[] getImage() {
        return image;
    }

    public void setImage(byte[] image) {
        this.image = image;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public AccountEntity getAccount() {
        return this.account;
    }

    public void setAccount(AccountEntity account) {
        this.account = account;
    }

}

```

AccountService.java:
```
package com.nearbyvendor.palit.service;

import com.nearbyvendor.palit.entity.AccountEntity;
import com.nearbyvendor.palit.repository.AccountRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@Transactional
public class AccountService {

    @Autowired
    private AccountRepository accountRepository;

    public List<AccountEntity> getAllAccounts() {
        return accountRepository.findByIsDeletedFalse();
    }

    public AccountEntity getAccountById(int accountId) {
        AccountEntity account = accountRepository.findByAccountIdAndIsDeletedFalse(accountId);
        if (account == null) {

            System.err.println("Account not found with ID: " + accountId);
        }
        return account;
    }

    public AccountEntity createAccount(AccountEntity account) {
        return accountRepository.save(account);
    }

    public AccountEntity updateAccountById(int accountId, AccountEntity account) {
        AccountEntity existingAccount = accountRepository.findByAccountIdAndIsDeletedFalse(accountId);
        if (existingAccount != null) {
            existingAccount.setEmail(account.getEmail());
            existingAccount.setPassword(account.getPassword());
            existingAccount.setIsVendor(account.getIsVendor());
            existingAccount.setIsAdmin(account.getIsAdmin());
            existingAccount.setUser(account.getUser());
            existingAccount.setLocation(account.getLocation());
            existingAccount.setStore(account.getStore());
            return accountRepository.save(existingAccount);
        } else {
            System.err.println("Invalid account ID for update: " + accountId);
            throw new RuntimeException("Invalid account ID for update: " + accountId);
        }
    }

    public boolean deleteAccountById(int accountId) {
        AccountEntity existingAccount = accountRepository.findByAccountIdAndIsDeletedFalse(accountId);
        if (existingAccount != null) {
            existingAccount.setIsDeleted(true);
            accountRepository.save(existingAccount);
            return true;
        } else {
            System.err.println("Invalid account ID for deletion: " + accountId);
            return false;
        }
    }

    public boolean checkEmail(AccountEntity account) {

        List<AccountEntity> accounts = getAllAccounts();

        for (AccountEntity a : accounts) {

            if (a.getEmail().equals(account.getEmail())) {

                System.err.println("Email already exists: " + account.getEmail());
                return true;
            }
        }
        return false;
    }

    public List<AccountEntity> getAllAdminAccounts() {
        return accountRepository.findByIsAdminAndIsDeletedFalse(true);
    }
}

```

ChatService.java:
```
package com.nearbyvendor.palit.service;

import com.nearbyvendor.palit.entity.ChatEntity;
import com.nearbyvendor.palit.repository.ChatRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
@Transactional
public class ChatService {

    @Autowired
    private ChatRepository chatRepository;

    public List<ChatEntity> getAllChats() {
        return chatRepository.findAllByIsDeletedFalse();
    }

    public List<ChatEntity> getChatsByConversationId(int conversationId) {
        return chatRepository.findByConversation_ConversationIdAndIsDeletedFalse(conversationId);
    }

    public ChatEntity getChatById(int chatId) {
        Optional<ChatEntity> chatOptional = chatRepository.findByChatIdAndIsDeletedFalse(chatId);
        if (chatOptional.isPresent()) {
            return chatOptional.get();
        } else {
            System.err.println("ChatEntity not found with id: " + chatId);
            throw new RuntimeException("ChatEntity not found with id: " + chatId);
        }
    }

    public ChatEntity createChat(ChatEntity chat) {
        return chatRepository.save(chat);
    }

    public ChatEntity updateChatById(int chatId, ChatEntity chat) {
        Optional<ChatEntity> chatOptional = chatRepository.findByChatIdAndIsDeletedFalse(chatId);
        if (chatOptional.isPresent()) {
            ChatEntity existingChat = chatOptional.get();
            existingChat.setAccount(chat.getAccount());
            existingChat.setMessageContent(chat.getMessageContent());
            existingChat.setTimestamp(chat.getTimestamp());
            existingChat.setConversation(chat.getConversation());
            return chatRepository.save(existingChat);
        } else {
            System.err.println("ChatEntity not found with id: " + chatId);
            throw new RuntimeException("ChatEntity not found with id: " + chatId);
        }
    }

    public boolean deleteChatById(int chatId) {
        Optional<ChatEntity> chatOptional = chatRepository.findByChatIdAndIsDeletedFalse(chatId);
        if (chatOptional.isPresent()) {
            ChatEntity chat = chatOptional.get();
            chat.setIsDeleted(true);
            chatRepository.save(chat);
            return true;
        } else {

            System.err.println("ChatEntity not found with id: " + chatId);
            throw new RuntimeException("ChatEntity not found with id: " + chatId);
        }
    }
}

```

ConversationService.java:
```
package com.nearbyvendor.palit.service;

import com.nearbyvendor.palit.entity.ConversationEntity;
import com.nearbyvendor.palit.repository.ConversationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
@Transactional
public class ConversationService {

    @Autowired
    private ConversationRepository conversationRepository;

    public List<ConversationEntity> getAllConversations() {
        return conversationRepository.findByIsDeletedFalse();
    }

    public ConversationEntity getConversationById(int id) {
        Optional<ConversationEntity> conversation = conversationRepository.findByConversationIdAndIsDeletedFalse(id);
        if (conversation.isPresent()) {
            return conversation.get();
        } else {

            System.err.println("ConversationEntity not found with id: " + id);
            throw new RuntimeException("ConversationEntity not found with id: " + id);
        }
    }

    public ConversationEntity createConversation(ConversationEntity conversation) {
        return conversationRepository.save(conversation);
    }

    public ConversationEntity updateConversationById(int id, ConversationEntity conversation) {
        Optional<ConversationEntity> existingConversation = conversationRepository
                .findByConversationIdAndIsDeletedFalse(id);
        if (existingConversation.isPresent()) {
            existingConversation.get().setVendor(conversation.getVendor());
            existingConversation.get().setCustomer(conversation.getCustomer());
            return conversationRepository.save(existingConversation.get());
        } else {
            System.err.println("ConversationEntity not found with id: " + id);
            throw new RuntimeException("ConversationEntity not found with id: " + id);
        }
    }

    public boolean deleteConversationById(int id) {
        Optional<ConversationEntity> conversation = conversationRepository.findByConversationIdAndIsDeletedFalse(id);
        if (conversation.isPresent()) {
            conversation.get().setIsDeleted(true);
            conversationRepository.save(conversation.get());
            return true;
        } else {
            System.err.println("ConversationEntity not found with id: " + id);
            throw new RuntimeException("ConversationEntity not found with id: " + id);
        }
    }
    
    public ConversationEntity getConversationByParticipants(int vendorAccountId, int customerAccountId) {
        Optional<ConversationEntity> conversation = conversationRepository.findByVendor_AccountIdAndCustomer_AccountIdAndIsDeletedFalse(vendorAccountId, customerAccountId);
        return conversation.orElse(null);
    }
}

```

LocationService.java:
```
package com.nearbyvendor.palit.service;

import com.nearbyvendor.palit.entity.LocationEntity;
import com.nearbyvendor.palit.repository.LocationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@Transactional
public class LocationService {

    @Autowired
    private LocationRepository locationRepository;
    public List<LocationEntity> getAllLocations() {
        return locationRepository.findByIsDeletedFalse();
    }

    public LocationEntity getLocationById(int id) {
        LocationEntity location = locationRepository.findByLocationIdAndIsDeletedFalse(id);
        if (location != null) {
            return location;
        } else {
            System.err.println("LocationEntity not found with id: " + id);
            throw new RuntimeException("LocationEntity not found with id: " + id);
        }
    }

    public LocationEntity createLocation(LocationEntity location) {
        return locationRepository.save(location);
    }

    public LocationEntity updateLocationById(int id, LocationEntity location) {
        LocationEntity existingLocation = locationRepository.findByLocationIdAndIsDeletedFalse(id);

        if (existingLocation != null) {
            existingLocation.setIsActive(location.getIsActive());
            existingLocation.setLatitude(location.getLatitude());
            existingLocation.setLongitude(location.getLongitude());
            existingLocation.setAccount(location.getAccount());
            return locationRepository.save(existingLocation);
        } else {
            System.err.println("LocationEntity not found with id: " + id);
            throw new RuntimeException("LocationEntity not found with id: " + id);
        }
    }

    public boolean deleteLocationById(int id) {
        LocationEntity location = locationRepository.findByLocationIdAndIsDeletedFalse(id);
        if (location != null) {
            location.setIsDeleted(true);
            locationRepository.save(location);
            return true;
        } else {
            System.err.println("LocationEntity not found with id: " + id);
            throw new RuntimeException("LocationEntity not found with id: " + id);
        }
    }
}

```

ProductServiceService.java:
```
package com.nearbyvendor.palit.service;

import com.nearbyvendor.palit.entity.ProductServiceEntity;
import com.nearbyvendor.palit.repository.ProductServiceRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
@Transactional
public class ProductServiceService {

    @Autowired
    private ProductServiceRepository productServiceRepository;
    public List<ProductServiceEntity> getAllProductServices() {
        return productServiceRepository.findByIsDeletedFalse();
    }

    public ProductServiceEntity getProductServiceById(int id) {
        Optional<ProductServiceEntity> productService = productServiceRepository.findByProductIdAndIsDeletedFalse(id);
        if (productService.isPresent()) {
            return productService.get();
        } else {
            System.err.println("Product service not found with id: " + id);
            throw new RuntimeException("Product service not found with id: " + id);
        }
    }

    public List<ProductServiceEntity> getProductServicesByStoreId(int storeId) {
        return productServiceRepository.findByStore_StoreIdAndIsDeletedFalse(storeId);
    }

    public ProductServiceEntity createProductService(ProductServiceEntity productService) {
        return productServiceRepository.save(productService);
    }

    public ProductServiceEntity updateProductServiceById(int id, ProductServiceEntity productService) {
        Optional<ProductServiceEntity> existingProductService = productServiceRepository
                .findByProductIdAndIsDeletedFalse(id);

        if (existingProductService.isPresent()) {
            existingProductService.get().setName(productService.getName());
            existingProductService.get().setPrice(productService.getPrice());
            existingProductService.get().setImage(productService.getImage());
            existingProductService.get().setStore(productService.getStore());
            return productServiceRepository.save(existingProductService.get());
        } else {
            System.err.println("Product service not found with id: " + id);
            throw new RuntimeException("Product service not found with id: " + id);
        }
    }

    public boolean deleteProductServiceById(int id) {
        Optional<ProductServiceEntity> existingProductService = productServiceRepository
                .findByProductIdAndIsDeletedFalse(id);
        if (existingProductService.isPresent()) {
            existingProductService.get().setIsDeleted(true);
            productServiceRepository.save(existingProductService.get());
            return true;
        } else {
            System.err.println("Product service not found with id: " + id);
            throw new RuntimeException("Product service not found with id: " + id);
        }
    }
}

```

ReportService.java:
```
package com.nearbyvendor.palit.service;

import com.nearbyvendor.palit.entity.ReportEntity;
import com.nearbyvendor.palit.repository.ReportRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@Transactional
public class ReportService {

    @Autowired
    private ReportRepository reportRepository;

    public List<ReportEntity> getAllReports() {
        return reportRepository.findAllByIsDeletedFalse();
    }

    public ReportEntity getReportById(int id) {
        ReportEntity report = reportRepository.findByReportIdAndIsDeletedFalse(id);
        if (report != null) {
            return report;
        } else {

            System.err.println("ReportEntity not found with id: " + id);
            throw new RuntimeException("ReportEntity not found with id: " + id);
        }
    }

    public ReportEntity createReport(ReportEntity report) {
        return reportRepository.save(report);
    }

    public ReportEntity updateReportById(int id, ReportEntity report) {
        ReportEntity existingReport = reportRepository.findByReportIdAndIsDeletedFalse(id);
        if (existingReport != null) {
            existingReport.setAccount(report.getAccount());
            existingReport.setMessageContent(report.getMessageContent());
            existingReport.setTimestamp(report.getTimestamp());
            existingReport.setIsResolved(report.getIsResolved());
            return reportRepository.save(existingReport);
        } else {
            System.err.println("Invalid report ID for updating: " + id);
            throw new IllegalArgumentException("Invalid report ID");
        }
    }

    public boolean deleteReportById(int id) {
        ReportEntity existingReport = reportRepository.findByReportIdAndIsDeletedFalse(id);
        if (existingReport != null) {
            existingReport.setIsDeleted(true);
            reportRepository.save(existingReport);
            return true;
        } else {
            System.err.println("Invalid report ID for deletion: " + id);
            throw new IllegalArgumentException("Invalid report ID");
        }
    }
}

```

StoreService.java:
```
package com.nearbyvendor.palit.service;

import com.nearbyvendor.palit.entity.StoreEntity;
import com.nearbyvendor.palit.repository.StoreRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@Transactional
public class StoreService {

    @Autowired
    private StoreRepository storeRepository;

    public List<StoreEntity> getAllStores() {
        return storeRepository.findAllByIsDeletedFalse();
    }

    public StoreEntity getStoreById(int storeId) {
        StoreEntity store = storeRepository.findByStoreIdAndIsDeletedFalse(storeId);
        if (store != null) {
            return store;
        } else {

            System.err.println("StoreEntity not found with id: " + storeId);
            throw new RuntimeException("StoreEntity not found with id: " + storeId);
        }
    }

    public StoreEntity createStore(StoreEntity store) {
        return storeRepository.save(store);
    }

    public StoreEntity updateStoreById(int storeId, StoreEntity store) {
        StoreEntity existingStore = storeRepository.findByStoreIdAndIsDeletedFalse(storeId);
        if (existingStore != null) {
            existingStore.setStoreName(store.getStoreName());
            existingStore.setDescription(store.getDescription());
            existingStore.setCategory(store.getCategory());
            existingStore.setAccount(store.getAccount());
            return storeRepository.save(existingStore);
        } else {
            System.err.println("Invalid store ID for updating: " + storeId);
            throw new IllegalArgumentException("Invalid store ID");
        }
    }

    public boolean deleteStoreById(int storeId) {
        StoreEntity existingStore = storeRepository.findByStoreIdAndIsDeletedFalse(storeId);
        if (existingStore != null) {
            existingStore.setIsDeleted(true);
            storeRepository.save(existingStore);
            return true;
        } else {
            System.err.println("Invalid store ID for deletion: " + storeId);
            throw new IllegalArgumentException("Invalid store ID");
        }
    }
}

```

TransactionService.java:
```
package com.nearbyvendor.palit.service;

import com.nearbyvendor.palit.entity.TransactionEntity;
import com.nearbyvendor.palit.repository.TransactionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@Transactional
public class TransactionService {

    @Autowired
    private TransactionRepository transactionRepository;

    public List<TransactionEntity> getAllTransactions() {
        return transactionRepository.findAllByIsDeletedFalse();
    }

    public TransactionEntity getTransactionById(int id) {
        TransactionEntity transaction = transactionRepository.findByTransactionIdAndIsDeletedFalse(id);
        if (transaction != null) {
            return transaction;
        } else {
            System.err.println("TransactionEntity not found with id: " + id);
            throw new RuntimeException("TransactionEntity not found with id: " + id);
        }
    }

    public TransactionEntity createTransaction(TransactionEntity transaction) {
        return transactionRepository.save(transaction);
    }

    public TransactionEntity updateTransactionById(int id, TransactionEntity transaction) {
        TransactionEntity existingTransaction = transactionRepository.findByTransactionIdAndIsDeletedFalse(id);
        if (existingTransaction != null) {
            existingTransaction.setCustomer(transaction.getCustomer());
            existingTransaction.setVendor(transaction.getVendor());
            existingTransaction.setStatus(transaction.getStatus());
            existingTransaction.setDetails(transaction.getDetails());
            return transactionRepository.save(existingTransaction);
        } else {
            System.err.println("Invalid transaction ID for updating: " + id);
            throw new IllegalArgumentException("Invalid transaction ID");
        }
    }

    public boolean deleteTransactionById(int id) {
        TransactionEntity existingTransaction = transactionRepository.findByTransactionIdAndIsDeletedFalse(id);
        if (existingTransaction != null) {
            existingTransaction.setIsDeleted(true);
            transactionRepository.save(existingTransaction);
            return true;
        } else {
            System.err.println("Invalid transaction ID for deletion: " + id);
            throw new IllegalArgumentException("Invalid transaction ID");
        }
    }
}

```

UserService.java:
```
package com.nearbyvendor.palit.service;

import com.nearbyvendor.palit.entity.UserEntity;
import com.nearbyvendor.palit.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@Transactional
public class UserService {

    @Autowired
    private UserRepository userRepository;

    public List<UserEntity> getAllUsers() {
        return userRepository.findByIsDeletedFalse();
    }

    public UserEntity getUserById(int id) {
        UserEntity user = userRepository.findByUserIdAndIsDeletedFalse(id);
        if (user != null) {
            return user;
        } else {
            System.err.println("UserEntity not found with id: " + id);
            throw new RuntimeException("UserEntity not found with id: " + id);
        }
    }

    public UserEntity createUser(UserEntity newUserEntity) {
        return userRepository.save(newUserEntity);
    }

    public UserEntity updateUserById(int id, UserEntity updatedUserEntity) {

        UserEntity user = userRepository.findByUserIdAndIsDeletedFalse(id);
        if (user != null) {
            user.setFirstName(updatedUserEntity.getFirstName());
            user.setLastName(updatedUserEntity.getLastName());
            user.setBirthDate(updatedUserEntity.getBirthDate());
            user.setImage(updatedUserEntity.getImage());
            user.setAccount(updatedUserEntity.getAccount());
            userRepository.save(user);
            return user;
        } else {
            System.err.println("Invalid user ID for update: " + id);
            throw new IllegalArgumentException("Invalid user ID");
        }
    }

    public boolean deleteUserById(int id) {
        UserEntity user = userRepository.findByUserIdAndIsDeletedFalse(id);
        if (user != null) {
            user.setIsDeleted(true);
            userRepository.save(user);
            return true;
        } else {
            System.err.println("Invalid user ID for deletion: " + id);
            throw new IllegalArgumentException("Invalid user ID");
        }
    }
}

```
