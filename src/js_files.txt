d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\App.js:
```
import React from "react";
import { BrowserRouter, Route, Switch } from "react-router-dom";
import { UserProvider } from "./UserContext";

import Admin from "./Admin/Admin";
import "./App.css";
import Aboutus from "./pages/Aboutus";
import Contact from "./pages/Contact";
import Home from "./pages/Home";
import Landing from "./pages/Landing";
import Services from "./pages/Services";
import Signin from "./pages/Signin";
import Signup from "./pages/Signup";
import Chat from "./pages/Chat";
import Store from "./pages/Store";
import Report from "./pages/Report";

import AdminDashboard from "./components/AdminDashboard";
// import Dashboard from "./Admin/Dashboard";

function App() {
  return (
    <UserProvider>
      <BrowserRouter>
        <Switch>
          <Route path="/landing" exact component={Landing} />
          <Route path="/signup" exact component={Signup} />
          <Route path="/signin" exact component={Signin} />
          <Route path="/aboutus" exact component={Aboutus} />
          <Route path="/contactus" exact component={Contact} />
          <Route path="/services" exact component={Services} />
          <Route path="/store" exact component={Store} />
          <Route path="/report" exact component={Report} />
          <Route path="/home" exact component={Home} />
          <Route path="/chat" exact component={Chat} />

          <Route path="/adminlogin3x8Yz7!qA" exact component={Admin} />
          <Route
            path="/admindashboard/dashboard"
            exact
            component={AdminDashboard}
          />

          <Route
            path="/admindashboard/statistics"
            exact
            component={AdminDashboard}
          />

          <Route
            path="/admindashboard/reports"
            exact
            component={AdminDashboard}
          />
          <Route
            path="/admindashboard/users"
            exact
            component={AdminDashboard}
          />
          <Route
            path="/admindashboard/accounts"
            exact
            component={AdminDashboard}
          />
          <Route
            path="/admindashboard/stores"
            exact
            component={AdminDashboard}
          />
          <Route
            path="/admindashboard/transactions"
            exact
            component={AdminDashboard}
          />
          <Route
            path="/admindashboard/products"
            exact
            component={AdminDashboard}
          />

          <Route component={Landing} />
        </Switch>
      </BrowserRouter>
    </UserProvider>
  );
}

export default App;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\App.test.js:
```
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\index.js:
```
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

reportWebVitals();
```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\reportWebVitals.js:
```
const reportWebVitals = (onPerfEntry) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\service-worker.js:
```
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\serviceWorkerRegistration.js:
```
// This optional code is used to register a service worker.
// register() is not called by default.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on subsequent visits to a page, after all the
// existing tabs open on the page have been closed, since previously cached
// resources are updated in the background.

// To learn more about the benefits of this model and instructions on how to
// opt-in, read https://cra.link/PWA

const isLocalhost = Boolean(
  window.location.hostname === 'localhost' ||
    // [::1] is the IPv6 localhost address.
    window.location.hostname === '[::1]' ||
    // 127.0.0.0/8 are considered localhost for IPv4.
    window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)
);

export function register(config) {
  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
    // The URL constructor is available in all browsers that support SW.
    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);
    if (publicUrl.origin !== window.location.origin) {
      // Our service worker won't work if PUBLIC_URL is on a different origin
      // from what our page is served on. This might happen if a CDN is used to
      // serve assets; see https://github.com/facebook/create-react-app/issues/2374
      return;
    }

    window.addEventListener('load', () => {
      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;

      if (isLocalhost) {
        // This is running on localhost. Let's check if a service worker still exists or not.
        checkValidServiceWorker(swUrl, config);

        // Add some additional logging to localhost, pointing developers to the
        // service worker/PWA documentation.
        navigator.serviceWorker.ready.then(() => {
          console.log(
            'This web app is being served cache-first by a service ' +
              'worker. To learn more, visit https://cra.link/PWA'
          );
        });
      } else {
        // Is not localhost. Just register service worker
        registerValidSW(swUrl, config);
      }
    });
  }
}

function registerValidSW(swUrl, config) {
  navigator.serviceWorker
    .register(swUrl)
    .then((registration) => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing;
        if (installingWorker == null) {
          return;
        }
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              // At this point, the updated precached content has been fetched,
              // but the previous service worker will still serve the older
              // content until all client tabs are closed.
              console.log(
                'New content is available and will be used when all ' +
                  'tabs for this page are closed. See https://cra.link/PWA.'
              );

              // Execute callback
              if (config && config.onUpdate) {
                config.onUpdate(registration);
              }
            } else {
              // At this point, everything has been precached.
              // It's the perfect time to display a
              // "Content is cached for offline use." message.
              console.log('Content is cached for offline use.');

              // Execute callback
              if (config && config.onSuccess) {
                config.onSuccess(registration);
              }
            }
          }
        };
      };
    })
    .catch((error) => {
      console.error('Error during service worker registration:', error);
    });
}

function checkValidServiceWorker(swUrl, config) {
  // Check if the service worker can be found. If it can't reload the page.
  fetch(swUrl, {
    headers: { 'Service-Worker': 'script' },
  })
    .then((response) => {
      // Ensure service worker exists, and that we really are getting a JS file.
      const contentType = response.headers.get('content-type');
      if (
        response.status === 404 ||
        (contentType != null && contentType.indexOf('javascript') === -1)
      ) {
        // No service worker found. Probably a different app. Reload the page.
        navigator.serviceWorker.ready.then((registration) => {
          registration.unregister().then(() => {
            window.location.reload();
          });
        });
      } else {
        // Service worker found. Proceed as normal.
        registerValidSW(swUrl, config);
      }
    })
    .catch(() => {
      console.log('No internet connection found. App is running in offline mode.');
    });
}

export function unregister() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then((registration) => {
        registration.unregister();
      })
      .catch((error) => {
        console.error(error.message);
      });
  }
}

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\setupTests.js:
```
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\UserContext.js:
```
import React, { createContext, useState } from "react";
import axios from "axios";

export const UserContext = createContext();

const useLocalStorage = (key, initialValue) => {
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(error);
      return initialValue;
    }
  });

  const setValue = (value) => {
    try {
      window.localStorage.setItem(key, JSON.stringify(value));
      setStoredValue(value);
    } catch (error) {
      console.error(error);
    }
  };

  return [storedValue, setValue];
};

export const UserProvider = ({ children }) => {
  const [user, setUser] = useLocalStorage("user", null);

  return (
    <UserContext.Provider value={{ user, setUser }}>
      {children}
    </UserContext.Provider>
  );
};

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\assets\styles\styles.js:
```
import * as React from "react";
import { styled } from "@mui/material/styles";
import Badge from "@mui/material/Badge";
import Avatar from "@mui/material/Avatar";
import Stack from "@mui/material/Stack";
import Button from "@mui/material/Button";
import MuiAlert from "@mui/material/Alert";

import IconButton from "@mui/material/IconButton";
import CloseIcon from "@mui/icons-material/Close";

export const NAV_HOVER_STYLE =
  "relative text-xl w-fit block after:block after:content-[''] after:absolute after:h-[3px] after:bg-customYellow after:w-full after:scale-x-0 after:hover:scale-x-100 after:transition after:duration-300 after:origin-center";

export const NAV_ACTIVE_STYLE =
  "relative text-xl w-fit block after:block after:content-[''] after:absolute after:h-[3px] after:bg-customYellow after:w-full after:scale-x-100";

export const GRADIENT_BG = {
  backgroundColor: "hsla(0, 0%, 100%, 1)",
  backgroundImage:
    "linear-gradient(315deg, hsla(0, 0%, 100%, 1) 0%, hsla(190, 42%, 76%, 1) 100%)",
  MozBackgroundImage:
    "-moz-linear-gradient(315deg, hsla(0, 0%, 100%, 1) 0%, hsla(190, 42%, 76%, 1) 100%)",
  WebkitBackgroundImage:
    "-webkit-linear-gradient(315deg, hsla(0, 0%, 100%, 1) 0%, hsla(190, 42%, 76%, 1) 100%)",
  filter:
    'progid:DXImageTransform.Microsoft.gradient(startColorstr="#FFFFFF", endColorstr="#AAD4DC", GradientType=1)',
};
export const GRADIENT_BG_DM = {
  background: "hsla(0, 0%, 100%, 1)",
  backgroundImage:
    "linear-gradient(315deg, hsla(0, 0%, 100%, 1) 0%, hsla(189, 40%, 13%, 1) 100%)",
  MozBackgroundImage:
    "-moz-linear-gradient(315deg, hsla(0, 0%, 100%, 1) 0%, hsla(189, 40%, 13%, 1) 100%)",
  WebkitBackgroundImage:
    "-webkit-linear-gradient(315deg, hsla(0, 0%, 100%, 1) 0%, hsla(189, 40%, 13%, 1) 100%)",
  filter:
    'progid:DXImageTransform.Microsoft.gradient(startColorstr="#FFFFFF", endColorstr="#142B2F", GradientType=1)',
};

export const StyledBadge = styled(Badge)(({ theme }) => ({
  "& .MuiBadge-badge": {
    backgroundColor: "#44b700",
    color: "#44b700",
    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,
    "&::after": {
      position: "absolute",
      top: 0,
      left: 0,
      width: "100%",
      height: "100%",
      borderRadius: "50%",
      animation: "ripple 1.2s infinite ease-in-out",
      border: "1px solid currentColor",
      content: '""',
    },
  },
  "@keyframes ripple": {
    "0%": {
      transform: "scale(.8)",
      opacity: 1,
    },
    "100%": {
      transform: "scale(2.4)",
      opacity: 0,
    },
  },
}));

export const Alert = React.forwardRef(function Alert(props, ref) {
  return <MuiAlert elevation={6} ref={ref} variant="filled" {...props} />;
});

export const mapContainerStyle = {
  width: "100%",
  height: "calc(100vh - 90px)",
};

export const mapOptions = {
  streetViewControl: false,
  zoomControl: false,
  mapTypeControl: false,
  scaleControl: false,
  rotateControl: false,
  fullscreenControl: false,
  styles: [
    {
      featureType: "poi",
      stylers: [{ visibility: "off" }],
    },
    {
      featureType: "transit",
      elementType: "labels.icon",
      stylers: [{ visibility: "off" }],
    },
  ],
};



```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\data\dummy.js:
```
import geoloc from "../assets/images/geolocation.png";
import rating from "../assets/images/rating.png";
import chat from "../assets/images/message.png";
import report from "../assets/images/report.png";
import cod from "../assets/images/cod.png";
import queue from "../assets/images/queue.png";

export const services = [
  {
    title: "Geolocation",
    description:
      "Utilize our precise location services, ensuring accurate navigation and personalized experiences tailored to your specific needs.",
    logo: geoloc,
  },
  {
    title: "Chat",
    description:
      "Engage in instant messaging, fostering real-time communication for quick and efficient interactions with our user-friendly interface.",
    logo: chat,
  },
  {
    title: "Cash on delivery",
    description:
      "Opt for the convenient payment option, allowing you to pay upon receiving your orders at your doorstep.",
    logo: cod,
  },
  {
    title: "Report",
    description:
      " Quickly address issues with our easy reporting system, facilitating prompt resolution and continuous improvement of our services.",
    logo: report,
  },
  {
    title: "Rating",
    description:
      "Share your valuable insights through our comprehensive rating and review system, enhancing user satisfaction and refining experiences.",
    logo: rating,
  },
  {
    title: "Customer queue",
    description:
      "Enjoy a streamlined and organized customer experience with our efficient queue management system for seamless transactions.",
    logo: queue,
  },
];

```

d:\Users\Mark\Documents\GitHub\react-projects\Palit-A-Nearby-Vendor-Commerce-App\src\utils\functions.js:
```
// Import fruits, fish, assorted, and manicure images for vendor icons
import fruits from "../assets/images/fruits_categ.png";
import fish from "../assets/images/fish_categ.png";
import assorted from "../assets/images/assorted_categ.png";
import manicure from "../assets/images/manicure_categ.png";
// Import axios library for making HTTP requests
import axios from "axios";

// Define a constant for the Earth's radius in kilometers
const R = 6371;
// Define a function to convert degrees to radians
const deg2rad = (deg) => deg * (Math.PI / 180);
// Define a function to calculate the distance between two points on the Earth's surface using the haversine formula
const getDistance = (lat1, lon1, lat2, lon2) => {
  // Calculate the difference in latitude and longitude in radians
  const dLat = deg2rad(lat2 - lat1);
  const dLon = deg2rad(lon2 - lon1);
  // Calculate the haversine of half the central angle between the points
  const a =
    Math.sin(dLat / 2) ** 2 +
    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) ** 2;
  // Return the distance in meters by multiplying the Earth's radius and the inverse haversine of the central angle
  return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)) * 1000;
};

// Define a function to return the appropriate vendor icon image based on the category
const vendorIcons = (category) => {
  // Use a switch statement to match the category with the corresponding image
  switch (category) {
    case "fruits":
      return fruits;
    case "fish":
      return fish;
    case "manicure":
      return manicure;
    case "assorted":
      return assorted;
    default:
      return fruits;
  }
};

// Define a function for rendering the vendor marker icon
const renderVendorMarkerIcon = (marker) => {
  // Check if the google maps object is available
  if (
    typeof window.google === "object" &&
    typeof window.google.maps === "object"
  ) {
    // Return an object with the marker image url and scaled size
    return {
      url: marker,
      scaledSize: new window.google.maps.Size(40, 40),
    };
  }
  // Otherwise, return undefined
  return undefined;
};
// Define a function for updating the location in the context
const updateLocationInContext = (
  position,
  currentPosition,
  setCurrentPosition,
  user
) => {
  // Get the latitude and longitude from the position object
  const { latitude, longitude } = position.coords;
  // Create an updated location object with the latitude and longitude
  const updatedLocation = { lat: latitude, lng: longitude };
  // Set the current position state to the updated location
  setCurrentPosition(updatedLocation);
  // If the user and user location are available, make a PUT request to update the location in the database
  if (user && user.account.location) {
    axios
      .put(
        `http://localhost:8080/api/updateLocationById/${user.account.location.locationId}`,
        // { latitude, longitude }
        { latitude: latitude, longitude: longitude }
      )
      .then((response) => {
        console.log("Location successfully updated: ", response.data);
        // Set the current position state to the response data
        setCurrentPosition({
          lat: response.data.latitude,
          lng: response.data.longitude,
        });
      })
      .catch((error) => {
        // Log the error to the console
        console.error("Error updating location:", error);
      });
  }
};
// Define a function for calculating the offset for the map center
const calculateOffset = (mapRef) => {
  // If the map ref is available, get the zoom level of the map
  if (mapRef.current) {
    const zoomLevel = mapRef.current.getZoom();
    // Return the offset value based on the zoom level
    return 0.02 / Math.pow(2, zoomLevel - 14);
  }
  // Otherwise, return 0
  return 0;
};
// Define a function for panning and zooming the map
const panAndZoomMap = (mapRef, currentPosition, showSlider) => {
  // If the map ref and current position are available
  if (mapRef.current && currentPosition) {
    // Calculate the offset value
    const offset = calculateOffset(mapRef);
    // Create a new center object with the current position and the offset
    const newCenter = {
      lat: currentPosition.lat,
      lng: currentPosition.lng + (showSlider ? offset : 0),
    };
    // Pan the map to the new center
    mapRef.current.panTo(newCenter);
  }
};
// Define a function for handling the slider toggle
const handleSliderToggle = (showSlider, setShowSlider) => {
  // Set the show slider state to the opposite of its current value
  setShowSlider(!showSlider);
};
// Define a function for handling the report button click
const handleReport = () => {
  // Redirect the window to the report page
  window.location.href = "/report";
};
// Define a function for fetching the nearby users
const fetchNearbyUsers = (
  currentPosition,
  user,
  mapRef,
  customerMarker,
  markers
) => {
  // Make a GET request to get all the users from the database
  axios
    .get("http://localhost:8080/api/getAllUsers")
    .then(({ data }) => {
      // Log the users
      console.log("Users:", data);

      // Filter out users who are vendors and within 200 meters of the current user
      const getNearbyUsers = data.filter((otherUser) => {
        console.log(
          getDistance(
            currentPosition.lat,
            currentPosition.lng,
            otherUser.account.location.latitude,
            otherUser.account.location.longitude
          )
        );
        if (
          user.account.isVendor === !otherUser.account.isVendor &&
          otherUser.account.location.isActive &&
          getDistance(
            currentPosition.lat,
            currentPosition.lng,
            otherUser.account.location.latitude,
            otherUser.account.location.longitude
          ) <= 200
        ) {
          return true;
        }
        return false;
      });

      console.log("Filtered users:", getNearbyUsers);

      // Mark the users on the map with markers
      getNearbyUsers.forEach((user) => {
        console.log("markers: ", markers);

        // If the marker already exists, remove it
        if (markers[user.account.accountId]) {
          markers[user.account.accountId].setMap(null);
        }

        const userMarker = new window.google.maps.Marker({
          position: {
            lat: user.account.location.latitude,
            lng: user.account.location.longitude,
          },
          map: mapRef.current, // Assuming you have a map reference
          icon: {
            url: user.account.isVendor
              ? vendorIcons(user.account.store.category)
              : customerMarker,
            scaledSize: new window.google.maps.Size(30, 30),
          },
        });

        // Add the marker to mapRef.current.markers
        markers[user.account.accountId] = userMarker;

        // You can add click event handling for the markers if needed
        userMarker.addListener("click", () => {
          window.location.href = `/store/${user.accountId}`;
        });
      });
    })
    .catch((error) => console.error("Error fetching users: ", error));
};
// Export the utility functions
export {
  getDistance,
  vendorIcons,
  renderVendorMarkerIcon,
  updateLocationInContext,
  calculateOffset,
  panAndZoomMap,
  handleSliderToggle,
  handleReport,
  fetchNearbyUsers,
};

```

