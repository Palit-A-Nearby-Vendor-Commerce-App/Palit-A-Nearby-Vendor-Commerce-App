
AccountEntity.java:
```
package com.nearbyvendor.palit.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import javax.persistence.*;
import java.util.List;
import java.util.Set;

@Entity
@Table(name = "tblAccount")
public class AccountEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer accountId;

    private String email;

    private String password;

    private boolean isVendor;

    private boolean isAdmin;

    private boolean isDeleted;

    @JsonIgnore
    @OneToOne(mappedBy = "account")
    private UserEntity user;

    @OneToOne
    @JoinColumn(name = "locationId", referencedColumnName = "locationId")
    private LocationEntity location;

    @OneToOne
    @JoinColumn(name = "storeId", referencedColumnName = "storeId")
    private StoreEntity store;
    
    @JsonIgnore
    @OneToMany(mappedBy = "customer")
    private Set<TransactionEntity> customerTransactions;

    @JsonIgnore
    @OneToMany(mappedBy = "account")
    private Set<ChatEntity> chats;

    @JsonIgnore
    @OneToMany(mappedBy = "customer")
    private Set<ConversationEntity> conversations;

    @JsonIgnore
    @OneToMany(mappedBy = "vendor")
    private Set<TransactionEntity> vendorTransactions;

    @JsonIgnore
    @OneToMany(mappedBy = "account")
    private List<ReportEntity> reports;

    public AccountEntity() {
    }

    public AccountEntity(int accountId, String email, String password, LocationEntity location, StoreEntity store,
                         boolean isVendor, boolean isAdmin) {
        this.accountId = accountId;
        this.email = email;
        this.password = password;
        this.location = location;
        this.store = store;
        this.isVendor = isVendor;
        this.isAdmin = isAdmin;
        this.isDeleted = false;
    }

    public Integer getAccountId() {
        return accountId;
    }

    public void setAccountId(Integer accountId) {
        this.accountId = accountId;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public boolean getIsVendor() {
        return isVendor;
    }

    public void setIsVendor(boolean isVendor) {
        this.isVendor = isVendor;
    }

    public boolean getIsAdmin() {
        return isAdmin;
    }

    public void setIsAdmin(boolean isAdmin) {
        this.isAdmin = isAdmin;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public UserEntity getUser() {
        return user;
    }

    public void setUser(UserEntity user) {
        this.user = user;
    }

    public LocationEntity getLocation() {
        return location;
    }

    public void setLocation(LocationEntity location) {
        this.location = location;
    }

    public StoreEntity getStore() {
        return store;
    }

    public void setStore(StoreEntity store) {
        this.store = store;
    }

    public Set<TransactionEntity> getCustomerTransactions() {
        return customerTransactions;
    }

    public void setCustomerTransactions(Set<TransactionEntity> customerTransactions) {
        this.customerTransactions = customerTransactions;
    }

    public Set<ChatEntity> getChats() {
        return chats;
    }

    public void setChats(Set<ChatEntity> chats) {
        this.chats = chats;
    }

    public Set<ConversationEntity> getConversations() {
        return conversations;
    }

    public void setConversations(Set<ConversationEntity> conversations) {
        this.conversations = conversations;
    }

    public Set<TransactionEntity> getVendorTransactions() {
        return vendorTransactions;
    }

    public void setVendorTransactions(Set<TransactionEntity> vendorTransactions) {
        this.vendorTransactions = vendorTransactions;
    }

    public List<ReportEntity> getReports() {
        return reports;
    }

    public void setReports(List<ReportEntity> reports) {
        this.reports = reports;
    }
}

```

ChatEntity.java:
```
package com.nearbyvendor.palit.entity;

import javax.persistence.*;
import java.sql.Timestamp;

@Entity
@Table(name = "tblChat")
public class ChatEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int chatId;

    @ManyToOne
    @JoinColumn(name = "senderId", referencedColumnName = "accountId")
    private AccountEntity account;

    private String messageContent;

    private Timestamp timestamp;

    @ManyToOne
    @JoinColumn(name = "conversationId", referencedColumnName = "conversationId")
    private ConversationEntity conversation;

    private boolean isDeleted;

    public ChatEntity() {
    }

    public ChatEntity(int chatId, AccountEntity account, String messageContent, Timestamp timestamp,
                      ConversationEntity conversation) {
        this.chatId = chatId;
        this.account = account;
        this.messageContent = messageContent;
        this.timestamp = timestamp;
        this.conversation = conversation;
        this.isDeleted = false;
    }

    public int getChatId() {
        return chatId;
    }

    public void setChatId(int chatId) {
        this.chatId = chatId;
    }

    public AccountEntity getAccount() {
        return account;
    }

    public void setAccount(AccountEntity account) {
        this.account = account;
    }

    public String getMessageContent() {
        return messageContent;
    }

    public void setMessageContent(String messageContent) {
        this.messageContent = messageContent;
    }

    public Timestamp getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Timestamp timestamp) {
        this.timestamp = timestamp;
    }

    public ConversationEntity getConversation() {
        return conversation;
    }

    public void setConversation(ConversationEntity conversation) {
        this.conversation = conversation;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }
}

```

ConversationEntity.java:
```
package com.nearbyvendor.palit.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import javax.persistence.*;
import java.util.Set;

@Entity
@Table(name = "tblConversation")
public class ConversationEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int conversationId;

    @ManyToOne
    @JoinColumn(name = "vendorAccountId", referencedColumnName = "accountId")
    private AccountEntity vendor;

    @ManyToOne
    @JoinColumn(name = "customerAccountId", referencedColumnName = "accountId")
    private AccountEntity customer;

    @JsonIgnore
    @OneToMany(mappedBy = "conversation")
    private Set<ChatEntity> chats;

    private boolean isDeleted;

    public ConversationEntity() {
    }

    public ConversationEntity(int conversationId, AccountEntity vendor, AccountEntity customer) {
        this.conversationId = conversationId;
        this.vendor = vendor;
        this.customer = customer;
        this.isDeleted = false;
    }

    public int getConversationId() {
        return conversationId;
    }

    public void setConversationId(int conversationId) {
        this.conversationId = conversationId;
    }

    public AccountEntity getVendor() {
        return vendor;
    }

    public void setVendor(AccountEntity vendor) {
        this.vendor = vendor;
    }

    public AccountEntity getCustomer() {
        return customer;
    }

    public void setCustomer(AccountEntity customer) {
        this.customer = customer;
    }

    public Set<ChatEntity> getChats() {
        return chats;
    }

    public void setChats(Set<ChatEntity> chats) {
        this.chats = chats;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }
}
```

LocationEntity.java:
```
package com.nearbyvendor.palit.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;

import javax.persistence.*;

@Entity
@Table(name = "tblLocation")
public class LocationEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int locationId;

    private double latitude;

    private double longitude;

    private boolean isDeleted;

    private boolean isActive;

    @JsonIgnore
    @OneToOne(mappedBy = "location")
    private AccountEntity account;

    public LocationEntity() {
    }

        public LocationEntity(int locationId, double latitude, double longitude, boolean isActive, AccountEntity account) {
            this.locationId = locationId;
            this.latitude = latitude;
            this.longitude = longitude;
            this.isActive = isActive;
            this.account = account;
            this.isDeleted = false;
        }

        public int getLocationId() {
            return locationId;
        }

        public void setLocationId(int locationId) {
            this.locationId = locationId;
        }

        public double getLatitude() {
            return latitude;
        }

        public void setLatitude(double latitude) {
            this.latitude = latitude;
        }

        public double getLongitude() {
            return longitude;
        }

        public void setLongitude(double longitude) {
            this.longitude = longitude;
        }

        public boolean getIsDeleted() {
            return isDeleted;
        }

        public void setIsDeleted(boolean isDeleted) {
            this.isDeleted = isDeleted;
        }

        public boolean getIsActive() {
            return isActive;
        }

        public void setIsActive(boolean isActive) {
            this.isActive = isActive;
        }

        public AccountEntity getAccount() {
            return account;
        }

        public void setAccount(AccountEntity account) {
            this.account = account;
        }
    }

```

ProductServiceEntity.java:
```
package com.nearbyvendor.palit.entity;

import javax.persistence.*;

@Entity
@Table(name = "tblProduct_service")
public class ProductServiceEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int productId;

    private String name;

    private double price;

    @Lob
    private byte[] image;

    private boolean isDeleted;

    @ManyToOne
    @JoinColumn(name = "storeId", referencedColumnName = "storeId")
    private StoreEntity store;

    public ProductServiceEntity() {
    }

    public ProductServiceEntity(String name, double price, byte[] image, StoreEntity store) {
        this.name = name;
        this.price = price;
        this.store = store;
        this.image = image;
        this.isDeleted = false;
    }

    public int getProductId() {
        return productId;
    }

    public void setProductId(int productId) {
        this.productId = productId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public byte[] getImage() {
        return image;
    }

    public void setImage(byte[] image) {
        this.image = image;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public StoreEntity getStore() {
        return store;
    }

    public void setStore(StoreEntity store) {
        this.store = store;
    }
}

```

ReportEntity.java:
```
package com.nearbyvendor.palit.entity;

import javax.persistence.*;
import java.sql.Timestamp;

@Entity
@Table(name = "tblReport")
public class ReportEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int reportId;

    @ManyToOne
    @JoinColumn(name = "senderId")
    private AccountEntity account;

    private String messageContent;

    private Timestamp timestamp;

    private boolean isResolved;

    private boolean isDeleted;

    public ReportEntity() {
    }

    public ReportEntity(AccountEntity account, String messageContent, Timestamp timestamp, boolean isResolved) {
        this.account = account;
        this.messageContent = messageContent;
        this.timestamp = timestamp;
        this.isResolved = isResolved;
        this.isDeleted = false;
    }

    public int getReportId() {
        return reportId;
    }

    public void setReportId(int reportId) {
        this.reportId = reportId;
    }

    public AccountEntity getSenderId() {
        return account;
    }

    public void setSenderId(AccountEntity account) {
        this.account = account;
    }

    public String getMessageContent() {
        return messageContent;
    }

    public void setMessageContent(String messageContent) {
        this.messageContent = messageContent;
    }

    public Timestamp getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Timestamp timestamp) {
        this.timestamp = timestamp;
    }

    public boolean getIsResolved() {
        return isResolved;
    }

    public void setIsResolved(boolean isResolved) {
        this.isResolved = isResolved;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public AccountEntity getAccount() {
        return account;
    }

    public void setAccount(AccountEntity account) {
        this.account = account;
    }
}

```

StoreEntity.java:
```
package com.nearbyvendor.palit.entity;

import java.util.List;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnore;

@Entity
@Table(name = "tblStore")
public class StoreEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int storeId;

    private String storeName;

    private String description;

    private String category;

    private boolean isDeleted;

    @JsonIgnore
    @OneToOne(mappedBy = "store")
    private AccountEntity account;

    @JsonIgnore
    @OneToMany(mappedBy = "store")
    private List<ProductServiceEntity> productServices;

    public StoreEntity() {

    }

    public StoreEntity(String storeName, String description, String category, AccountEntity account) {
        this.storeName = storeName;
        this.description = description;
        this.category = category;
        this.account = account;
        this.isDeleted = false;
    }

    public int getStoreId() {
        return storeId;
    }

    public void setStoreId(int storeId) {
        this.storeId = storeId;
    }

    public String getStoreName() {
        return storeName;
    }

    public void setStoreName(String storeName) {
        this.storeName = storeName;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public AccountEntity getAccount() {
        return account;
    }

    public void setAccount(AccountEntity account) {
        this.account = account;
    }

    public List<ProductServiceEntity> getProductServices() {
        return productServices;
    }

    public void setProductServices(List<ProductServiceEntity> productServices) {
        this.productServices = productServices;
    }
}

```

TransactionEntity.java:
```
package com.nearbyvendor.palit.entity;

import javax.persistence.*;

@Entity
@Table(name = "tblTransaction")
public class TransactionEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int transactionId;

    private String status;

    private boolean isDeleted;

    private String details; // Added string details

    @ManyToOne
    @JoinColumn(name = "accountCustomerId", referencedColumnName = "accountId")
    private AccountEntity customer;

    @ManyToOne
    @JoinColumn(name = "accountVendorId", referencedColumnName = "accountId")
    private AccountEntity vendor;

    public TransactionEntity() {
    }

    public TransactionEntity(AccountEntity customer, AccountEntity vendor, String status, String details) { // Updated constructor
        this.customer = customer;
        this.vendor = vendor;
        this.status = status;
        this.details = details;
        this.isDeleted = false;
    }

    public int getTransactionId() {
        return transactionId;
    }

    public void setTransactionId(int transactionId) {
        this.transactionId = transactionId;
    }

    public AccountEntity getAccountCustomerId() {
        return customer;
    }

    public void setAccountCustomerId(AccountEntity customer) {
        this.customer = customer;
    }

    public AccountEntity getAccountVendorId() {
        return vendor;
    }

    public void setAccountVendorId(AccountEntity vendor) {
        this.vendor = vendor;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public String getDetails() {
        return details;
    }

    public void setDetails(String details) {
        this.details = details;
    }

    public AccountEntity getCustomer() {
        return customer;
    }

    public void setCustomer(AccountEntity customer) {
        this.customer = customer;
    }

    public AccountEntity getVendor() {
        return vendor;
    }

    public void setVendor(AccountEntity vendor) {
        this.vendor = vendor;
    }
}
```

UserEntity.java:
```
package com.nearbyvendor.palit.entity;

import javax.persistence.*;
import java.util.Date;

@Entity
@Table(name = "tblUser")
public class UserEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int userId;

    private String firstName;

    private String lastName;

    @Temporal(TemporalType.DATE)
    private Date birthDate;

    private boolean isDeleted;

    @Lob
    private byte[] image;

    @OneToOne
    @JoinColumn(name = "accountId", referencedColumnName = "accountId")
    private AccountEntity account;

    public UserEntity() {
    }

    public UserEntity(int userId, String firstName, String lastName, Date birthDate, boolean isDeleted, byte[] image,
                      AccountEntity account) {
        this.userId = userId;
        this.firstName = firstName;
        this.lastName = lastName;
        this.birthDate = birthDate;
        this.isDeleted = isDeleted;
        this.image = image;
        this.account = account;
        this.isDeleted = false;
    }

    public UserEntity(int userId, String firstName, String lastName, Date birthDate, byte[] image,
                      AccountEntity account) {
        this.userId = userId;
        this.firstName = firstName;
        this.lastName = lastName;
        this.birthDate = birthDate;
        this.isDeleted = false;
        this.image = image;
    }

    public int getUserId() {
        return userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public Date getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(Date birthDate) {
        this.birthDate = birthDate;
    }

    public byte[] getImage() {
        return image;
    }

    public void setImage(byte[] image) {
        this.image = image;
    }

    public boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    public AccountEntity getAccount() {
        return this.account;
    }

    public void setAccount(AccountEntity account) {
        this.account = account;
    }

}

```

AccountController.java:
```
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.AccountEntity;
import com.nearbyvendor.palit.service.AccountService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class AccountController {

    @Autowired
    private AccountService accountService;

    @GetMapping("/getAllAccounts")
    public ResponseEntity<List<AccountEntity>> getAllAccounts() {
        List<AccountEntity> accounts = accountService.getAllAccounts();
        return new ResponseEntity<>(accounts, HttpStatus.OK);
    }

    @GetMapping("/getAccountById/{id}")
    public ResponseEntity<AccountEntity> getAccountById(@PathVariable int id) {
        AccountEntity account = accountService.getAccountById(id);
        if (account != null) {
            return new ResponseEntity<>(account, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @PostMapping("/createAccount")
    public ResponseEntity<AccountEntity> createAccount(@RequestBody AccountEntity account) {
        AccountEntity createdAccount = accountService.createAccount(account);
        return new ResponseEntity<>(createdAccount, HttpStatus.CREATED);
    }

    @PutMapping("/editAccountById/{id}")
    public ResponseEntity<AccountEntity> editAccountById(@PathVariable int id, @RequestBody AccountEntity account) {
        AccountEntity updatedAccount = accountService.updateAccountById(id, account);
        if (updatedAccount != null) {
            return new ResponseEntity<>(updatedAccount, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @DeleteMapping("/deleteAccountById/{id}")
    public ResponseEntity<Void> deleteAccountById(@PathVariable int id) {
        boolean deleted = accountService.deleteAccountById(id);
        if (deleted) {
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @PostMapping("/isEmailTaken")
    public ResponseEntity<Boolean> checkEmail(@RequestBody AccountEntity account) {
        boolean isEmailTaken = accountService.checkEmail(account);
        return new ResponseEntity<>(isEmailTaken, HttpStatus.OK);
    }
    
    @GetMapping("/getAllAdminAccounts")
    public ResponseEntity<List<AccountEntity>> getAllAdminAccounts() {
        List<AccountEntity> adminAccounts = accountService.getAllAdminAccounts();

        if (!adminAccounts.isEmpty()) {
            return new ResponseEntity<>(adminAccounts, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
}

```

ChatController.java:
```
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.ChatEntity;
import com.nearbyvendor.palit.service.ChatService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class ChatController {

    @Autowired
    private ChatService chatService;

    @GetMapping("getChatsByConversationId/{conversationId}")
    public ResponseEntity<List<ChatEntity>> getChatsByConversationId(@PathVariable int conversationId) {
        List<ChatEntity> chats = chatService.getChatsByConversationId(conversationId);
        return new ResponseEntity<>(chats, HttpStatus.OK);
    }

    @PostMapping("/createChat")
    public ResponseEntity<Object> createChat(@RequestBody ChatEntity chat) {

        if (chat.getAccount() == null) {
            return new ResponseEntity<>("Account information is required for creating a chat.", HttpStatus.BAD_REQUEST);
        }

        ChatEntity createdChat = chatService.createChat(chat);
        return new ResponseEntity<>(createdChat, HttpStatus.CREATED);
    }

    @PutMapping("updateChatById/{chatId}")
    public ResponseEntity<ChatEntity> updateChatById(@PathVariable int chatId, @RequestBody ChatEntity chat) {
        ChatEntity updatedChat = chatService.updateChatById(chatId, chat);
        if (updatedChat != null) {
            return new ResponseEntity<>(updatedChat, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @DeleteMapping("deleteChatById/{chatId}")
    public ResponseEntity<Void> deleteChatById(@PathVariable int chatId) {
        boolean deleted = chatService.deleteChatById(chatId);
        if (deleted) {
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
}

```

ConversationController.java:
```
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.ConversationEntity;
import com.nearbyvendor.palit.service.ConversationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class ConversationController {

    @Autowired
    private ConversationService conversationService;

    @GetMapping("/getAllConversations")
    public ResponseEntity<List<ConversationEntity>> getAllConversations() {
        List<ConversationEntity> conversations = conversationService.getAllConversations();
        return new ResponseEntity<>(conversations, HttpStatus.OK);
    }

    @GetMapping("/getConversationById/{id}")
    public ResponseEntity<ConversationEntity> getConversationById(@PathVariable("id") int id) {
        ConversationEntity conversation = conversationService.getConversationById(id);
        if (conversation != null) {
            return new ResponseEntity<>(conversation, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @PostMapping("/createConversation")
    public ResponseEntity<ConversationEntity> createConversation(@RequestBody ConversationEntity conversation) {
        ConversationEntity newConversation = conversationService.createConversation(conversation);
        return new ResponseEntity<>(newConversation, HttpStatus.CREATED);
    }

    @PutMapping("/updateConversationById/{id}")
    public ResponseEntity<ConversationEntity> updateConversationById(@PathVariable("id") int id,
                                                                     @RequestBody ConversationEntity conversation) {
        ConversationEntity updatedConversation = conversationService.updateConversationById(id, conversation);
        if (updatedConversation != null) {
            return new ResponseEntity<>(updatedConversation, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @DeleteMapping("/deleteConversationById/{id}")
    public ResponseEntity<Void> deleteConversationById(@PathVariable("id") int id) {
        boolean deleted = conversationService.deleteConversationById(id);
        if (deleted) {
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
    
    @GetMapping("/getConversationByParticipants/{vendorId}/{customerId}")
    public ResponseEntity<?> getConversationByParticipants(
            @PathVariable("vendorId") int vendorId,
            @PathVariable("customerId") int customerId) {
        try {
            ConversationEntity conversation = conversationService.getConversationByParticipants(vendorId, customerId);
            if (conversation != null) {
                return new ResponseEntity<>(conversation, HttpStatus.OK);
            } else {
                return new ResponseEntity<>("Conversation not found", HttpStatus.NOT_FOUND);
            }
        } catch (Exception e) {
            return new ResponseEntity<>("Error fetching conversation: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}

```

LocationController.java:
```
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.LocationEntity;
import com.nearbyvendor.palit.service.LocationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class LocationController {

    @Autowired
    private LocationService locationService;

    @GetMapping("/getAllLocations")
    public ResponseEntity<List<LocationEntity>> getAllLocations() {
        List<LocationEntity> locations = locationService.getAllLocations();
        return new ResponseEntity<>(locations, HttpStatus.OK);
    }

    @GetMapping("/getLocationById/{id}")
    public ResponseEntity<LocationEntity> getLocationById(@PathVariable("id") int id) {
        LocationEntity location = locationService.getLocationById(id);
        if (location != null) {
            return new ResponseEntity<>(location, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @PostMapping("/createLocation")
    public ResponseEntity<LocationEntity> createLocation(@RequestBody LocationEntity location) {
        LocationEntity newLocation = locationService.createLocation(location);
        return new ResponseEntity<>(newLocation, HttpStatus.CREATED);
    }

    @PutMapping("/updateLocationById/{id}")
    public ResponseEntity<LocationEntity> updateLocationById(@PathVariable("id") int id,
                                                             @RequestBody LocationEntity location) {
        LocationEntity updatedLocation = locationService.updateLocationById(id, location);
        if (updatedLocation != null) {
            return new ResponseEntity<>(updatedLocation, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @DeleteMapping("/deleteLocationById/{id}")
    public ResponseEntity<Void> deleteLocationById(@PathVariable("id") int id) {
        boolean deleted = locationService.deleteLocationById(id);
        if (deleted) {
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
}

```

ProductServiceController.java:
```
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.ProductServiceEntity;
import com.nearbyvendor.palit.service.ProductServiceService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class ProductServiceController {

    @Autowired
    private ProductServiceService productServiceService;

    @GetMapping("/getAllProductServices")
    public ResponseEntity<List<ProductServiceEntity>> getAllProductServices() {
        List<ProductServiceEntity> productServices = productServiceService.getAllProductServices();
        return new ResponseEntity<>(productServices, HttpStatus.OK);
    }

    @GetMapping("/getProductServiceById/{id}")
    public ResponseEntity<ProductServiceEntity> getProductServiceById(@PathVariable int id) {
        ProductServiceEntity productService = productServiceService.getProductServiceById(id);
        if (productService != null) {
            return new ResponseEntity<>(productService, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @GetMapping("/getProductServicesByStoreId/store/{storeId}")
    public ResponseEntity<List<ProductServiceEntity>> getProductServicesByStoreId(@PathVariable int storeId) {
        List<ProductServiceEntity> productServices = productServiceService.getProductServicesByStoreId(storeId);
        return new ResponseEntity<>(productServices, HttpStatus.OK);
    }

    @PostMapping("/createProductService")
    public ResponseEntity<ProductServiceEntity> createProductService(@RequestBody ProductServiceEntity productService) {
        ProductServiceEntity newProductService = productServiceService.createProductService(productService);
        return new ResponseEntity<>(newProductService, HttpStatus.CREATED);
    }

    @PutMapping("/updateProductServiceById/{id}")
    public ResponseEntity<ProductServiceEntity> updateProductService(@PathVariable int id,
                                                                     @RequestBody ProductServiceEntity productService) {
        ProductServiceEntity updatedProductService = productServiceService.updateProductServiceById(id, productService);
        if (updatedProductService != null) {
            return new ResponseEntity<>(updatedProductService, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @DeleteMapping("/deleteProductServiceById/{id}")
    public ResponseEntity<Void> deleteProductServiceById(@PathVariable int id) {
        boolean deleted = productServiceService.deleteProductServiceById(id);
        if (deleted) {
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
}

```

ReportController.java:
```
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.ReportEntity;
import com.nearbyvendor.palit.service.ReportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class ReportController {

    @Autowired
    private ReportService reportService;

    @GetMapping("/getAllReports")
    public ResponseEntity<List<ReportEntity>> getAllReports() {
        List<ReportEntity> reports = reportService.getAllReports();
        return new ResponseEntity<>(reports, HttpStatus.OK);
    }

    @GetMapping("/getReportById/{id}")
    public ResponseEntity<ReportEntity> getReportById(@PathVariable int id) {
        ReportEntity report = reportService.getReportById(id);
        if (report != null) {
            return new ResponseEntity<>(report, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @PostMapping("/createReport")
    public ResponseEntity<ReportEntity> createReport(@RequestBody ReportEntity report) {
        ReportEntity newReport = reportService.createReport(report);
        return new ResponseEntity<>(newReport, HttpStatus.CREATED);
    }

    @PutMapping("/updateReportById/{id}")
    public ResponseEntity<ReportEntity> updateReportById(@PathVariable int id, @RequestBody ReportEntity report) {
        ReportEntity updatedReport = reportService.updateReportById(id, report);
        if (updatedReport != null) {
            return new ResponseEntity<>(updatedReport, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @DeleteMapping("/deleteReportById/{id}")
    public ResponseEntity<Void> deleteReportById(@PathVariable int id) {
        boolean deleted = reportService.deleteReportById(id);
        if (deleted) {
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
}

```

StoreController.java:
```
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.StoreEntity;
import com.nearbyvendor.palit.service.StoreService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class StoreController {

    @Autowired
    private StoreService storeService;

    @GetMapping("/getAllStores")
    public ResponseEntity<List<StoreEntity>> getAllStores() {
        List<StoreEntity> stores = storeService.getAllStores();
        return new ResponseEntity<>(stores, HttpStatus.OK);
    }

    @GetMapping("/getStoreById/{id}")
    public ResponseEntity<StoreEntity> getStoreById(@PathVariable("id") int id) {
        StoreEntity store = storeService.getStoreById(id);
        if (store != null) {
            return new ResponseEntity<>(store, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @PostMapping("/createStore")
    public ResponseEntity<StoreEntity> createStore(@RequestBody StoreEntity store) {
        StoreEntity newStore = storeService.createStore(store);
        return new ResponseEntity<>(newStore, HttpStatus.CREATED);
    }

    @PutMapping("/updateStoreById/{id}")
    public ResponseEntity<StoreEntity> updateStore(@PathVariable("id") int id, @RequestBody StoreEntity store) {
        StoreEntity updatedStore = storeService.updateStoreById(id, store);
        if (updatedStore != null) {
            return new ResponseEntity<>(updatedStore, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
}

```

TransactionController.java:
```
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.TransactionEntity;
import com.nearbyvendor.palit.service.TransactionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class TransactionController {

    @Autowired
    private TransactionService transactionService;

    @GetMapping("/getAllTransactions")
    public ResponseEntity<List<TransactionEntity>> getTransactions() {
        List<TransactionEntity> transactions = transactionService.getAllTransactions();
        return new ResponseEntity<>(transactions, HttpStatus.OK);
    }

    @GetMapping("/getTransactionById/{id}")
    public ResponseEntity<TransactionEntity> getTransactionById(@PathVariable int id) {
        TransactionEntity transaction = transactionService.getTransactionById(id);
        if (transaction != null) {
            return new ResponseEntity<>(transaction, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @PostMapping("/createTransaction")
    public ResponseEntity<TransactionEntity> createTransaction(@RequestBody TransactionEntity transaction) {
        TransactionEntity newTransaction = transactionService.createTransaction(transaction);
        return new ResponseEntity<>(newTransaction, HttpStatus.CREATED);
    }

    @PutMapping("updateTransactionById/{id}")
    public ResponseEntity<TransactionEntity> updateTransactionById(@PathVariable int id,
                                                                   @RequestBody TransactionEntity transaction) {
        TransactionEntity updatedTransaction = transactionService.updateTransactionById(id, transaction);
        if (updatedTransaction != null) {
            return new ResponseEntity<>(updatedTransaction, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @DeleteMapping("deleteTransactionById/{id}")
    public ResponseEntity<Void> deleteTransactionById(@PathVariable int id) {
        transactionService.deleteTransactionById(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}

```

UserController.java:
```
package com.nearbyvendor.palit.controller;

import com.nearbyvendor.palit.entity.UserEntity;
import com.nearbyvendor.palit.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class UserController {

    @Autowired
    private UserService userService;

    @GetMapping("/getAllUsers")
    public ResponseEntity<List<UserEntity>> getAllUsers() {
        List<UserEntity> users = userService.getAllUsers();
        return new ResponseEntity<>(users, HttpStatus.OK);
    }

    @GetMapping("/getUserById/{id}")
    public ResponseEntity<UserEntity> getUserById(@PathVariable int id) {
        UserEntity user = userService.getUserById(id);
        if (user != null) {
            return new ResponseEntity<>(user, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @PostMapping(value = "/createUser")
    public ResponseEntity<UserEntity> createUser(@RequestBody UserEntity newUserEntity) {
        UserEntity user = userService.createUser(newUserEntity);
        return new ResponseEntity<>(user, HttpStatus.CREATED);
    }

    @PutMapping(value = "/updateUserById/{id}")
    public ResponseEntity<UserEntity> updateUser(@PathVariable("id") int id,
                                                 @RequestBody UserEntity updatedUserEntity) {
        UserEntity user = userService.updateUserById(id, updatedUserEntity);
        return new ResponseEntity<>(user, HttpStatus.CREATED);
    }

    @DeleteMapping("/deleteUserById/{id}")
    public ResponseEntity<Void> deleteUserById(@PathVariable int id) {
        userService.deleteUserById(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}

```

{
  "customer": 1
  "vendor": 2
  "status": "test"
  "details": "test"
}

returns
{
    "timestamp": "2023-12-04T02:31:46.515+00:00",
    "status": 400,
    "error": "Bad Request",
    "message": "JSON parse error: Cannot construct instance of `com.nearbyvendor.palit.entity.AccountEntity` (although at least one Creator exists): no int/Int-argument constructor/factory method to deserialize from Number value (1); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `com.nearbyvendor.palit.entity.AccountEntity` (although at least one Creator exists): no int/Int-argument constructor/factory method to deserialize from Number value (1)\n at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 2, column: 15] (through reference chain: com.nearbyvendor.palit.entity.TransactionEntity[\"customer\"])",
    "path": "/api/createTransaction"
}