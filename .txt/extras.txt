based on the ff service classes (there are controller classes i did not include with mapping /nameOfThClass) and given our class diagram what apis do i need to implement for the signup page.

class diagram:
```
@startuml
class User {
    - int userId
    - String name
    - Date birthDate
    - String email
    - String password
    - Image image
    + int getUserId()
    + void setUserId(int userId)
    + String getName()
    + void setName(String name)
    + Date getBirthDate()
    + void setBirthDate(Date birthDate)
    + String getEmail()
    + void setEmail(String email)
    + String getPassword()
    + void setPassword(String password)
    + Image getImage()
    + void setImage()
}

class Account {
    - int accountId
    - boolean isVendor
    - boolean isAdmin
    - int userId
    + boolean getIsVendor()
    + void setIsVendor(boolean isVendor)
    + boolean getIsAdmin()
    + void setIsAdmin()
    + int getUserId()
    + void setUserId(int userId)
    + int getAccountId()
    + void setAccountId(int accountId)
}

User "1" -- "1" Account : has

class Store {
    - int storeId
    - String storeName
    - String description
    - String category
    - int vendorAccountId
	  - int rating
	+ int getStoreId()
	+ void setStoreId(int storeId)
	+ String getStoreName()
	+ void setStoreName(String storeName)
	+ String getDescription()
	+ void setDescription(String description)
	+ String getCategory()
	+ void setCategory(String category)
	+ int getVendorAccountId()
	+ void setVendorAccountId(int vendorAccountId)
	+ int getRating()
	+ void setRating(int rating)
}

Account "1" -- "1" Store : owns

class ProductService {
	- int productId
	- String name
	- String description
	- double price
	- int storeId
	- String imagePath
	+ int getProductId()
	+ void setProductId(int productId)
	+ String getName()
	+ void setName(String name)
	+ String getDescription()
	+ void setDescription(String description)
	+ double getPrice()
	+ void setPrice(double price)
	+ String getImagePath()
	+ void setImagePath(String imagePath)
	+ int getStoreId()
	+ void setStoreId(int storeId)
}

Store "1" -- "*" ProductService : offers

class Location {
	- int locationId
	- double latitude
	- double longitude
	- int accountId
	+ int getLocationId()
	+ void setLocationId(int locationId)
	+ double getLatitude()
	+ void setLatitude(double latitude)
	+ double getLongitude()
	+ void setLongitude(double longitude)
	+ int getAccountId()
	+ void setAccountId(int accountId)
}

Account "1" -- "1" Location : has

class Conversation {
   - int conversationId
   - int senderId
   - int receiverId
   + int getConversationId()
   + void setConversationId(int conversationId)
   + int getSenderId()
   + void setSenderId(int senderId)
   + int getReceiverId()
   + void setReceiverId(int receiverId)
}

Account "*" -- "*" Conversation : participates in

class Chat {
   - int chatId
   - int senderId
   - int receiverId
   - String messageContent
   - Timestamp timestamp
   - int conversationId
   + int getChatId()
   + void setChatId(int chatId)
   + int getSenderId()
   + void setSenderId(int senderId)
   + int getReceiverId()
   + void setReceiverId(int receiverId)
   + String getMessageContent()
   + void setMessageContent(String messageContent)
   + Timestamp getTimestamp()
   + void setTimestamp(Timestamp timestamp)
   + int getConversationId() 
   + void setConversationId(int conversationId)
}

Account "*" -- "*" Chat : sends

Chat "*" -- "1" Conversation : belongs to

class Transaction {
   -  int accountCustomerId
   -  int accountVendorId
   -  String status
   -  int rating 
   + int getAccountCustomerId() 
   + void setAccountCustomerId(int accountCustomerId)
   + int getAccountVendorId() 
   + void setAccountVendorId(int accountVendorId)
   + String getStatus() 
   + void setStatus(String status) 
   + int getRating() 
   + void setRating(int rating) 
}

Account "*" -- "*" Transaction : involves

class Report {
   - int reportId
   - int senderId
   - Timestamp timestamp
   - boolean isResolved
   + int getReportId()
   + void setReportId(int reportId)
   + int getSenderId()
   + void setSenderId(int senderId)
   + String getMessageContent()
   + void setMessageContent(String messageContent)
   + Timestamp getTimestamp()
   + void setTimestamp(Timestamp timestamp)
   + boolean getIsResolved()
   + void setIsResolved(boolean isResolved)
}

Account "1" -- "*" Report : sends

@enduml

```


```
package com.nearbyvendor.palit.service;

import com.nearbyvendor.palit.entity.UserEntity;
import com.nearbyvendor.palit.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    public List<UserEntity> getAllUsers() {
        return userRepository.findAll();
    }

    public UserEntity getUserById(int id) {
        return userRepository.findById(id).orElse(null);
    }

    public UserEntity saveUser(UserEntity user) {
        return userRepository.save(user);
    }

    public void deleteUserById(int id) {
        userRepository.deleteById(id);
    }
}
```

```
package com.nearbyvendor.palit.service;

import com.nearbyvendor.palit.entity.AccountEntity;
import com.nearbyvendor.palit.repository.AccountRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class AccountService {

    @Autowired
    private AccountRepository accountRepository;

    public List<AccountEntity> getAllAccounts() {
        return accountRepository.findAll();
    }

    public AccountEntity getAccountById(int id) {
        return accountRepository.findById(id).orElse(null);
    }

    public AccountEntity saveAccount(int id, AccountEntity account) {
        if (accountRepository.findById(id) != null) {
            return accountRepository.save(account);
        } else {
            // Handle the case when the account ID is null or does not exist
            // You can throw an exception or handle it in a different way based on your requirements
            throw new IllegalArgumentException("Invalid account ID");
        }
    }

    public void deleteAccountById(int id) {
        accountRepository.deleteById(id);
    }
    
}

```
