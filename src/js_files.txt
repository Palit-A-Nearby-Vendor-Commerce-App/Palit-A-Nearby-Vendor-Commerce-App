import { React, useState } from "react";
import { GoSidebarExpand, GoSidebarCollapse } from "react-icons/go";
import stroke from "../assets/images/stroke.png";
import ManageStore from "../pages/ManageStore";
import Queue from "../pages/Queue";
import Store from "../pages/Store";

import { FaStore } from "react-icons/fa";

const MapSlidingBox = ({
  showSlider,
  handleSliderToggle,
  selectedVendor,
  user,
}) => {
  const [selectedButton, setSelectedButton] = useState("queue");
  const sliderBoxStyle = {
    position: "absolute",
    bottom: "20px",
    right: showSlider ? "30px" : "-410px",
    width: "400px",
    height: "95%",
    backgroundColor: "#fff",
    borderRadius: "5px",
    boxShadow: "0 0 3px rgba(0, 0, 0, 0.3)",
    transition: "right 0.3s ease",
    overflow: "hidden",
    padding: "20px",
    backgroundImage: `url(${stroke})`,
    backgroundSize: "cover",
    backgroundPosition: "center",
    backgroundRepeat: "no-repeat",
  };

  const handleStoreButton = () => {
    setSelectedButton("store");
  };

  const handleQueueButton = () => {
    setSelectedButton("queue");
    handleSliderToggle(true);
  };

  return (
    <div>
      <div style={sliderBoxStyle}>
        {user.account.isVendor ? (
          selectedButton === "queue" ? (
            <>
              <Queue />
              <button
                type="button"
                onClick={handleStoreButton}
                className="w-full bg-primary p-3 text-white rounded-[20px] flex items-center justify-center mt-5"
              >
                <FaStore size={30} className="mr-2" />
                <span className="text-lg  ">My Store</span>
              </button>
            </>
          ) : (
            <>
              <ManageStore user={user} showQueue={handleQueueButton} />
              <button
                type="button"
                onClick={handleQueueButton}
                className="w-full bg-primary p-3 text-white rounded-[20px] flex items-center justify-center mt-5"
              >
                <span className="text-lg  ">My Store</span>
              </button>
            </>
          )
        ) : selectedVendor ? (
            <Store vendor={selectedVendor} />
        ) : (
          <p>Select a store to view</p>
        )}
      </div>
      {user.account.isVendor ? (
        <div>
          <button
            style={{
              backgroundColor: "white",
              position: "absolute",
              right: showSlider ? "440px" : "80px",
              bottom: "20px",
              padding: "10px",
              borderRadius: "5px",
              boxShadow: "0 0 3px rgba(0, 0, 0, 0.3)",
              transition: "right 0.3s ease", // Add a transition to make the movement smooth
            }}
            onClick={handleQueueButton}
          >
            {showSlider ? (
              <GoSidebarCollapse size={30} />
            ) : (
              <GoSidebarExpand size={30} />
            )}
          </button>
        </div>
      ) : (
        <button
          style={{
            backgroundColor: "white",
            position: "absolute",
            right: showSlider ? "440px" : "80px",
            bottom: "20px",
            padding: "10px",
            borderRadius: "5px",
            boxShadow: "0 0 3px rgba(0, 0, 0, 0.3)",
            transition: "right 0.3s ease", // Add a transition to make the movement smooth
          }}
          onClick={handleSliderToggle}
        >
          {showSlider ? (
            <GoSidebarCollapse size={30} />
          ) : (
            <GoSidebarExpand size={30} />
          )}
        </button>
      )}
    </div>
  );
};
export default MapSlidingBox;


// Import React and its hooks
import React, {
  useCallback,
  useContext,
  useEffect,
  useRef,
  useState,
} from "react";

// Import Google Maps components from react-google-maps library
import { Circle, GoogleMap, LoadScript, Marker } from "@react-google-maps/api";
import { Link } from "react-router-dom";

// Import custom marker images for vendor and customer
import customerMarker from "../assets/images/customerIcon.png";
import marker from "../assets/images/vendor-self-pin.png";
import QuestionAnswerIcon from "@mui/icons-material/QuestionAnswer";
// Import axios library for making HTTP requests
import axios from "axios";

// Import custom components for navigation bar and map sliding box
import MapSlidingBox from "../components/MapSlidingBox";
import NavigationBar from "../components/NavigationBar";

// Import icon for report button
import { MdOutlineReportGmailerrorred } from "react-icons/md";

// Import user context for accessing user data
import { UserContext } from "../UserContext";

// Import custom styles for map container and options
import { mapContainerStyle, mapOptions } from "../assets/styles/styles";

// Import utility function for calculating distance between two points
import { getDistance, vendorIcons } from "../utils/functions";
import { ownerWindow } from "@mui/material";

let markers = [];

// Define the Home component
function Home() {
  // Get the user and setUser function from the user context
  const { user, setUser } = useContext(UserContext);

  // Define state variables for current position, nearby users, show slider, and selected vendor
  const [currentPosition, setCurrentPosition] = useState(null);
  const [showSlider, setShowSlider] = useState(false);
  const [selectedVendor, setSelectedVendor] = useState(null);
  const [selectedCustomer, setSelectedCustomer] = useState(null);

  // Define a ref variable for the map object
  const mapRef = useRef();

  // Define a callback function for loading the map
  const onMapLoad = useCallback(
    (map) => {
      // Assign the map object to the map ref
      mapRef.current = map;
      // If the current position is available, set the map center to it
      if (currentPosition) {
        mapRef.current.setCenter(currentPosition);
      }
    },
    [currentPosition]
  );

  // Define a function for rendering the vendor marker icon
  const renderVendorMarkerIcon = () => {
    // Check if the google maps object is available
    if (
      typeof window.google === "object" &&
      typeof window.google.maps === "object"
    ) {
      // Return an object with the marker image url and scaled size
      return {
        url: marker,
        scaledSize: new window.google.maps.Size(40, 40),
      };
    }
    // Otherwise, return undefined
    return undefined;
  };

  // Define a function for updating the location in the context
  const updateLocationInContext = (position) => {
    // Get the latitude and longitude from the position object
    const { latitude, longitude } = position.coords;
    // Create an updated location object with the latitude and longitude
    const updatedLocation = { lat: latitude, lng: longitude };

    // Set the current position state to the updated location
    setCurrentPosition(updatedLocation);

    // If the user and user location are available, make a PUT request to update the location in the database
    if (user && user.account.location) {
      axios
        .put(
          `http://localhost:8080/api/updateLocationById/${user.account.location.locationId}`,
          // { latitude, longitude }
          { ...user.account.location, latitude: latitude, longitude: longitude }
        )
        .then((response) => {
          console.log("Location successfully updated: ", response.data);
          // Set the current position state to the response data
          setCurrentPosition({
            lat: response.data.latitude,
            lng: response.data.longitude,
          });
        })
        .catch((error) => {
          // Log the error to the console
          console.error("Error updating location:", error);
        });
    }
  };

  // Define an effect hook for updating the location in the context
  useEffect(() => {
    // Use the navigator geolocation API to watch the position changes
    const watchId = navigator.geolocation.watchPosition(
      updateLocationInContext,
      (error) => console.log(error),
      { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }
    );

    // Return a cleanup function to clear the watch
    return () => navigator.geolocation.clearWatch(watchId);
  }, [user, user.account.location.latitude, user.account.location.longitude]);

  // Define a function for calculating the offset for the map center
  const calculateOffset = () => {
    // If the map ref is available, get the zoom level of the map
    if (mapRef.current) {
      const zoomLevel = mapRef.current.getZoom();
      // Return the offset value based on the zoom level
      return 0.02 / Math.pow(2, zoomLevel - 14);
    }
    // Otherwise, return 0
    return 0;
  };

  // Define a function for panning and zooming the map
  const panAndZoomMap = () => {
    // If the map ref and current position are available
    if (mapRef.current && currentPosition) {
      // Calculate the offset value
      const offset = calculateOffset();
      // Create a new center object with the current position and the offset
      const newCenter = {
        lat: currentPosition.lat,
        lng: currentPosition.lng + (showSlider ? offset : 0),
      };
      // Pan the map to the new center
      mapRef.current.panTo(newCenter);
    }
  };

  // Define an effect hook for panning and zooming the map
  useEffect(() => {
    panAndZoomMap();
  }, [showSlider, currentPosition]);

  // Define a function for handling the slider toggle
  const handleSliderToggle = () => {
    // Set the show slider state to the opposite of its current value
    setShowSlider((prevShowSlider) => !prevShowSlider);
  };

  // Define a function for handling the report button click
  const handleReport = () => {
    // Redirect the window to the report page
    window.location.href = "/report";
  };

  // Define an effect hook for fetching the nearby users
  useEffect(() => {
    // Make a GET request to get all the users from the database
    axios
      .get("http://localhost:8080/api/getAllUsers")
      .then(({ data }) => {
        // Log the users
        console.log("Users:", data);

        // Filter out users who are vendors and within 200 meters of the current user
        const getNearbyUsers = data.filter((otherUser) => {
          console.log(
            getDistance(
              currentPosition.lat,
              currentPosition.lng,
              otherUser.account.location.latitude,
              otherUser.account.location.longitude
            )
          );
          if (
            user.account.isVendor == !otherUser.account.isVendor &&
            otherUser.account.location.isActive &&
            getDistance(
              currentPosition.lat,
              currentPosition.lng,
              otherUser.account.location.latitude,
              otherUser.account.location.longitude
            ) <= 200
          ) {
            return true;
          }
          return false;
        });

        console.log("Filtered users:", getNearbyUsers);

        // Mark the users on the map with markers
        getNearbyUsers.forEach((user) => {
          console.log("markers: ", markers);

          // If the marker already exists, remove it
          if (markers[user.account.accountId]) {
            markers[user.account.accountId].setMap(null);
          }

          const userMarker = new window.google.maps.Marker({
            position: {
              lat: user.account.location.latitude,
              lng: user.account.location.longitude,
            },
            map: mapRef.current, // Assuming you have a map reference
            icon: {
              url: user.account.isVendor
                ? vendorIcons(user.account.store.category)
                : customerMarker,
              scaledSize: new window.google.maps.Size(30, 30),
            },
            // Add a custom property to store the user id of the marker
            owner: user,
          });

          // Add the marker to mapRef.current.markers
          console.log("OWNERRR: ", markers[ownerWindow.userId]);
          markers[ownerWindow.userId] = userMarker;

          // Add a click event listener for the markers to handle the vendor click
          userMarker.addListener("click", () => {
            handleMarkerClick(userMarker.owner);
          });
        });
      })
      .catch((error) => console.error("Error fetching users: ", error));
  }, [currentPosition, user.account]);

  // Define a function for handling the vendor marker click
  const handleMarkerClick = (owner) => {
    // If the user object has a property called isVendor that is true, set the selected vendor state to the user object
    if (owner && owner.account.isVendor) {
      setSelectedVendor(owner);
    } else {
      setSelectedCustomer(owner);
    }

    // Toggle the value of showSlider
    setShowSlider(true);
  };

  // Return the JSX element for rendering the component
  return (
    <>
      <div className="w-full h-70vh font-custom">
        <NavigationBar />
        <LoadScript googleMapsApiKey="AIzaSyBNM-CYx7dA0gckgBmybtovang7Bvp8lK0">
          <div>
            <GoogleMap
              mapContainerStyle={mapContainerStyle}
              zoom={17}
              className="flex-1"
              options={mapOptions}
              onLoad={onMapLoad}
            >
              {currentPosition && (
                <>
                  <Marker
                    position={currentPosition}
                    icon={renderVendorMarkerIcon()}
                  />
                </>
              )}
              {currentPosition && (
                <Circle
                  center={currentPosition}
                  radius={200}
                  options={{
                    strokeColor: "#0071B3",
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: "#0071B3",
                    fillOpacity: 0.05,
                  }}
                />
              )}
              <MapSlidingBox
                showSlider={showSlider}
                selectedVendor={selectedVendor}
                handleSliderToggle={handleSliderToggle}
                user={user}
              />
            </GoogleMap>
            <button
              style={{
                backgroundColor: "white",
                position: "absolute",
                left: "30px",
                bottom: "30px",
                padding: "10px",
                borderRadius: "5px",
                boxShadow: "0 0 5px rgba(0, 0, 0, 0.3)",
                transition: "left 0.3s ease, bottom 0.3s ease",
              }}
              onClick={handleReport}
            >
              <MdOutlineReportGmailerrorred size={30} />
            </button>
            {selectedVendor && (
              <Link to={{ pathname: "/chat", state: { selectedVendor } }}>
                <button className="animate-bounce absolute bottom-[100px] left-[30px] p-[14px] shadow-md rounded-md bg-primary">
                  <QuestionAnswerIcon sx={{ color: "white" }} />
                </button>
              </Link>
            )}
            {selectedCustomer && (
              <Link to={{ pathname: "/chat", state: { selectedCustomer } }}>
                <button className="animate-bounce absolute bottom-[100px] left-[30px] p-[14px] shadow-md rounded-md bg-primary">
                  <QuestionAnswerIcon sx={{ color: "white" }} />
                </button>
              </Link>
            )}
          </div>
        </LoadScript>
      </div>
    </>
  );
}

// Export the Home component
export default Home;


import { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField } from "@mui/material";
import axios from "axios";
import React, { useContext, useEffect, useState } from "react";
import { UserContext } from "../UserContext";
import redRating from "../assets/images/redRating.png";
import editStore from "../assets/images/editStore.png";

const ManageStore = () => {
    const { user, setUser } = useContext(UserContext);
    const [anchorEl, setAnchorEl] = useState(null);
    const [editMode, setEditMode] = useState(false);
    const [editedProduct, setEditedProduct] = useState({
        picture: "",
        name: "",
        price: " 0.00",
    });
    const [products, setProducts] = useState([]);
    const [store, setStore] = useState(null);
    const [imagePreview, setImagePreview] = useState(null);
    const [editedStore, setEditedStore] = useState({
        storeName: "",
        category: "",
        description: "",
    });
    const [openDialog, setOpenDialog] = useState(false);
    const [confirmAction, setConfirmAction] = useState(null);
    const [actionType, setActionType] = useState(null);
    const [successMessage, setSuccessMessage] = useState(null);

    useEffect(() => {
        const userApiEndpoint = `http://localhost:8080/api/getUserById/${user.id}`;
        const accountApiEndpoint = "http://localhost:8080/api/getAccountById/";
        const storeApiEndpoint = "http://localhost:8080/api/getStoreById/";

        axios
            .get(userApiEndpoint)
            .then((response) => {
                if (response.data && response.data.accountId) {
                    return axios.get(accountApiEndpoint + response.data.accountId);
                } else {
                    throw new Error("Account ID not found in user data");
                }
            })
            .then((response) => {
                if (response.data && response.data.store) {
                    return axios.get(storeApiEndpoint + response.data.store.storeId);
                } else {
                    throw new Error("Store ID not found in account data");
                }
            })
            .then((response) => {
                if (response.data) {
                    setStore(response.data);
                    console.log("Store data:", response.data);
                }
            })
            .catch((error) => {
                console.error("Error fetching data: ", error);
            });

        const fetchProducts = async () => {
            try {
                const response = await axios.get(`http://localhost:8080/api/getProductServicesByStoreId/store/${user.account.store.storeId}`);
                setProducts(response.data);
                localStorage.setItem('products', JSON.stringify(response.data));
            } catch (error) {
                console.error('Error fetching products:', error);
                const localData = localStorage.getItem('products');
                if (localData) {
                    setProducts(JSON.parse(localData));
                }
            }
        };

        fetchProducts();
    }, []);

    const handleMenu = (event) => {
        setAnchorEl(event.currentTarget);
    };

    const handleClose = () => {
        setAnchorEl(null);
    };

    const handleEdit = () => {
        setEditMode(true);
    };

    useEffect(() => {
        if (user.account.store) {
            setEditedStore({
                storeName: user.account.store.storeName,
                category: user.account.store.category,
                description: user.account.store.description,
            });
        }
    }, [user.account.store]);

    const handleStoreInputChange = (event) => {
        const { name, value } = event.target;
        setEditedStore({
            ...editedStore,
            [name]: value,
        });
    };

    const handleSaveConfirm = () => {
        console.log("Save clicked", products);

        products.forEach((product) => {
            axios
                .put(`http://localhost:8080/api/updateProductServiceById/${product.productId}`, product)
                .then((response) => {
                    console.log("Product updated:", response.data);
                })
                .catch((error) => {
                    console.error("Error updating product:", error);
                });
        });

        axios
            .put(`http://localhost:8080/api/updateStoreById/${user.account.store.storeId}`, editedStore)
            .then((response) => {
                console.log("Store updated:", response.data);
                setStore(response.data);

                setUser((prevUser) => ({
                    ...prevUser,
                    account: {
                        ...prevUser.account,
                        store: response.data,
                    },
                }));
                setSuccessMessage('Successfully saved.');
            })
            .catch((error) => {
                console.error("Error updating store:", error);
            });

        setEditMode(false);
        setEditedProduct({
            picture: "",
            name: "",
            price: "",
        });

    };

    const handleInputChange = (event) => {
        const { name, value } = event.target;
        if (name === 'price') {
            setEditedProduct({
                ...editedProduct,
                [name]: value,
            });
        } else {
            setEditedProduct({
                ...editedProduct,
                [name]: value,
            });
        }
    };

    const handleImageChange = (e) => {
        setEditedProduct({
            ...editedProduct,
            picture: e.target.files[0],
        });
        setImagePreview(
            e.target.files[0] ? URL.createObjectURL(e.target.files[0]) : null
        );
    };

    const handleProductImageChange = (e, index) => {
        const newProducts = [...products];
        newProducts[index].image = e.target.files[0];
        newProducts[index].imagePreview = e.target.files[0] ? URL.createObjectURL(e.target.files[0]) : null;
        setProducts(newProducts);
    };

    const handleProductInputChange = (e, index) => {
        const { name, value } = e.target;
        const newProducts = [...products];
        if (name === 'price') {
            newProducts[index][name] = value;
        } else {
            newProducts[index][name] = value;
        }
        setProducts(newProducts);
    };



    const handleAddConfirm = async () => {
        if (!editedProduct.picture || !editedProduct.name || !editedProduct.price) {
            alert("Please fill in all product details.");
            return;
        }

        function convertToBase64(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = () => resolve(reader.result.split(",")[1]);
                reader.onerror = (error) => reject(error);
            });
        }

        const imageBase64 = await convertToBase64(editedProduct.picture);

        const productData = {
            name: editedProduct.name,
            price: editedProduct.price,
            image: imageBase64,
            store: { storeId: user.account.store.storeId },
        };

        setProducts((prevProducts) => [...prevProducts, productData]);

        axios
            .post("http://localhost:8080/api/createProductService", productData)
            .then((response) => {
                console.log("Product created:", response.data);
                setSuccessMessage('Successfully added.');
            })
            .catch((error) => {
                console.error("Error creating product:", error);
            });

        setEditedProduct({
            picture: "",
            name: "",
            price: "",
        });

        setImagePreview(null);
    };

    const handleDeleteConfirm = (index) => {
        const newProducts = [...products];
        newProducts[index].isDeleted = 1;
        setProducts(newProducts);

        axios
            .delete(`http://localhost:8080/api/deleteProductServiceById/${newProducts[index].productId}`)
            .then((response) => {
                console.log("Product deleted:", response.data);
                setSuccessMessage('Successfully deleted.');
            })
            .catch((error) => {
                console.error("Error deleting product:", error);
            });
    };

    const openConfirmationDialog = (action, actionType) => {
        setConfirmAction(action);
        setActionType(actionType);
        setOpenDialog(true);
    };

    const handleSave = () => {
        openConfirmationDialog(() => handleSaveConfirm, 'save');
    };

    const handleAdd = () => {
        openConfirmationDialog(() => handleAddConfirm, 'add');
    };

    const handleDelete = (index) => {
        openConfirmationDialog(() => () => handleDeleteConfirm(index), 'delete');
    };

    return (
        <div style={{ height: "100vh", display: "flex", flexDirection: "column" }}>
            {/* User details */}
            <div style={{ display: "flex" }}>
                <img
                    src={`data:image/png;base64, ${user.image}`}
                    alt="User"
                    className="w-14 h-15 rounded-full border-2 border-black"
                    style={{ width: "70px", height: "70px" }}
                    onClick={handleMenu}
                />
                <div className="ml-3" style={{ flexDirection: "column" }}>
                    {editMode ? (
                        <TextField
                            name="storeName"
                            variant="outlined"
                            InputProps={{
                                style: {
                                    fontSize: 15,
                                    height: 25,
                                    width: "267px",
                                    paddingRight: '10px',
                                    color: "black",
                                    fontWeight: "bold",
                                },
                            }}
                            value={editedStore.storeName}
                            onChange={handleStoreInputChange}
                        />
                    ) : (
                        <h2 className="text-xl font-semibold">
                            {editedStore.storeName ? editedStore.storeName : "Loading..."}
                        </h2>
                    )}
                    {editMode ? (
                        <TextField
                            name="category"
                            variant="outlined"
                            InputProps={{
                                style: {
                                    fontSize: 15,
                                    height: 20,
                                    marginTop: "5px",
                                    width: "267px",
                                    paddingRight: '10px',
                                    color: "black",
                                },
                            }}
                            value={editedStore.category}
                            onChange={handleStoreInputChange}
                        />
                    ) : (
                        <p className="text-sm">
                            {editedStore.category ? editedStore.category : "Loading..."}
                        </p>
                    )}
                </div>
            </div>
            <div className="p-2" style={{ height: "90px" }}>
                {editMode ? (
                    <TextField
                        name="description"
                        variant="outlined"
                        multiline
                        rows={4}
                        InputProps={{
                            style: {
                                fontSize: 15,
                                height: 85,
                                width: "340px",
                                color: "black",
                                paddingBottom: "10px",
                                textAlign: "justify"
                            },
                        }}
                        value={editedStore.description}
                        onChange={handleStoreInputChange}
                    />
                ) : (
                    <p className="text-sm" style={{ textAlign: "justify" }}>
                        {editedStore.description ? editedStore.description : "Loading..."}
                    </p>
                )}
            </div>
            <h1
                className="p-2 text-lg font-medium"
                style={{ fontSize: "25px", color: "#0071B3" }}
            >
                Products
            </h1>
            {editMode ? (
                <div
                    className="productscomponent"
                    style={{
                        marginBottom: "20px", width: "95%", position: "relative"

                    }}
                >
                    <div className="flex">
                        <label className="flex-1  justify-center items-center bg-primary rounded-[20px] cursor-pointer mx-auto flex">
                            <input
                                name="image"
                                type="file"
                                accept="image/*"
                                onChange={handleImageChange}
                                className="hidden"
                            />
                            {imagePreview ? (
                                <img
                                    src={imagePreview}
                                    alt="Preview"
                                    className="w-full h-[136px] rounded-[20px] inline-block border-[3px] border-green-400 "
                                />
                            ) : (
                                <span className="text-lg font-semibold` text-white inline-block">
                                    Choose image
                                </span>
                            )}
                        </label>
                        <div className="flex-1">
                            <TextField
                                label="Product Name"
                                name="name"
                                variant="outlined"
                                placeholder="Enter product name"
                                value={editedProduct.name}
                                onChange={handleInputChange}
                                margin="normal"
                                size="small"
                                style={{
                                    width: "40%",
                                    fontSize: "12px",
                                    position: "absolute",
                                    marginTop: "5px",
                                    marginLeft: "10px",
                                }}
                            />
                            <TextField
                                label="Product Price"
                                name="price"
                                variant="outlined"
                                type="text"
                                value={editedProduct.price}
                                onChange={handleInputChange}
                                margin="normal"
                                size="small"
                                style={{
                                    width: "40%",
                                    fontSize: "12px",
                                    marginTop: "50px",
                                    position: "absolute",
                                    marginLeft: "10px",
                                }}
                            />
                            <Button
                                variant="contained"
                                color="primary"
                                style={{
                                    borderRadius: "15px",
                                    width: "80%",
                                    marginTop: "100px",
                                    marginLeft: "10px",
                                }}
                                onClick={handleAdd}
                            >
                                Add
                            </Button>
                        </div>
                    </div>
                </div>
            ) : (
                <div>{ }</div>
            )}
            <div style={{ maxHeight: editMode ? "350px" : "510px", display: "flex", flexWrap: "wrap", justifyContent: "space-between", overflow: "auto", position: "relative" }}>
                {products.map((product, index) => (
                    <div key={product.productId} style={{ marginBottom: "20px", width: "48%", position: "relative" }}>
                        {editMode ? (
                            <>

                                <button
                                    style={{ position: 'absolute', top: 0, right: 0, fontWeight: 'bold', fontSize: '20px', color: 'red', backgroundColor: 'white', border: 'none', borderRadius: '50%', width: '30px', height: '30px', cursor: 'pointer' }}
                                    onClick={() => handleDelete(index)}
                                >
                                    X
                                </button>
                                <label
                                    style={{
                                        width: "100%",
                                        height: "150px",
                                        border: "1px solid black",
                                        borderRadius: "15px",
                                        backgroundImage: `url(${product.imagePreview || `data:image/png;base64,${product.image}`})`,
                                        backgroundSize: 'cover',
                                        backgroundPosition: 'center',
                                        display: 'inline-block'
                                    }}
                                >
                                    <input
                                        type="file"
                                        accept="image/*"
                                        onChange={(e) => handleProductImageChange(e, index)}
                                        style={{ display: 'none' }}
                                    />
                                </label>
                                <TextField
                                    name="name"
                                    variant="outlined"
                                    value={product.name}
                                    onChange={(e) => handleProductInputChange(e, index)}
                                    margin="normal"
                                    size="small"
                                    InputProps={{
                                        style: {
                                            fontSize: 20,
                                            height: 25,
                                            paddingRight: '10px',
                                            borderRadius: "15px",
                                            color: "white",
                                            fontWeight: "bold",

                                        },
                                    }}
                                    style={{
                                        position: "absolute",
                                        top: "-15px",
                                        left: "39%",
                                        width: "79%",
                                        transform: "translateX(-50%)",
                                        color: "white",
                                        fontWeight: "bold",
                                        backgroundColor: "rgba(136, 170, 204, 0.7)",
                                        borderRadius: "15px",
                                    }}
                                />
                                <TextField
                                    name="price"
                                    variant="outlined"
                                    type="text"
                                    value={product.price}
                                    onChange={(e) => handleProductInputChange(e, index)}
                                    margin="normal"
                                    size="small"
                                    InputProps={{
                                        style: {
                                            fontSize: 15,
                                            height: 20,
                                            paddingRight: '5x',
                                            borderRadius: "15px",
                                            fontWeight: "bold",
                                        },
                                    }}
                                    style={{
                                        position: "absolute",
                                        bottom: "0px",
                                        left: "0%",
                                        width: "50%",
                                        textAlign: "left",
                                        color: "black",
                                        fontSize: "14px",
                                        fontWeight: "bold",
                                        backgroundColor: "#c0d8f0",
                                        borderRadius: "10px"
                                    }}
                                />
                            </>
                        ) : (
                            <>
                                <img
                                    src={`data:image/png;base64,${product.image}`}
                                    alt={`Product ${index + 1}`}
                                    style={{ width: "100%", height: "150px", border: "1px solid black", borderRadius: "15px" }}
                                />
                                <p style={{ position: "absolute", top: "1px", left: "49%", width: "100%", transform: "translateX(-50%)", paddingLeft: "10px", paddingRight: "5px", color: "white", fontSize: "16px", fontWeight: "bold", backgroundColor: "rgba(136, 170, 204, 0.7)", borderRadius: "15px" }}>
                                    {product.name}
                                </p>
                                <p style={{ position: "absolute", bottom: "1px", left: "3%", textAlign: "left", color: "black", fontSize: "14px", fontWeight: "bold", backgroundColor: "#c0d8f0", paddingLeft: "10px", paddingRight: "5px", borderRadius: "10px" }}>
                                    ₱{product.price}
                                </p>
                            </>
                        )}
                    </div>
                ))}
            </div>
            <div className="flex mt-4 absolute bottom-8 w-full">
                {editMode ? (
                    <Button
                        variant="contained"
                        color="primary"
                        style={{ borderRadius: "15px", width: "90%" }}
                        onClick={handleSave}
                    >
                        Save
                    </Button>
                ) : (
                    <Button
                        variant="contained"
                        color="primary"
                        style={{ borderRadius: "15px", width: "90%" }}
                        onClick={handleEdit}
                    >
                        Edit Store and Products
                    </Button>
                )}
            </div>
            <Dialog
                open={openDialog}
                onClose={() => setOpenDialog(false)}
                aria-labelledby="alert-dialog-title"
                aria-describedby="alert-dialog-description"
            >
                <DialogTitle id="alert-dialog-title">{"Confirm Action"}</DialogTitle>
                <DialogContent>
                    <DialogContentText id="alert-dialog-description">
                        {actionType === 'delete' && 'Are you sure you want to delete this?'}
                        {actionType === 'save' && 'Are you sure you want to save this?'}
                        {actionType === 'add' && 'Are you sure you want to add this?'}
                    </DialogContentText>
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setOpenDialog(false)} color="primary" style={{ backgroundColor: "#E8594F", color: "white" }}>
                        Cancel
                    </Button>
                    <Button onClick={() => { confirmAction(); setOpenDialog(false); }} color="primary" autoFocus style={{ backgroundColor: "#0575B4", color: "white" }}>
                        Confirm
                    </Button>
                </DialogActions>
            </Dialog>
            <Dialog
                open={!!successMessage}
                onClose={() => setSuccessMessage(null)}
                aria-labelledby="success-dialog-title"
                aria-describedby="success-dialog-description"
            >
                <DialogTitle id="success-dialog-title">{"Success"}</DialogTitle>
                <DialogContent>
                    <DialogContentText id="success-dialog-description">
                        {successMessage}
                    </DialogContentText>
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setSuccessMessage(null)} color="primary" autoFocus style={{ backgroundColor: "#0575B4", color: "white" }}>
                        OK
                    </Button>
                </DialogActions>
            </Dialog>
        </div>
    );
};

export default ManageStore;


